
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800436c  0800436c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800436c  0800436c  0001436c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004374  08004374  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800437c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000004f4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000564  20000564  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4c  00000000  00000000  00029a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c0  00000000  00000000  0002bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021567  00000000  00000000  0002c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a38d  00000000  00000000  0004dc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4636  00000000  00000000  00057fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011c622  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002890  00000000  00000000  0011c674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004070 	.word	0x08004070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004070 	.word	0x08004070

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 800057e:	4821      	ldr	r0, [pc, #132]	; (8000604 <etx_ota_download_and_flash+0x90>)
 8000580:	f002 fdf8 	bl	8003174 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <etx_ota_download_and_flash+0x94>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <etx_ota_download_and_flash+0x98>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <etx_ota_download_and_flash+0x9c>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <etx_ota_download_and_flash+0xa0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 800059c:	f240 4209 	movw	r2, #1033	; 0x409
 80005a0:	2100      	movs	r1, #0
 80005a2:	481d      	ldr	r0, [pc, #116]	; (8000618 <etx_ota_download_and_flash+0xa4>)
 80005a4:	f002 fd58 	bl	8003058 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 80005a8:	f240 4109 	movw	r1, #1033	; 0x409
 80005ac:	481a      	ldr	r0, [pc, #104]	; (8000618 <etx_ota_download_and_flash+0xa4>)
 80005ae:	f000 f90d 	bl	80007cc <etx_receive_chunk>
 80005b2:	4603      	mov	r3, r0
 80005b4:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d007      	beq.n	80005cc <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 80005bc:	88bb      	ldrh	r3, [r7, #4]
 80005be:	4619      	mov	r1, r3
 80005c0:	4815      	ldr	r0, [pc, #84]	; (8000618 <etx_ota_download_and_flash+0xa4>)
 80005c2:	f000 f82f 	bl	8000624 <etx_process_data>
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
 80005ca:	e001      	b.n	80005d0 <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	71fb      	strb	r3, [r7, #7]
    }
    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d006      	beq.n	80005e4 <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <etx_ota_download_and_flash+0xa8>)
 80005d8:	f002 fdcc 	bl	8003174 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 f9b1 	bl	8000944 <etx_ota_send_resp>
      break;
 80005e2:	e009      	b.n	80005f8 <etx_ota_download_and_flash+0x84>
    }
    else
    {
      printf("Sending ACK\r\n");
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <etx_ota_download_and_flash+0xac>)
 80005e6:	f002 fdc5 	bl	8003174 <puts>
      etx_ota_send_resp( ETX_OTA_ACK );
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f9aa 	bl	8000944 <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <etx_ota_download_and_flash+0xa0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1d1      	bne.n	800059c <etx_ota_download_and_flash+0x28>

  return ret;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	08004088 	.word	0x08004088
 8000608:	20000498 	.word	0x20000498
 800060c:	200004a0 	.word	0x200004a0
 8000610:	2000049c 	.word	0x2000049c
 8000614:	20000495 	.word	0x20000495
 8000618:	2000008c 	.word	0x2000008c
 800061c:	080040a8 	.word	0x080040a8
 8000620:	080040b8 	.word	0x080040b8

08000624 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000630:	2301      	movs	r3, #1
 8000632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	f000 80a3 	beq.w	8000784 <etx_process_data+0x160>
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	2b00      	cmp	r3, #0
 8000642:	f000 809f 	beq.w	8000784 <etx_process_data+0x160>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800064a:	6a3b      	ldr	r3, [r7, #32]
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d104      	bne.n	800065c <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	2b02      	cmp	r3, #2
 8000658:	f000 8096 	beq.w	8000788 <etx_process_data+0x164>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 800065c:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <etx_process_data+0x184>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b04      	cmp	r3, #4
 8000662:	f200 808b 	bhi.w	800077c <etx_process_data+0x158>
 8000666:	a201      	add	r2, pc, #4	; (adr r2, 800066c <etx_process_data+0x48>)
 8000668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066c:	08000681 	.word	0x08000681
 8000670:	0800068f 	.word	0x0800068f
 8000674:	080006b7 	.word	0x080006b7
 8000678:	080006ed 	.word	0x080006ed
 800067c:	08000755 	.word	0x08000755
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 8000680:	484a      	ldr	r0, [pc, #296]	; (80007ac <etx_process_data+0x188>)
 8000682:	f002 fd77 	bl	8003174 <puts>
        ret = ETX_OTA_EX_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800068c:	e085      	b.n	800079a <etx_process_data+0x176>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d178      	bne.n	800078c <etx_process_data+0x168>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d174      	bne.n	800078c <etx_process_data+0x168>
          {
            printf("Received OTA START Command\r\n");
 80006a2:	4843      	ldr	r0, [pc, #268]	; (80007b0 <etx_process_data+0x18c>)
 80006a4:	f002 fd66 	bl	8003174 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 80006a8:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <etx_process_data+0x184>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 80006b4:	e06a      	b.n	800078c <etx_process_data+0x168>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d166      	bne.n	8000790 <etx_process_data+0x16c>
        {
          ota_fw_total_size = header->meta_data.package_size;
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	4a3b      	ldr	r2, [pc, #236]	; (80007b4 <etx_process_data+0x190>)
 80006c8:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <etx_process_data+0x194>)
 80006d0:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 80006d2:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <etx_process_data+0x190>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4838      	ldr	r0, [pc, #224]	; (80007bc <etx_process_data+0x198>)
 80006da:	f002 fcc5 	bl	8003068 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 80006de:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <etx_process_data+0x184>)
 80006e0:	2203      	movs	r2, #3
 80006e2:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
      break;
 80006ea:	e051      	b.n	8000790 <etx_process_data+0x16c>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	789a      	ldrb	r2, [r3, #2]
 80006f4:	78db      	ldrb	r3, [r3, #3]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	4313      	orrs	r3, r2
 80006fa:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d147      	bne.n	8000794 <etx_process_data+0x170>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf, data_len, ( ota_fw_received_size == 0) );
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <etx_process_data+0x19c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2da      	uxtb	r2, r3
 8000712:	8afb      	ldrh	r3, [r7, #22]
 8000714:	4619      	mov	r1, r3
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f93a 	bl	8000990 <write_data_to_flash_app>
 800071c:	4603      	mov	r3, r0
 800071e:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 8000720:	7d7b      	ldrb	r3, [r7, #21]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d136      	bne.n	8000794 <etx_process_data+0x170>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <etx_process_data+0x19c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	0a99      	lsrs	r1, r3, #10
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <etx_process_data+0x190>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	0a9b      	lsrs	r3, r3, #10
 8000732:	461a      	mov	r2, r3
 8000734:	4823      	ldr	r0, [pc, #140]	; (80007c4 <etx_process_data+0x1a0>)
 8000736:	f002 fc97 	bl	8003068 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <etx_process_data+0x19c>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <etx_process_data+0x190>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d302      	bcc.n	800074c <etx_process_data+0x128>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <etx_process_data+0x184>)
 8000748:	2204      	movs	r2, #4
 800074a:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 8000752:	e01f      	b.n	8000794 <etx_process_data+0x170>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d11b      	bne.n	8000798 <etx_process_data+0x174>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d117      	bne.n	8000798 <etx_process_data+0x174>
          {
            printf("Received OTA END Command\r\n");
 8000768:	4817      	ldr	r0, [pc, #92]	; (80007c8 <etx_process_data+0x1a4>)
 800076a:	f002 fd03 	bl	8003174 <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <etx_process_data+0x184>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000774:	2300      	movs	r3, #0
 8000776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 800077a:	e00d      	b.n	8000798 <etx_process_data+0x174>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 800077c:	2301      	movs	r3, #1
 800077e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000782:	e00a      	b.n	800079a <etx_process_data+0x176>
    };
 8000784:	bf00      	nop
 8000786:	e008      	b.n	800079a <etx_process_data+0x176>
        break;
 8000788:	bf00      	nop
 800078a:	e006      	b.n	800079a <etx_process_data+0x176>
      break;
 800078c:	bf00      	nop
 800078e:	e004      	b.n	800079a <etx_process_data+0x176>
      break;
 8000790:	bf00      	nop
 8000792:	e002      	b.n	800079a <etx_process_data+0x176>
      break;
 8000794:	bf00      	nop
 8000796:	e000      	b.n	800079a <etx_process_data+0x176>
      break;
 8000798:	bf00      	nop
  }while( false );

  return ret;
 800079a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000495 	.word	0x20000495
 80007ac:	080040c8 	.word	0x080040c8
 80007b0:	080040e0 	.word	0x080040e0
 80007b4:	20000498 	.word	0x20000498
 80007b8:	2000049c 	.word	0x2000049c
 80007bc:	080040fc 	.word	0x080040fc
 80007c0:	200004a0 	.word	0x200004a0
 80007c4:	08004124 	.word	0x08004124
 80007c8:	08004130 	.word	0x08004130

080007cc <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index     = 0u;
 80007d8:	2300      	movs	r3, #0
 80007da:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80007dc:	89bb      	ldrh	r3, [r7, #12]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	18d1      	adds	r1, r2, r3
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	2201      	movs	r2, #1
 80007e8:	4854      	ldr	r0, [pc, #336]	; (800093c <etx_receive_chunk+0x170>)
 80007ea:	f002 f886 	bl	80028fa <HAL_UART_Receive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80007f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d17f      	bne.n	80008fa <etx_receive_chunk+0x12e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 80007fa:	89bb      	ldrh	r3, [r7, #12]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	81ba      	strh	r2, [r7, #12]
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2baa      	cmp	r3, #170	; 0xaa
 800080a:	d002      	beq.n	8000812 <etx_receive_chunk+0x46>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 800080c:	2301      	movs	r3, #1
 800080e:	81fb      	strh	r3, [r7, #14]
      break;
 8000810:	e07c      	b.n	800090c <etx_receive_chunk+0x140>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	81ba      	strh	r2, [r7, #12]
 8000818:	461a      	mov	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	1899      	adds	r1, r3, r2
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	2201      	movs	r2, #1
 8000824:	4845      	ldr	r0, [pc, #276]	; (800093c <etx_receive_chunk+0x170>)
 8000826:	f002 f868 	bl	80028fa <HAL_UART_Receive>
 800082a:	4603      	mov	r3, r0
 800082c:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800082e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d163      	bne.n	80008fe <etx_receive_chunk+0x132>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	18d1      	adds	r1, r2, r3
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	2202      	movs	r2, #2
 8000842:	483e      	ldr	r0, [pc, #248]	; (800093c <etx_receive_chunk+0x170>)
 8000844:	f002 f859 	bl	80028fa <HAL_UART_Receive>
 8000848:	4603      	mov	r3, r0
 800084a:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800084c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d156      	bne.n	8000902 <etx_receive_chunk+0x136>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 8000854:	89bb      	ldrh	r3, [r7, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	813b      	strh	r3, [r7, #8]
    index += 2u;
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	3302      	adds	r3, #2
 8000862:	81bb      	strh	r3, [r7, #12]

    for( uint16_t i = 0u; i < data_len; i++ )
 8000864:	2300      	movs	r3, #0
 8000866:	817b      	strh	r3, [r7, #10]
 8000868:	e014      	b.n	8000894 <etx_receive_chunk+0xc8>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 800086a:	89bb      	ldrh	r3, [r7, #12]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	81ba      	strh	r2, [r7, #12]
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1899      	adds	r1, r3, r2
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	2201      	movs	r2, #1
 800087c:	482f      	ldr	r0, [pc, #188]	; (800093c <etx_receive_chunk+0x170>)
 800087e:	f002 f83c 	bl	80028fa <HAL_UART_Receive>
 8000882:	4603      	mov	r3, r0
 8000884:	81fb      	strh	r3, [r7, #14]
      if( ret != HAL_OK )
 8000886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d107      	bne.n	800089e <etx_receive_chunk+0xd2>
    for( uint16_t i = 0u; i < data_len; i++ )
 800088e:	897b      	ldrh	r3, [r7, #10]
 8000890:	3301      	adds	r3, #1
 8000892:	817b      	strh	r3, [r7, #10]
 8000894:	897a      	ldrh	r2, [r7, #10]
 8000896:	893b      	ldrh	r3, [r7, #8]
 8000898:	429a      	cmp	r2, r3
 800089a:	d3e6      	bcc.n	800086a <etx_receive_chunk+0x9e>
 800089c:	e000      	b.n	80008a0 <etx_receive_chunk+0xd4>
      {
        break;
 800089e:	bf00      	nop
      }
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	18d1      	adds	r1, r2, r3
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	2204      	movs	r2, #4
 80008ac:	4823      	ldr	r0, [pc, #140]	; (800093c <etx_receive_chunk+0x170>)
 80008ae:	f002 f824 	bl	80028fa <HAL_UART_Receive>
 80008b2:	4603      	mov	r3, r0
 80008b4:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d123      	bne.n	8000906 <etx_receive_chunk+0x13a>
    {
      break;
    }
    index += 4u;
 80008be:	89bb      	ldrh	r3, [r7, #12]
 80008c0:	3304      	adds	r3, #4
 80008c2:	81bb      	strh	r3, [r7, #12]

    //TODO: Add CRC verification

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80008c4:	89bb      	ldrh	r3, [r7, #12]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	18d1      	adds	r1, r2, r3
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	2201      	movs	r2, #1
 80008d0:	481a      	ldr	r0, [pc, #104]	; (800093c <etx_receive_chunk+0x170>)
 80008d2:	f002 f812 	bl	80028fa <HAL_UART_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d113      	bne.n	800090a <etx_receive_chunk+0x13e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 80008e2:	89bb      	ldrh	r3, [r7, #12]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	81ba      	strh	r2, [r7, #12]
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2bbb      	cmp	r3, #187	; 0xbb
 80008f2:	d00b      	beq.n	800090c <etx_receive_chunk+0x140>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	81fb      	strh	r3, [r7, #14]
      break;
 80008f8:	e008      	b.n	800090c <etx_receive_chunk+0x140>
      break;
 80008fa:	bf00      	nop
 80008fc:	e006      	b.n	800090c <etx_receive_chunk+0x140>
      break;
 80008fe:	bf00      	nop
 8000900:	e004      	b.n	800090c <etx_receive_chunk+0x140>
      break;
 8000902:	bf00      	nop
 8000904:	e002      	b.n	800090c <etx_receive_chunk+0x140>
      break;
 8000906:	bf00      	nop
 8000908:	e000      	b.n	800090c <etx_receive_chunk+0x140>
      break;
 800090a:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 800090c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <etx_receive_chunk+0x14c>
  {
    //clear the index if error
    index = 0u;
 8000914:	2300      	movs	r3, #0
 8000916:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 8000918:	887a      	ldrh	r2, [r7, #2]
 800091a:	89bb      	ldrh	r3, [r7, #12]
 800091c:	429a      	cmp	r2, r3
 800091e:	d207      	bcs.n	8000930 <etx_receive_chunk+0x164>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8000920:	887b      	ldrh	r3, [r7, #2]
 8000922:	89ba      	ldrh	r2, [r7, #12]
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <etx_receive_chunk+0x174>)
 8000928:	f002 fb9e 	bl	8003068 <iprintf>
                                                              max_len, index );
    index = 0u;
 800092c:	2300      	movs	r3, #0
 800092e:	81bb      	strh	r3, [r7, #12]
  }

  return index;
 8000930:	89bb      	ldrh	r3, [r7, #12]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200004a4 	.word	0x200004a4
 8000940:	0800414c 	.word	0x0800414c

08000944 <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 800094e:	23aa      	movs	r3, #170	; 0xaa
 8000950:	733b      	strb	r3, [r7, #12]
 8000952:	2303      	movs	r3, #3
 8000954:	737b      	strb	r3, [r7, #13]
 8000956:	2301      	movs	r3, #1
 8000958:	81fb      	strh	r3, [r7, #14]
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	743b      	strb	r3, [r7, #16]
 800095e:	2300      	movs	r3, #0
 8000960:	747b      	strb	r3, [r7, #17]
 8000962:	2300      	movs	r3, #0
 8000964:	74bb      	strb	r3, [r7, #18]
 8000966:	2300      	movs	r3, #0
 8000968:	74fb      	strb	r3, [r7, #19]
 800096a:	2300      	movs	r3, #0
 800096c:	753b      	strb	r3, [r7, #20]
 800096e:	23bb      	movs	r3, #187	; 0xbb
 8000970:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 8000972:	f107 010c 	add.w	r1, r7, #12
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	220a      	movs	r2, #10
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <etx_ota_send_resp+0x48>)
 800097e:	f001 ff2a 	bl	80027d6 <HAL_UART_Transmit>
}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200004a4 	.word	0x200004a4

08000990 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	807b      	strh	r3, [r7, #2]
 800099c:	4613      	mov	r3, r2
 800099e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 80009a0:	f000 fde2 	bl	8001568 <HAL_FLASH_Unlock>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 80009aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d15f      	bne.n	8000a72 <write_data_to_flash_app+0xe2>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 80009b2:	787b      	ldrb	r3, [r7, #1]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d019      	beq.n	80009ec <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 80009b8:	4833      	ldr	r0, [pc, #204]	; (8000a88 <write_data_to_flash_app+0xf8>)
 80009ba:	f002 fbdb 	bl	8003174 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80009c2:	2305      	movs	r3, #5
 80009c4:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80009ce:	f107 0208 	add.w	r2, r7, #8
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 ff27 	bl	800182c <HAL_FLASHEx_Erase>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if( ret != HAL_OK )
 80009e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d144      	bne.n	8000a76 <write_data_to_flash_app+0xe6>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
 80009f0:	e028      	b.n	8000a44 <write_data_to_flash_app+0xb4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <write_data_to_flash_app+0xfc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80009fa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[4+i]
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	3304      	adds	r3, #4
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	461c      	mov	r4, r3
 8000a10:	4615      	mov	r5, r2
 8000a12:	4622      	mov	r2, r4
 8000a14:	462b      	mov	r3, r5
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 fd52 	bl	80014c0 <HAL_FLASH_Program>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             );
      if( ret == HAL_OK )
 8000a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <write_data_to_flash_app+0xa6>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <write_data_to_flash_app+0xfc>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <write_data_to_flash_app+0xfc>)
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	e003      	b.n	8000a3e <write_data_to_flash_app+0xae>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <write_data_to_flash_app+0x100>)
 8000a38:	f002 fb9c 	bl	8003174 <puts>
        break;
 8000a3c:	e006      	b.n	8000a4c <write_data_to_flash_app+0xbc>
    for(int i = 0; i < data_len; i++ )
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	3301      	adds	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	6a3a      	ldr	r2, [r7, #32]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbd2      	blt.n	80009f2 <write_data_to_flash_app+0x62>
      }
    }
    printf("Flash Wrote %d byte \r\n", ota_fw_received_size);
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <write_data_to_flash_app+0xfc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <write_data_to_flash_app+0x104>)
 8000a54:	f002 fb08 	bl	8003068 <iprintf>
    if( ret != HAL_OK )
 8000a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10c      	bne.n	8000a7a <write_data_to_flash_app+0xea>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000a60:	f000 fda4 	bl	80015ac <HAL_FLASH_Lock>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	e004      	b.n	8000a7c <write_data_to_flash_app+0xec>
      break;
 8000a72:	bf00      	nop
 8000a74:	e002      	b.n	8000a7c <write_data_to_flash_app+0xec>
        break;
 8000a76:	bf00      	nop
 8000a78:	e000      	b.n	8000a7c <write_data_to_flash_app+0xec>
      break;
 8000a7a:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bdb0      	pop	{r4, r5, r7, pc}
 8000a88:	08004190 	.word	0x08004190
 8000a8c:	200004a0 	.word	0x200004a0
 8000a90:	080041b0 	.word	0x080041b0
 8000a94:	080041c4 	.word	0x080041c4

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 fb9d 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f857 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 f913 	bl	8000cd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aaa:	f000 f8bd 	bl	8000c28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000aae:	f000 f8e5 	bl	8000c7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Turn ON the Green Led to tell the user that Bootloader is running
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET );    //Green LED ON
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab8:	481f      	ldr	r0, [pc, #124]	; (8000b38 <main+0xa0>)
 8000aba:	f001 f98d 	bl	8001dd8 <HAL_GPIO_WritePin>
  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <main+0xa4>)
 8000ac6:	f002 facf 	bl	8003068 <iprintf>
  //HAL_Delay(2000);   //2sec delay for nothing

  /* Check the GPIO for 3 seconds */
  GPIO_PinState OTA_Pin_state;
  uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8000aca:	f000 fbed 	bl	80012a8 <HAL_GetTick>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000ad4:	60fb      	str	r3, [r7, #12]
  printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8000ad6:	481a      	ldr	r0, [pc, #104]	; (8000b40 <main+0xa8>)
 8000ad8:	f002 fb4c 	bl	8003174 <puts>
    do
    {
      OTA_Pin_state = HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_0 );
 8000adc:	2101      	movs	r1, #1
 8000ade:	4819      	ldr	r0, [pc, #100]	; (8000b44 <main+0xac>)
 8000ae0:	f001 f962 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	72fb      	strb	r3, [r7, #11]
      uint32_t current_tick = HAL_GetTick();
 8000ae8:	f000 fbde 	bl	80012a8 <HAL_GetTick>
 8000aec:	6078      	str	r0, [r7, #4]

      /* Check the button is pressed or not for 3seconds */
      if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <main+0x66>
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d800      	bhi.n	8000afe <main+0x66>
    {
 8000afc:	e7ee      	b.n	8000adc <main+0x44>
        break;
      }
    }while( 1 );

    /*Start the Firmware or Application update */
    if( OTA_Pin_state == GPIO_PIN_SET )
 8000afe:	7afb      	ldrb	r3, [r7, #11]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d116      	bne.n	8000b32 <main+0x9a>
    {
      printf("Starting Firmware Download!!!\r\n");
 8000b04:	4810      	ldr	r0, [pc, #64]	; (8000b48 <main+0xb0>)
 8000b06:	f002 fb35 	bl	8003174 <puts>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET );    //Green LED ON
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <main+0xa0>)
 8000b12:	f001 f961 	bl	8001dd8 <HAL_GPIO_WritePin>
      /* OTA Request. Receive the data from the UART4 and flash */
      if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8000b16:	f7ff fd2d 	bl	8000574 <etx_ota_download_and_flash>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <main+0x90>
      {
        /* Error. Don't process. */
        printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <main+0xb4>)
 8000b22:	f002 fb27 	bl	8003174 <puts>
        while( 1 );
 8000b26:	e7fe      	b.n	8000b26 <main+0x8e>
      }
      else
      {
        /* Reset to load the new application */
        printf("Firmware update is done!!! Rebooting...\r\n");
 8000b28:	4809      	ldr	r0, [pc, #36]	; (8000b50 <main+0xb8>)
 8000b2a:	f002 fb23 	bl	8003174 <puts>
        HAL_NVIC_SystemReset();
 8000b2e:	f000 fcb6 	bl	800149e <HAL_NVIC_SystemReset>
      }
    }

    // Jump to application
    goto_application();
 8000b32:	f000 f961 	bl	8000df8 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <main+0x9e>
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	080041dc 	.word	0x080041dc
 8000b40:	080041fc 	.word	0x080041fc
 8000b44:	40020000 	.word	0x40020000
 8000b48:	08004234 	.word	0x08004234
 8000b4c:	08004254 	.word	0x08004254
 8000b50:	08004274 	.word	0x08004274

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	; 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fa78 	bl	8003058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <SystemClock_Config+0xcc>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <SystemClock_Config+0xd0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <SystemClock_Config+0xd0>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <SystemClock_Config+0xd0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f916 	bl	8001e0c <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000be6:	f000 f921 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2105      	movs	r1, #5
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fb77 	bl	80022fc <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c14:	f000 f90a 	bl	8000e2c <Error_Handler>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3750      	adds	r7, #80	; 0x50
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40007000 	.word	0x40007000

08000c28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_USART2_UART_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART2_UART_Init+0x4c>)
 8000c60:	f001 fd6c 	bl	800273c <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c6a:	f000 f8df 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200004a4 	.word	0x200004a4
 8000c78:	40004400 	.word	0x40004400

08000c7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART3_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART3_UART_Init+0x4c>)
 8000cb4:	f001 fd42 	bl	800273c <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f000 f8b5 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200004e8 	.word	0x200004e8
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a35      	ldr	r2, [pc, #212]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a20      	ldr	r2, [pc, #128]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_GPIO_Init+0xf4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d72:	2301      	movs	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d86:	f000 fe73 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <MX_GPIO_Init+0xfc>)
 8000d9e:	f000 fe67 	bl	8001a70 <HAL_GPIO_Init>
  /*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_GPIO_Init+0x100>)
 8000db8:	f000 fe5a 	bl	8001a70 <HAL_GPIO_Init>

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ddc:	1d39      	adds	r1, r7, #4
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	2201      	movs	r2, #1
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <__io_putchar+0x20>)
 8000de6:	f001 fcf6 	bl	80027d6 <HAL_UART_Transmit>

  return ch;
 8000dea:	687b      	ldr	r3, [r7, #4]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200004e8 	.word	0x200004e8

08000df8 <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\r\n");
 8000dfe:	4808      	ldr	r0, [pc, #32]	; (8000e20 <goto_application+0x28>)
 8000e00:	f002 f9b8 	bl	8003174 <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08040000 + 4U)));
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <goto_application+0x2c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) 0x08040000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <goto_application+0x30>)
 8000e10:	f000 ffe2 	bl	8001dd8 <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4798      	blx	r3
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	080042a0 	.word	0x080042a0
 8000e24:	08040004 	.word	0x08040004
 8000e28:	40020400 	.word	0x40020400

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e76:	2007      	movs	r0, #7
 8000e78:	f000 faea 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a42      	ldr	r2, [pc, #264]	; (8000fb0 <HAL_UART_MspInit+0x128>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12c      	bne.n	8000f04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a40      	ldr	r2, [pc, #256]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a39      	ldr	r2, [pc, #228]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <HAL_UART_MspInit+0x130>)
 8000efe:	f000 fdb7 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f02:	e050      	b.n	8000fa6 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2c      	ldr	r2, [pc, #176]	; (8000fbc <HAL_UART_MspInit+0x134>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d14b      	bne.n	8000fa6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a20      	ldr	r2, [pc, #128]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x12c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <HAL_UART_MspInit+0x138>)
 8000f80:	f000 fd76 	bl	8001a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f96:	2307      	movs	r3, #7
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <HAL_UART_MspInit+0x13c>)
 8000fa2:	f000 fd65 	bl	8001a70 <HAL_GPIO_Init>
}
 8000fa6:	bf00      	nop
 8000fa8:	3730      	adds	r7, #48	; 0x30
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40020c00 	.word	0x40020c00

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 f934 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e00a      	b.n	8001044 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800102e:	f3af 8000 	nop.w
 8001032:	4601      	mov	r1, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf0      	blt.n	800102e <_read+0x12>
	}

return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e009      	b.n	800107c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff feaf 	bl	8000dd4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf1      	blt.n	8001068 <_write+0x12>
	}
	return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b6:	605a      	str	r2, [r3, #4]
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_isatty>:

int _isatty(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f001 ff6c 	bl	8003004 <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20020000 	.word	0x20020000
 8001158:	00000400 	.word	0x00000400
 800115c:	2000052c 	.word	0x2000052c
 8001160:	20000568 	.word	0x20000568

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b2:	f7ff ffd7 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f001 ff2b 	bl	8003010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fc6d 	bl	8000a98 <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011cc:	0800437c 	.word	0x0800437c
  ldr r2, =_sbss
 80011d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011d4:	20000564 	.word	0x20000564

080011d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_Init+0x40>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_Init+0x40>)
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x40>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f923 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fe12 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f931 	bl	80014a6 <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f903 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000530 	.word	0x20000530

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000530 	.word	0x20000530

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013e4:	f3bf 8f4f 	dsb	sy
}
 80013e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <__NVIC_SystemReset+0x24>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013f2:	4904      	ldr	r1, [pc, #16]	; (8001404 <__NVIC_SystemReset+0x24>)
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_SystemReset+0x28>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy
}
 80013fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <__NVIC_SystemReset+0x20>
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	05fa0004 	.word	0x05fa0004

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff78 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff46 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff78 	bl	8001378 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff47 	bl	8001324 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80014a2:	f7ff ff9d 	bl	80013e0 <__NVIC_SystemReset>

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffac 	bl	800140c <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_FLASH_Program+0xa0>)
 80014d4:	7e1b      	ldrb	r3, [r3, #24]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_FLASH_Program+0x1e>
 80014da:	2302      	movs	r3, #2
 80014dc:	e03b      	b.n	8001556 <HAL_FLASH_Program+0x96>
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_FLASH_Program+0xa0>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e8:	f000 f870 	bl	80015cc <FLASH_WaitForLastOperation>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d12b      	bne.n	800154e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d105      	bne.n	8001508 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80014fc:	783b      	ldrb	r3, [r7, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f000 f91b 	bl	800173c <FLASH_Program_Byte>
 8001506:	e016      	b.n	8001536 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d105      	bne.n	800151a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800150e:	883b      	ldrh	r3, [r7, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	68b8      	ldr	r0, [r7, #8]
 8001514:	f000 f8ee 	bl	80016f4 <FLASH_Program_HalfWord>
 8001518:	e00d      	b.n	8001536 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d105      	bne.n	800152c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	f000 f8c3 	bl	80016b0 <FLASH_Program_Word>
 800152a:	e004      	b.n	8001536 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800152c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f000 f88b 	bl	800164c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001536:	f24c 3050 	movw	r0, #50000	; 0xc350
 800153a:	f000 f847 	bl	80015cc <FLASH_WaitForLastOperation>
 800153e:	4603      	mov	r3, r0
 8001540:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_FLASH_Program+0xa4>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_FLASH_Program+0xa4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_FLASH_Program+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000534 	.word	0x20000534
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_FLASH_Unlock+0x38>)
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b00      	cmp	r3, #0
 8001578:	da0b      	bge.n	8001592 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_FLASH_Unlock+0x38>)
 800157c:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <HAL_FLASH_Unlock+0x3c>)
 800157e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_FLASH_Unlock+0x38>)
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_FLASH_Unlock+0x40>)
 8001584:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_FLASH_Unlock+0x38>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da01      	bge.n	8001592 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001592:	79fb      	ldrb	r3, [r7, #7]
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40023c00 	.word	0x40023c00
 80015a4:	45670123 	.word	0x45670123
 80015a8:	cdef89ab 	.word	0xcdef89ab

080015ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_FLASH_Lock+0x1c>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_FLASH_Lock+0x1c>)
 80015b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40023c00 	.word	0x40023c00

080015cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <FLASH_WaitForLastOperation+0x78>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80015de:	f7ff fe63 	bl	80012a8 <HAL_GetTick>
 80015e2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80015e4:	e010      	b.n	8001608 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d00c      	beq.n	8001608 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <FLASH_WaitForLastOperation+0x38>
 80015f4:	f7ff fe58 	bl	80012a8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	d201      	bcs.n	8001608 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e019      	b.n	800163c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <FLASH_WaitForLastOperation+0x7c>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1e8      	bne.n	80015e6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <FLASH_WaitForLastOperation+0x7c>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <FLASH_WaitForLastOperation+0x7c>)
 8001622:	2201      	movs	r2, #1
 8001624:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <FLASH_WaitForLastOperation+0x7c>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001632:	f000 f8a5 	bl	8001780 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
  
}  
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000534 	.word	0x20000534
 8001648:	40023c00 	.word	0x40023c00

0800164c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <FLASH_Program_DoubleWord+0x60>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <FLASH_Program_DoubleWord+0x60>)
 800165e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <FLASH_Program_DoubleWord+0x60>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <FLASH_Program_DoubleWord+0x60>)
 800166a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800166e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <FLASH_Program_DoubleWord+0x60>)
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <FLASH_Program_DoubleWord+0x60>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001682:	f3bf 8f6f 	isb	sy
}
 8001686:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	000a      	movs	r2, r1
 8001696:	2300      	movs	r3, #0
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	3104      	adds	r1, #4
 800169c:	4613      	mov	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <FLASH_Program_Word+0x40>)
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <FLASH_Program_Word+0x40>)
 80016c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <FLASH_Program_Word+0x40>)
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <FLASH_Program_Word+0x40>)
 80016cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <FLASH_Program_Word+0x40>)
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <FLASH_Program_Word+0x40>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <FLASH_Program_HalfWord+0x44>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <FLASH_Program_HalfWord+0x44>)
 8001706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800170a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <FLASH_Program_HalfWord+0x44>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	4a09      	ldr	r2, [pc, #36]	; (8001738 <FLASH_Program_HalfWord+0x44>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <FLASH_Program_HalfWord+0x44>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <FLASH_Program_HalfWord+0x44>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	801a      	strh	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00

0800173c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <FLASH_Program_Byte+0x40>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <FLASH_Program_Byte+0x40>)
 800174e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001752:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <FLASH_Program_Byte+0x40>)
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <FLASH_Program_Byte+0x40>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <FLASH_Program_Byte+0x40>)
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <FLASH_Program_Byte+0x40>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	701a      	strb	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 800179a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 800179e:	2210      	movs	r2, #16
 80017a0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 80017b8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 80017bc:	2220      	movs	r2, #32
 80017be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 80017d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 80017f4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <FLASH_SetErrorCode+0xa8>)
 8001812:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <FLASH_SetErrorCode+0xa4>)
 8001816:	2202      	movs	r2, #2
 8001818:	60da      	str	r2, [r3, #12]
  }
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40023c00 	.word	0x40023c00
 8001828:	20000534 	.word	0x20000534

0800182c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_FLASHEx_Erase+0xd8>)
 8001840:	7e1b      	ldrb	r3, [r3, #24]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_FLASHEx_Erase+0x1e>
 8001846:	2302      	movs	r3, #2
 8001848:	e058      	b.n	80018fc <HAL_FLASHEx_Erase+0xd0>
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <HAL_FLASHEx_Erase+0xd8>)
 800184c:	2201      	movs	r2, #1
 800184e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001850:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001854:	f7ff feba 	bl	80015cc <FLASH_WaitForLastOperation>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d148      	bne.n	80018f4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d115      	bne.n	800189e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f000 f844 	bl	800190c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001884:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001888:	f7ff fea0 	bl	80015cc <FLASH_WaitForLastOperation>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_FLASHEx_Erase+0xdc>)
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_FLASHEx_Erase+0xdc>)
 8001896:	f023 0304 	bic.w	r3, r3, #4
 800189a:	6113      	str	r3, [r2, #16]
 800189c:	e028      	b.n	80018f0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	e01c      	b.n	80018e0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	f000 f850 	bl	8001954 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018b8:	f7ff fe88 	bl	80015cc <FLASH_WaitForLastOperation>
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_FLASHEx_Erase+0xdc>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_FLASHEx_Erase+0xdc>)
 80018c6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80018ca:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	601a      	str	r2, [r3, #0]
          break;
 80018d8:	e00a      	b.n	80018f0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3301      	adds	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4413      	add	r3, r2
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3da      	bcc.n	80018a6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80018f0:	f000 f878 	bl	80019e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_FLASHEx_Erase+0xd8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	761a      	strb	r2, [r3, #24]

  return status;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000534 	.word	0x20000534
 8001908:	40023c00 	.word	0x40023c00

0800190c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <FLASH_MassErase+0x44>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <FLASH_MassErase+0x44>)
 800191e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001922:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <FLASH_MassErase+0x44>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4a09      	ldr	r2, [pc, #36]	; (8001950 <FLASH_MassErase+0x44>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <FLASH_MassErase+0x44>)
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4313      	orrs	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <FLASH_MassErase+0x44>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6113      	str	r3, [r2, #16]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e010      	b.n	8001992 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d103      	bne.n	800197e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e009      	b.n	8001992 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d103      	bne.n	800198c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e002      	b.n	8001992 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800198c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001990:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 8001998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800199c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	490f      	ldr	r1, [pc, #60]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 80019b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4313      	orrs	r3, r2
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <FLASH_Erase_Sector+0x8c>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	6113      	str	r3, [r2, #16]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40023c00 	.word	0x40023c00

080019e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <FLASH_FlushCaches+0x88>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d017      	beq.n	8001a24 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <FLASH_FlushCaches+0x88>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <FLASH_FlushCaches+0x88>)
 80019fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019fe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a16:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a22:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d017      	beq.n	8001a60 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <FLASH_FlushCaches+0x88>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
  }
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e16b      	b.n	8001d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 815a 	bne.w	8001d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80b4 	beq.w	8001d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a5b      	ldr	r2, [pc, #364]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_GPIO_Init+0x314>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_GPIO_Init+0x318>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x31c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4e      	ldr	r2, [pc, #312]	; (8001d94 <HAL_GPIO_Init+0x324>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae90 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e267      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d075      	beq.n	8001f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d00c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b85      	ldr	r3, [pc, #532]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d112      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4b82      	ldr	r3, [pc, #520]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b7e      	ldr	r3, [pc, #504]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d157      	bne.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e242      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x74>
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a75      	ldr	r2, [pc, #468]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x98>
 8001e8a:	4b70      	ldr	r3, [pc, #448]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b6d      	ldr	r3, [pc, #436]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6c      	ldr	r2, [pc, #432]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001ea4:	4b69      	ldr	r3, [pc, #420]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a68      	ldr	r2, [pc, #416]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a65      	ldr	r2, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f9f0 	bl	80012a8 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f9ec 	bl	80012a8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e207      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b5b      	ldr	r3, [pc, #364]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff f9dc 	bl	80012a8 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f9d8 	bl	80012a8 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1f3      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	4b51      	ldr	r3, [pc, #324]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	4b4a      	ldr	r3, [pc, #296]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1c7      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4937      	ldr	r1, [pc, #220]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_RCC_OscConfig+0x244>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f991 	bl	80012a8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f98d 	bl	80012a8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1a8      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4925      	ldr	r1, [pc, #148]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_OscConfig+0x244>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f970 	bl	80012a8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f96c 	bl	80012a8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e187      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d036      	beq.n	8002064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_RCC_OscConfig+0x248>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f950 	bl	80012a8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff f94c 	bl	80012a8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e167      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_OscConfig+0x240>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x200>
 800202a:	e01b      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_OscConfig+0x248>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff f939 	bl	80012a8 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e00e      	b.n	8002058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203a:	f7ff f935 	bl	80012a8 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d907      	bls.n	8002058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e150      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
 800204c:	40023800 	.word	0x40023800
 8002050:	42470000 	.word	0x42470000
 8002054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b88      	ldr	r3, [pc, #544]	; (800227c <HAL_RCC_OscConfig+0x470>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ea      	bne.n	800203a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8097 	beq.w	80021a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b81      	ldr	r3, [pc, #516]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b7d      	ldr	r3, [pc, #500]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a7c      	ldr	r2, [pc, #496]	; (800227c <HAL_RCC_OscConfig+0x470>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b7a      	ldr	r3, [pc, #488]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b77      	ldr	r3, [pc, #476]	; (8002280 <HAL_RCC_OscConfig+0x474>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b74      	ldr	r3, [pc, #464]	; (8002280 <HAL_RCC_OscConfig+0x474>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a73      	ldr	r2, [pc, #460]	; (8002280 <HAL_RCC_OscConfig+0x474>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f8f5 	bl	80012a8 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7ff f8f1 	bl	80012a8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e10c      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x474>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2ea>
 80020e8:	4b64      	ldr	r3, [pc, #400]	; (800227c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	4a63      	ldr	r2, [pc, #396]	; (800227c <HAL_RCC_OscConfig+0x470>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6713      	str	r3, [r2, #112]	; 0x70
 80020f4:	e01c      	b.n	8002130 <HAL_RCC_OscConfig+0x324>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x30c>
 80020fe:	4b5f      	ldr	r3, [pc, #380]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a5e      	ldr	r2, [pc, #376]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
 800210a:	4b5c      	ldr	r3, [pc, #368]	; (800227c <HAL_RCC_OscConfig+0x470>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	4a5b      	ldr	r2, [pc, #364]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	; 0x70
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0x324>
 8002118:	4b58      	ldr	r3, [pc, #352]	; (800227c <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a57      	ldr	r2, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
 8002124:	4b55      	ldr	r3, [pc, #340]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a54      	ldr	r2, [pc, #336]	; (800227c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 0304 	bic.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7ff f8b6 	bl	80012a8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7ff f8b2 	bl	80012a8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0cb      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	4b49      	ldr	r3, [pc, #292]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ee      	beq.n	8002140 <HAL_RCC_OscConfig+0x334>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7ff f8a0 	bl	80012a8 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7ff f89c 	bl	80012a8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0b5      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ee      	bne.n	800216c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002194:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	4a38      	ldr	r2, [pc, #224]	; (800227c <HAL_RCC_OscConfig+0x470>)
 800219a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a1 	beq.w	80022ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021aa:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_OscConfig+0x470>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d05c      	beq.n	8002270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d141      	bne.n	8002242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCC_OscConfig+0x478>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f870 	bl	80012a8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021cc:	f7ff f86c 	bl	80012a8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e087      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x470>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	491b      	ldr	r1, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x478>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff f845 	bl	80012a8 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f841 	bl	80012a8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e05c      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x416>
 8002240:	e054      	b.n	80022ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_OscConfig+0x478>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff f82e 	bl	80012a8 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff f82a 	bl	80012a8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e045      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_OscConfig+0x470>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x444>
 800226e:	e03d      	b.n	80022ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e038      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x4ec>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d028      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d121      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d11a      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d111      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0cc      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d90c      	bls.n	8002338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002350:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800235a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	494d      	ldr	r1, [pc, #308]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d044      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d119      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e067      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4934      	ldr	r1, [pc, #208]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe ff5c 	bl	80012a8 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe ff58 	bl	80012a8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e04f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d20c      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e032      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4916      	ldr	r1, [pc, #88]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490e      	ldr	r1, [pc, #56]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002482:	f000 f821 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490a      	ldr	r1, [pc, #40]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe febc 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023c00 	.word	0x40023c00
 80024b8:	40023800 	.word	0x40023800
 80024bc:	080042bc 	.word	0x080042bc
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024cc:	b094      	sub	sp, #80	; 0x50
 80024ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	647b      	str	r3, [r7, #68]	; 0x44
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d8:	2300      	movs	r3, #0
 80024da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e0:	4b79      	ldr	r3, [pc, #484]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d00d      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x40>
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	f200 80e1 	bhi.w	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x34>
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fa:	e0db      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b73      	ldr	r3, [pc, #460]	; (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80024fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002500:	e0db      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002502:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002506:	e0d8      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002510:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002512:	4b6d      	ldr	r3, [pc, #436]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	2200      	movs	r2, #0
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38
 8002528:	63fa      	str	r2, [r7, #60]	; 0x3c
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
 8002536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800253a:	4622      	mov	r2, r4
 800253c:	462b      	mov	r3, r5
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4621      	mov	r1, r4
 8002554:	1a51      	subs	r1, r2, r1
 8002556:	6139      	str	r1, [r7, #16]
 8002558:	4629      	mov	r1, r5
 800255a:	eb63 0301 	sbc.w	r3, r3, r1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800256c:	4659      	mov	r1, fp
 800256e:	018b      	lsls	r3, r1, #6
 8002570:	4651      	mov	r1, sl
 8002572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002576:	4651      	mov	r1, sl
 8002578:	018a      	lsls	r2, r1, #6
 800257a:	4651      	mov	r1, sl
 800257c:	ebb2 0801 	subs.w	r8, r2, r1
 8002580:	4659      	mov	r1, fp
 8002582:	eb63 0901 	sbc.w	r9, r3, r1
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259a:	4690      	mov	r8, r2
 800259c:	4699      	mov	r9, r3
 800259e:	4623      	mov	r3, r4
 80025a0:	eb18 0303 	adds.w	r3, r8, r3
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	462b      	mov	r3, r5
 80025a8:	eb49 0303 	adc.w	r3, r9, r3
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ba:	4629      	mov	r1, r5
 80025bc:	024b      	lsls	r3, r1, #9
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c4:	4621      	mov	r1, r4
 80025c6:	024a      	lsls	r2, r1, #9
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d8:	f7fd fe4a 	bl	8000270 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e4:	e058      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	2200      	movs	r2, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	4611      	mov	r1, r2
 80025f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002600:	4642      	mov	r2, r8
 8002602:	464b      	mov	r3, r9
 8002604:	f04f 0000 	mov.w	r0, #0
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	0159      	lsls	r1, r3, #5
 800260e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002612:	0150      	lsls	r0, r2, #5
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4641      	mov	r1, r8
 800261a:	ebb2 0a01 	subs.w	sl, r2, r1
 800261e:	4649      	mov	r1, r9
 8002620:	eb63 0b01 	sbc.w	fp, r3, r1
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002638:	ebb2 040a 	subs.w	r4, r2, sl
 800263c:	eb63 050b 	sbc.w	r5, r3, fp
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	00eb      	lsls	r3, r5, #3
 800264a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264e:	00e2      	lsls	r2, r4, #3
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	4643      	mov	r3, r8
 8002656:	18e3      	adds	r3, r4, r3
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	464b      	mov	r3, r9
 800265c:	eb45 0303 	adc.w	r3, r5, r3
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266e:	4629      	mov	r1, r5
 8002670:	028b      	lsls	r3, r1, #10
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002678:	4621      	mov	r1, r4
 800267a:	028a      	lsls	r2, r1, #10
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	61fa      	str	r2, [r7, #28]
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268c:	f7fd fdf0 	bl	8000270 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	3301      	adds	r3, #1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b2:	e002      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3750      	adds	r7, #80	; 0x50
 80026c0:	46bd      	mov	sp, r7
 80026c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	007a1200 	.word	0x007a1200

080026d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff0 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0a9b      	lsrs	r3, r3, #10
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	080042cc 	.word	0x080042cc

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002718:	f7ff ffdc 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0b5b      	lsrs	r3, r3, #13
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	080042cc 	.word	0x080042cc

0800273c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e03f      	b.n	80027ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fb90 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f9cb 	bl	8002b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b08a      	sub	sp, #40	; 0x28
 80027da:	af02      	add	r7, sp, #8
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d17c      	bne.n	80028f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_UART_Transmit+0x2c>
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e075      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x3e>
 8002810:	2302      	movs	r3, #2
 8002812:	e06e      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fe fd3d 	bl	80012a8 <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x82>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002868:	e02a      	b.n	80028c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f8e2 	bl	8002a3e <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e036      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3302      	adds	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e007      	b.n	80028b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cf      	bne.n	800286a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f8b2 	bl	8002a3e <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b08a      	sub	sp, #40	; 0x28
 80028fe:	af02      	add	r7, sp, #8
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	f040 808c 	bne.w	8002a34 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Receive+0x2e>
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e084      	b.n	8002a36 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_UART_Receive+0x40>
 8002936:	2302      	movs	r3, #2
 8002938:	e07d      	b.n	8002a36 <HAL_UART_Receive+0x13c>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2222      	movs	r2, #34	; 0x22
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002956:	f7fe fca7 	bl	80012a8 <HAL_GetTick>
 800295a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	d108      	bne.n	8002984 <HAL_UART_Receive+0x8a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d104      	bne.n	8002984 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	e003      	b.n	800298c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002994:	e043      	b.n	8002a1e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	2120      	movs	r1, #32
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f84c 	bl	8002a3e <UART_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e042      	b.n	8002a36 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	3302      	adds	r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e01f      	b.n	8002a10 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d8:	d007      	beq.n	80029ea <HAL_UART_Receive+0xf0>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <HAL_UART_Receive+0xfe>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e008      	b.n	8002a0a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1b6      	bne.n	8002996 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b090      	sub	sp, #64	; 0x40
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4e:	e050      	b.n	8002af2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d04c      	beq.n	8002af2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a5e:	f7fe fc23 	bl	80012a8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d241      	bcs.n	8002af2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e5      	bne.n	8002a6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac2:	623a      	str	r2, [r7, #32]
 8002ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	69f9      	ldr	r1, [r7, #28]
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e5      	bne.n	8002aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e00f      	b.n	8002b12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d09f      	beq.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3740      	adds	r7, #64	; 0x40
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b20:	b0c0      	sub	sp, #256	; 0x100
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b38:	68d9      	ldr	r1, [r3, #12]
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	ea40 0301 	orr.w	r3, r0, r1
 8002b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b74:	f021 010c 	bic.w	r1, r1, #12
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b82:	430b      	orrs	r3, r1
 8002b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	6999      	ldr	r1, [r3, #24]
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	ea40 0301 	orr.w	r3, r0, r1
 8002ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b8f      	ldr	r3, [pc, #572]	; (8002de8 <UART_SetConfig+0x2cc>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d005      	beq.n	8002bbc <UART_SetConfig+0xa0>
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b8d      	ldr	r3, [pc, #564]	; (8002dec <UART_SetConfig+0x2d0>)
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d104      	bne.n	8002bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7ff fdaa 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bc4:	e003      	b.n	8002bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc6:	f7ff fd91 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8002bca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd8:	f040 810c 	bne.w	8002df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002be6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bee:	4622      	mov	r2, r4
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	1891      	adds	r1, r2, r2
 8002bf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bf6:	415b      	adcs	r3, r3
 8002bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bfe:	4621      	mov	r1, r4
 8002c00:	eb12 0801 	adds.w	r8, r2, r1
 8002c04:	4629      	mov	r1, r5
 8002c06:	eb43 0901 	adc.w	r9, r3, r1
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c1e:	4690      	mov	r8, r2
 8002c20:	4699      	mov	r9, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	eb18 0303 	adds.w	r3, r8, r3
 8002c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c2c:	462b      	mov	r3, r5
 8002c2e:	eb49 0303 	adc.w	r3, r9, r3
 8002c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	18db      	adds	r3, r3, r3
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c50:	4613      	mov	r3, r2
 8002c52:	eb42 0303 	adc.w	r3, r2, r3
 8002c56:	657b      	str	r3, [r7, #84]	; 0x54
 8002c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c60:	f7fd fb06 	bl	8000270 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	011c      	lsls	r4, r3, #4
 8002c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	1891      	adds	r1, r2, r2
 8002c8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c94:	4641      	mov	r1, r8
 8002c96:	eb12 0a01 	adds.w	sl, r2, r1
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cb4:	4692      	mov	sl, r2
 8002cb6:	469b      	mov	fp, r3
 8002cb8:	4643      	mov	r3, r8
 8002cba:	eb1a 0303 	adds.w	r3, sl, r3
 8002cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	18db      	adds	r3, r3, r3
 8002ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	eb42 0303 	adc.w	r3, r2, r3
 8002cec:	647b      	str	r3, [r7, #68]	; 0x44
 8002cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cf6:	f7fd fabb 	bl	8000270 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002d02:	fba3 2301 	umull	r2, r3, r3, r1
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2264      	movs	r2, #100	; 0x64
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	1acb      	subs	r3, r1, r3
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d16:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002d18:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d24:	441c      	add	r4, r3
 8002d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d38:	4642      	mov	r2, r8
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	1891      	adds	r1, r2, r2
 8002d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d40:	415b      	adcs	r3, r3
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d48:	4641      	mov	r1, r8
 8002d4a:	1851      	adds	r1, r2, r1
 8002d4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d4e:	4649      	mov	r1, r9
 8002d50:	414b      	adcs	r3, r1
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d60:	4659      	mov	r1, fp
 8002d62:	00cb      	lsls	r3, r1, #3
 8002d64:	4651      	mov	r1, sl
 8002d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	00ca      	lsls	r2, r1, #3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	4642      	mov	r2, r8
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	460a      	mov	r2, r1
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	18db      	adds	r3, r3, r3
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da2:	4613      	mov	r3, r2
 8002da4:	eb42 0303 	adc.w	r3, r2, r3
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002db2:	f7fd fa5d 	bl	8000270 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	2164      	movs	r1, #100	; 0x64
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	3332      	adds	r3, #50	; 0x32
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <UART_SetConfig+0x2d4>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	f003 0207 	and.w	r2, r3, #7
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4422      	add	r2, r4
 8002de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002de4:	e105      	b.n	8002ff2 <UART_SetConfig+0x4d6>
 8002de6:	bf00      	nop
 8002de8:	40011000 	.word	0x40011000
 8002dec:	40011400 	.word	0x40011400
 8002df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e06:	4642      	mov	r2, r8
 8002e08:	464b      	mov	r3, r9
 8002e0a:	1891      	adds	r1, r2, r2
 8002e0c:	6239      	str	r1, [r7, #32]
 8002e0e:	415b      	adcs	r3, r3
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e16:	4641      	mov	r1, r8
 8002e18:	1854      	adds	r4, r2, r1
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	eb43 0501 	adc.w	r5, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	00eb      	lsls	r3, r5, #3
 8002e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2e:	00e2      	lsls	r2, r4, #3
 8002e30:	4614      	mov	r4, r2
 8002e32:	461d      	mov	r5, r3
 8002e34:	4643      	mov	r3, r8
 8002e36:	18e3      	adds	r3, r4, r3
 8002e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	eb45 0303 	adc.w	r3, r5, r3
 8002e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e62:	4629      	mov	r1, r5
 8002e64:	008b      	lsls	r3, r1, #2
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	008a      	lsls	r2, r1, #2
 8002e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e74:	f7fd f9fc 	bl	8000270 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4b60      	ldr	r3, [pc, #384]	; (8003000 <UART_SetConfig+0x4e4>)
 8002e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	011c      	lsls	r4, r3, #4
 8002e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e98:	4642      	mov	r2, r8
 8002e9a:	464b      	mov	r3, r9
 8002e9c:	1891      	adds	r1, r2, r2
 8002e9e:	61b9      	str	r1, [r7, #24]
 8002ea0:	415b      	adcs	r3, r3
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	1851      	adds	r1, r2, r1
 8002eac:	6139      	str	r1, [r7, #16]
 8002eae:	4649      	mov	r1, r9
 8002eb0:	414b      	adcs	r3, r1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	00cb      	lsls	r3, r1, #3
 8002ec4:	4651      	mov	r1, sl
 8002ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eca:	4651      	mov	r1, sl
 8002ecc:	00ca      	lsls	r2, r1, #3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	189b      	adds	r3, r3, r2
 8002ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002edc:	464b      	mov	r3, r9
 8002ede:	460a      	mov	r2, r1
 8002ee0:	eb42 0303 	adc.w	r3, r2, r3
 8002ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f00:	4649      	mov	r1, r9
 8002f02:	008b      	lsls	r3, r1, #2
 8002f04:	4641      	mov	r1, r8
 8002f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	008a      	lsls	r2, r1, #2
 8002f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f12:	f7fd f9ad 	bl	8000270 <__aeabi_uldivmod>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4b39      	ldr	r3, [pc, #228]	; (8003000 <UART_SetConfig+0x4e4>)
 8002f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	2164      	movs	r1, #100	; 0x64
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	3332      	adds	r3, #50	; 0x32
 8002f2e:	4a34      	ldr	r2, [pc, #208]	; (8003000 <UART_SetConfig+0x4e4>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3a:	441c      	add	r4, r3
 8002f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f40:	2200      	movs	r2, #0
 8002f42:	673b      	str	r3, [r7, #112]	; 0x70
 8002f44:	677a      	str	r2, [r7, #116]	; 0x74
 8002f46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f4a:	4642      	mov	r2, r8
 8002f4c:	464b      	mov	r3, r9
 8002f4e:	1891      	adds	r1, r2, r2
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	415b      	adcs	r3, r3
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	1851      	adds	r1, r2, r1
 8002f5e:	6039      	str	r1, [r7, #0]
 8002f60:	4649      	mov	r1, r9
 8002f62:	414b      	adcs	r3, r1
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f72:	4659      	mov	r1, fp
 8002f74:	00cb      	lsls	r3, r1, #3
 8002f76:	4651      	mov	r1, sl
 8002f78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7c:	4651      	mov	r1, sl
 8002f7e:	00ca      	lsls	r2, r1, #3
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	4603      	mov	r3, r0
 8002f86:	4642      	mov	r2, r8
 8002f88:	189b      	adds	r3, r3, r2
 8002f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f8c:	464b      	mov	r3, r9
 8002f8e:	460a      	mov	r2, r1
 8002f90:	eb42 0303 	adc.w	r3, r2, r3
 8002f94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa0:	667a      	str	r2, [r7, #100]	; 0x64
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fae:	4649      	mov	r1, r9
 8002fb0:	008b      	lsls	r3, r1, #2
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb8:	4641      	mov	r1, r8
 8002fba:	008a      	lsls	r2, r1, #2
 8002fbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fc0:	f7fd f956 	bl	8000270 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <UART_SetConfig+0x4e4>)
 8002fca:	fba3 1302 	umull	r1, r3, r3, r2
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2164      	movs	r1, #100	; 0x64
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	3332      	adds	r3, #50	; 0x32
 8002fdc:	4a08      	ldr	r2, [pc, #32]	; (8003000 <UART_SetConfig+0x4e4>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4422      	add	r2, r4
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffe:	bf00      	nop
 8003000:	51eb851f 	.word	0x51eb851f

08003004 <__errno>:
 8003004:	4b01      	ldr	r3, [pc, #4]	; (800300c <__errno+0x8>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000000c 	.word	0x2000000c

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	4d0d      	ldr	r5, [pc, #52]	; (8003048 <__libc_init_array+0x38>)
 8003014:	4c0d      	ldr	r4, [pc, #52]	; (800304c <__libc_init_array+0x3c>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	2600      	movs	r6, #0
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	4d0b      	ldr	r5, [pc, #44]	; (8003050 <__libc_init_array+0x40>)
 8003022:	4c0c      	ldr	r4, [pc, #48]	; (8003054 <__libc_init_array+0x44>)
 8003024:	f001 f824 	bl	8004070 <_init>
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	2600      	movs	r6, #0
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	08004374 	.word	0x08004374
 800304c:	08004374 	.word	0x08004374
 8003050:	08004374 	.word	0x08004374
 8003054:	08004378 	.word	0x08004378

08003058 <memset>:
 8003058:	4402      	add	r2, r0
 800305a:	4603      	mov	r3, r0
 800305c:	4293      	cmp	r3, r2
 800305e:	d100      	bne.n	8003062 <memset+0xa>
 8003060:	4770      	bx	lr
 8003062:	f803 1b01 	strb.w	r1, [r3], #1
 8003066:	e7f9      	b.n	800305c <memset+0x4>

08003068 <iprintf>:
 8003068:	b40f      	push	{r0, r1, r2, r3}
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <iprintf+0x2c>)
 800306c:	b513      	push	{r0, r1, r4, lr}
 800306e:	681c      	ldr	r4, [r3, #0]
 8003070:	b124      	cbz	r4, 800307c <iprintf+0x14>
 8003072:	69a3      	ldr	r3, [r4, #24]
 8003074:	b913      	cbnz	r3, 800307c <iprintf+0x14>
 8003076:	4620      	mov	r0, r4
 8003078:	f000 fa5e 	bl	8003538 <__sinit>
 800307c:	ab05      	add	r3, sp, #20
 800307e:	9a04      	ldr	r2, [sp, #16]
 8003080:	68a1      	ldr	r1, [r4, #8]
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	4620      	mov	r0, r4
 8003086:	f000 fc67 	bl	8003958 <_vfiprintf_r>
 800308a:	b002      	add	sp, #8
 800308c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003090:	b004      	add	sp, #16
 8003092:	4770      	bx	lr
 8003094:	2000000c 	.word	0x2000000c

08003098 <_puts_r>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	460e      	mov	r6, r1
 800309c:	4605      	mov	r5, r0
 800309e:	b118      	cbz	r0, 80030a8 <_puts_r+0x10>
 80030a0:	6983      	ldr	r3, [r0, #24]
 80030a2:	b90b      	cbnz	r3, 80030a8 <_puts_r+0x10>
 80030a4:	f000 fa48 	bl	8003538 <__sinit>
 80030a8:	69ab      	ldr	r3, [r5, #24]
 80030aa:	68ac      	ldr	r4, [r5, #8]
 80030ac:	b913      	cbnz	r3, 80030b4 <_puts_r+0x1c>
 80030ae:	4628      	mov	r0, r5
 80030b0:	f000 fa42 	bl	8003538 <__sinit>
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <_puts_r+0xd0>)
 80030b6:	429c      	cmp	r4, r3
 80030b8:	d120      	bne.n	80030fc <_puts_r+0x64>
 80030ba:	686c      	ldr	r4, [r5, #4]
 80030bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030be:	07db      	lsls	r3, r3, #31
 80030c0:	d405      	bmi.n	80030ce <_puts_r+0x36>
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	0598      	lsls	r0, r3, #22
 80030c6:	d402      	bmi.n	80030ce <_puts_r+0x36>
 80030c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ca:	f000 fad3 	bl	8003674 <__retarget_lock_acquire_recursive>
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	0719      	lsls	r1, r3, #28
 80030d2:	d51d      	bpl.n	8003110 <_puts_r+0x78>
 80030d4:	6923      	ldr	r3, [r4, #16]
 80030d6:	b1db      	cbz	r3, 8003110 <_puts_r+0x78>
 80030d8:	3e01      	subs	r6, #1
 80030da:	68a3      	ldr	r3, [r4, #8]
 80030dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60a3      	str	r3, [r4, #8]
 80030e4:	bb39      	cbnz	r1, 8003136 <_puts_r+0x9e>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da38      	bge.n	800315c <_puts_r+0xc4>
 80030ea:	4622      	mov	r2, r4
 80030ec:	210a      	movs	r1, #10
 80030ee:	4628      	mov	r0, r5
 80030f0:	f000 f848 	bl	8003184 <__swbuf_r>
 80030f4:	3001      	adds	r0, #1
 80030f6:	d011      	beq.n	800311c <_puts_r+0x84>
 80030f8:	250a      	movs	r5, #10
 80030fa:	e011      	b.n	8003120 <_puts_r+0x88>
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <_puts_r+0xd4>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d101      	bne.n	8003106 <_puts_r+0x6e>
 8003102:	68ac      	ldr	r4, [r5, #8]
 8003104:	e7da      	b.n	80030bc <_puts_r+0x24>
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <_puts_r+0xd8>)
 8003108:	429c      	cmp	r4, r3
 800310a:	bf08      	it	eq
 800310c:	68ec      	ldreq	r4, [r5, #12]
 800310e:	e7d5      	b.n	80030bc <_puts_r+0x24>
 8003110:	4621      	mov	r1, r4
 8003112:	4628      	mov	r0, r5
 8003114:	f000 f888 	bl	8003228 <__swsetup_r>
 8003118:	2800      	cmp	r0, #0
 800311a:	d0dd      	beq.n	80030d8 <_puts_r+0x40>
 800311c:	f04f 35ff 	mov.w	r5, #4294967295
 8003120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003122:	07da      	lsls	r2, r3, #31
 8003124:	d405      	bmi.n	8003132 <_puts_r+0x9a>
 8003126:	89a3      	ldrh	r3, [r4, #12]
 8003128:	059b      	lsls	r3, r3, #22
 800312a:	d402      	bmi.n	8003132 <_puts_r+0x9a>
 800312c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800312e:	f000 faa2 	bl	8003676 <__retarget_lock_release_recursive>
 8003132:	4628      	mov	r0, r5
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	2b00      	cmp	r3, #0
 8003138:	da04      	bge.n	8003144 <_puts_r+0xac>
 800313a:	69a2      	ldr	r2, [r4, #24]
 800313c:	429a      	cmp	r2, r3
 800313e:	dc06      	bgt.n	800314e <_puts_r+0xb6>
 8003140:	290a      	cmp	r1, #10
 8003142:	d004      	beq.n	800314e <_puts_r+0xb6>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	6022      	str	r2, [r4, #0]
 800314a:	7019      	strb	r1, [r3, #0]
 800314c:	e7c5      	b.n	80030da <_puts_r+0x42>
 800314e:	4622      	mov	r2, r4
 8003150:	4628      	mov	r0, r5
 8003152:	f000 f817 	bl	8003184 <__swbuf_r>
 8003156:	3001      	adds	r0, #1
 8003158:	d1bf      	bne.n	80030da <_puts_r+0x42>
 800315a:	e7df      	b.n	800311c <_puts_r+0x84>
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	250a      	movs	r5, #10
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	6022      	str	r2, [r4, #0]
 8003164:	701d      	strb	r5, [r3, #0]
 8003166:	e7db      	b.n	8003120 <_puts_r+0x88>
 8003168:	080042f8 	.word	0x080042f8
 800316c:	08004318 	.word	0x08004318
 8003170:	080042d8 	.word	0x080042d8

08003174 <puts>:
 8003174:	4b02      	ldr	r3, [pc, #8]	; (8003180 <puts+0xc>)
 8003176:	4601      	mov	r1, r0
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	f7ff bf8d 	b.w	8003098 <_puts_r>
 800317e:	bf00      	nop
 8003180:	2000000c 	.word	0x2000000c

08003184 <__swbuf_r>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	460e      	mov	r6, r1
 8003188:	4614      	mov	r4, r2
 800318a:	4605      	mov	r5, r0
 800318c:	b118      	cbz	r0, 8003196 <__swbuf_r+0x12>
 800318e:	6983      	ldr	r3, [r0, #24]
 8003190:	b90b      	cbnz	r3, 8003196 <__swbuf_r+0x12>
 8003192:	f000 f9d1 	bl	8003538 <__sinit>
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <__swbuf_r+0x98>)
 8003198:	429c      	cmp	r4, r3
 800319a:	d12b      	bne.n	80031f4 <__swbuf_r+0x70>
 800319c:	686c      	ldr	r4, [r5, #4]
 800319e:	69a3      	ldr	r3, [r4, #24]
 80031a0:	60a3      	str	r3, [r4, #8]
 80031a2:	89a3      	ldrh	r3, [r4, #12]
 80031a4:	071a      	lsls	r2, r3, #28
 80031a6:	d52f      	bpl.n	8003208 <__swbuf_r+0x84>
 80031a8:	6923      	ldr	r3, [r4, #16]
 80031aa:	b36b      	cbz	r3, 8003208 <__swbuf_r+0x84>
 80031ac:	6923      	ldr	r3, [r4, #16]
 80031ae:	6820      	ldr	r0, [r4, #0]
 80031b0:	1ac0      	subs	r0, r0, r3
 80031b2:	6963      	ldr	r3, [r4, #20]
 80031b4:	b2f6      	uxtb	r6, r6
 80031b6:	4283      	cmp	r3, r0
 80031b8:	4637      	mov	r7, r6
 80031ba:	dc04      	bgt.n	80031c6 <__swbuf_r+0x42>
 80031bc:	4621      	mov	r1, r4
 80031be:	4628      	mov	r0, r5
 80031c0:	f000 f926 	bl	8003410 <_fflush_r>
 80031c4:	bb30      	cbnz	r0, 8003214 <__swbuf_r+0x90>
 80031c6:	68a3      	ldr	r3, [r4, #8]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60a3      	str	r3, [r4, #8]
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	6022      	str	r2, [r4, #0]
 80031d2:	701e      	strb	r6, [r3, #0]
 80031d4:	6963      	ldr	r3, [r4, #20]
 80031d6:	3001      	adds	r0, #1
 80031d8:	4283      	cmp	r3, r0
 80031da:	d004      	beq.n	80031e6 <__swbuf_r+0x62>
 80031dc:	89a3      	ldrh	r3, [r4, #12]
 80031de:	07db      	lsls	r3, r3, #31
 80031e0:	d506      	bpl.n	80031f0 <__swbuf_r+0x6c>
 80031e2:	2e0a      	cmp	r6, #10
 80031e4:	d104      	bne.n	80031f0 <__swbuf_r+0x6c>
 80031e6:	4621      	mov	r1, r4
 80031e8:	4628      	mov	r0, r5
 80031ea:	f000 f911 	bl	8003410 <_fflush_r>
 80031ee:	b988      	cbnz	r0, 8003214 <__swbuf_r+0x90>
 80031f0:	4638      	mov	r0, r7
 80031f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <__swbuf_r+0x9c>)
 80031f6:	429c      	cmp	r4, r3
 80031f8:	d101      	bne.n	80031fe <__swbuf_r+0x7a>
 80031fa:	68ac      	ldr	r4, [r5, #8]
 80031fc:	e7cf      	b.n	800319e <__swbuf_r+0x1a>
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <__swbuf_r+0xa0>)
 8003200:	429c      	cmp	r4, r3
 8003202:	bf08      	it	eq
 8003204:	68ec      	ldreq	r4, [r5, #12]
 8003206:	e7ca      	b.n	800319e <__swbuf_r+0x1a>
 8003208:	4621      	mov	r1, r4
 800320a:	4628      	mov	r0, r5
 800320c:	f000 f80c 	bl	8003228 <__swsetup_r>
 8003210:	2800      	cmp	r0, #0
 8003212:	d0cb      	beq.n	80031ac <__swbuf_r+0x28>
 8003214:	f04f 37ff 	mov.w	r7, #4294967295
 8003218:	e7ea      	b.n	80031f0 <__swbuf_r+0x6c>
 800321a:	bf00      	nop
 800321c:	080042f8 	.word	0x080042f8
 8003220:	08004318 	.word	0x08004318
 8003224:	080042d8 	.word	0x080042d8

08003228 <__swsetup_r>:
 8003228:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <__swsetup_r+0xcc>)
 800322a:	b570      	push	{r4, r5, r6, lr}
 800322c:	681d      	ldr	r5, [r3, #0]
 800322e:	4606      	mov	r6, r0
 8003230:	460c      	mov	r4, r1
 8003232:	b125      	cbz	r5, 800323e <__swsetup_r+0x16>
 8003234:	69ab      	ldr	r3, [r5, #24]
 8003236:	b913      	cbnz	r3, 800323e <__swsetup_r+0x16>
 8003238:	4628      	mov	r0, r5
 800323a:	f000 f97d 	bl	8003538 <__sinit>
 800323e:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <__swsetup_r+0xd0>)
 8003240:	429c      	cmp	r4, r3
 8003242:	d10f      	bne.n	8003264 <__swsetup_r+0x3c>
 8003244:	686c      	ldr	r4, [r5, #4]
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800324c:	0719      	lsls	r1, r3, #28
 800324e:	d42c      	bmi.n	80032aa <__swsetup_r+0x82>
 8003250:	06dd      	lsls	r5, r3, #27
 8003252:	d411      	bmi.n	8003278 <__swsetup_r+0x50>
 8003254:	2309      	movs	r3, #9
 8003256:	6033      	str	r3, [r6, #0]
 8003258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800325c:	81a3      	strh	r3, [r4, #12]
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	e03e      	b.n	80032e2 <__swsetup_r+0xba>
 8003264:	4b25      	ldr	r3, [pc, #148]	; (80032fc <__swsetup_r+0xd4>)
 8003266:	429c      	cmp	r4, r3
 8003268:	d101      	bne.n	800326e <__swsetup_r+0x46>
 800326a:	68ac      	ldr	r4, [r5, #8]
 800326c:	e7eb      	b.n	8003246 <__swsetup_r+0x1e>
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <__swsetup_r+0xd8>)
 8003270:	429c      	cmp	r4, r3
 8003272:	bf08      	it	eq
 8003274:	68ec      	ldreq	r4, [r5, #12]
 8003276:	e7e6      	b.n	8003246 <__swsetup_r+0x1e>
 8003278:	0758      	lsls	r0, r3, #29
 800327a:	d512      	bpl.n	80032a2 <__swsetup_r+0x7a>
 800327c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800327e:	b141      	cbz	r1, 8003292 <__swsetup_r+0x6a>
 8003280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003284:	4299      	cmp	r1, r3
 8003286:	d002      	beq.n	800328e <__swsetup_r+0x66>
 8003288:	4630      	mov	r0, r6
 800328a:	f000 fa5b 	bl	8003744 <_free_r>
 800328e:	2300      	movs	r3, #0
 8003290:	6363      	str	r3, [r4, #52]	; 0x34
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003298:	81a3      	strh	r3, [r4, #12]
 800329a:	2300      	movs	r3, #0
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	6923      	ldr	r3, [r4, #16]
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	81a3      	strh	r3, [r4, #12]
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	b94b      	cbnz	r3, 80032c2 <__swsetup_r+0x9a>
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b8:	d003      	beq.n	80032c2 <__swsetup_r+0x9a>
 80032ba:	4621      	mov	r1, r4
 80032bc:	4630      	mov	r0, r6
 80032be:	f000 fa01 	bl	80036c4 <__smakebuf_r>
 80032c2:	89a0      	ldrh	r0, [r4, #12]
 80032c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032c8:	f010 0301 	ands.w	r3, r0, #1
 80032cc:	d00a      	beq.n	80032e4 <__swsetup_r+0xbc>
 80032ce:	2300      	movs	r3, #0
 80032d0:	60a3      	str	r3, [r4, #8]
 80032d2:	6963      	ldr	r3, [r4, #20]
 80032d4:	425b      	negs	r3, r3
 80032d6:	61a3      	str	r3, [r4, #24]
 80032d8:	6923      	ldr	r3, [r4, #16]
 80032da:	b943      	cbnz	r3, 80032ee <__swsetup_r+0xc6>
 80032dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032e0:	d1ba      	bne.n	8003258 <__swsetup_r+0x30>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	0781      	lsls	r1, r0, #30
 80032e6:	bf58      	it	pl
 80032e8:	6963      	ldrpl	r3, [r4, #20]
 80032ea:	60a3      	str	r3, [r4, #8]
 80032ec:	e7f4      	b.n	80032d8 <__swsetup_r+0xb0>
 80032ee:	2000      	movs	r0, #0
 80032f0:	e7f7      	b.n	80032e2 <__swsetup_r+0xba>
 80032f2:	bf00      	nop
 80032f4:	2000000c 	.word	0x2000000c
 80032f8:	080042f8 	.word	0x080042f8
 80032fc:	08004318 	.word	0x08004318
 8003300:	080042d8 	.word	0x080042d8

08003304 <__sflush_r>:
 8003304:	898a      	ldrh	r2, [r1, #12]
 8003306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330a:	4605      	mov	r5, r0
 800330c:	0710      	lsls	r0, r2, #28
 800330e:	460c      	mov	r4, r1
 8003310:	d458      	bmi.n	80033c4 <__sflush_r+0xc0>
 8003312:	684b      	ldr	r3, [r1, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	dc05      	bgt.n	8003324 <__sflush_r+0x20>
 8003318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	dc02      	bgt.n	8003324 <__sflush_r+0x20>
 800331e:	2000      	movs	r0, #0
 8003320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003326:	2e00      	cmp	r6, #0
 8003328:	d0f9      	beq.n	800331e <__sflush_r+0x1a>
 800332a:	2300      	movs	r3, #0
 800332c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003330:	682f      	ldr	r7, [r5, #0]
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	d032      	beq.n	800339c <__sflush_r+0x98>
 8003336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003338:	89a3      	ldrh	r3, [r4, #12]
 800333a:	075a      	lsls	r2, r3, #29
 800333c:	d505      	bpl.n	800334a <__sflush_r+0x46>
 800333e:	6863      	ldr	r3, [r4, #4]
 8003340:	1ac0      	subs	r0, r0, r3
 8003342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003344:	b10b      	cbz	r3, 800334a <__sflush_r+0x46>
 8003346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003348:	1ac0      	subs	r0, r0, r3
 800334a:	2300      	movs	r3, #0
 800334c:	4602      	mov	r2, r0
 800334e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003350:	6a21      	ldr	r1, [r4, #32]
 8003352:	4628      	mov	r0, r5
 8003354:	47b0      	blx	r6
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	d106      	bne.n	800336a <__sflush_r+0x66>
 800335c:	6829      	ldr	r1, [r5, #0]
 800335e:	291d      	cmp	r1, #29
 8003360:	d82c      	bhi.n	80033bc <__sflush_r+0xb8>
 8003362:	4a2a      	ldr	r2, [pc, #168]	; (800340c <__sflush_r+0x108>)
 8003364:	40ca      	lsrs	r2, r1
 8003366:	07d6      	lsls	r6, r2, #31
 8003368:	d528      	bpl.n	80033bc <__sflush_r+0xb8>
 800336a:	2200      	movs	r2, #0
 800336c:	6062      	str	r2, [r4, #4]
 800336e:	04d9      	lsls	r1, r3, #19
 8003370:	6922      	ldr	r2, [r4, #16]
 8003372:	6022      	str	r2, [r4, #0]
 8003374:	d504      	bpl.n	8003380 <__sflush_r+0x7c>
 8003376:	1c42      	adds	r2, r0, #1
 8003378:	d101      	bne.n	800337e <__sflush_r+0x7a>
 800337a:	682b      	ldr	r3, [r5, #0]
 800337c:	b903      	cbnz	r3, 8003380 <__sflush_r+0x7c>
 800337e:	6560      	str	r0, [r4, #84]	; 0x54
 8003380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003382:	602f      	str	r7, [r5, #0]
 8003384:	2900      	cmp	r1, #0
 8003386:	d0ca      	beq.n	800331e <__sflush_r+0x1a>
 8003388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800338c:	4299      	cmp	r1, r3
 800338e:	d002      	beq.n	8003396 <__sflush_r+0x92>
 8003390:	4628      	mov	r0, r5
 8003392:	f000 f9d7 	bl	8003744 <_free_r>
 8003396:	2000      	movs	r0, #0
 8003398:	6360      	str	r0, [r4, #52]	; 0x34
 800339a:	e7c1      	b.n	8003320 <__sflush_r+0x1c>
 800339c:	6a21      	ldr	r1, [r4, #32]
 800339e:	2301      	movs	r3, #1
 80033a0:	4628      	mov	r0, r5
 80033a2:	47b0      	blx	r6
 80033a4:	1c41      	adds	r1, r0, #1
 80033a6:	d1c7      	bne.n	8003338 <__sflush_r+0x34>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0c4      	beq.n	8003338 <__sflush_r+0x34>
 80033ae:	2b1d      	cmp	r3, #29
 80033b0:	d001      	beq.n	80033b6 <__sflush_r+0xb2>
 80033b2:	2b16      	cmp	r3, #22
 80033b4:	d101      	bne.n	80033ba <__sflush_r+0xb6>
 80033b6:	602f      	str	r7, [r5, #0]
 80033b8:	e7b1      	b.n	800331e <__sflush_r+0x1a>
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	e7ad      	b.n	8003320 <__sflush_r+0x1c>
 80033c4:	690f      	ldr	r7, [r1, #16]
 80033c6:	2f00      	cmp	r7, #0
 80033c8:	d0a9      	beq.n	800331e <__sflush_r+0x1a>
 80033ca:	0793      	lsls	r3, r2, #30
 80033cc:	680e      	ldr	r6, [r1, #0]
 80033ce:	bf08      	it	eq
 80033d0:	694b      	ldreq	r3, [r1, #20]
 80033d2:	600f      	str	r7, [r1, #0]
 80033d4:	bf18      	it	ne
 80033d6:	2300      	movne	r3, #0
 80033d8:	eba6 0807 	sub.w	r8, r6, r7
 80033dc:	608b      	str	r3, [r1, #8]
 80033de:	f1b8 0f00 	cmp.w	r8, #0
 80033e2:	dd9c      	ble.n	800331e <__sflush_r+0x1a>
 80033e4:	6a21      	ldr	r1, [r4, #32]
 80033e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033e8:	4643      	mov	r3, r8
 80033ea:	463a      	mov	r2, r7
 80033ec:	4628      	mov	r0, r5
 80033ee:	47b0      	blx	r6
 80033f0:	2800      	cmp	r0, #0
 80033f2:	dc06      	bgt.n	8003402 <__sflush_r+0xfe>
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033fa:	81a3      	strh	r3, [r4, #12]
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	e78e      	b.n	8003320 <__sflush_r+0x1c>
 8003402:	4407      	add	r7, r0
 8003404:	eba8 0800 	sub.w	r8, r8, r0
 8003408:	e7e9      	b.n	80033de <__sflush_r+0xda>
 800340a:	bf00      	nop
 800340c:	20400001 	.word	0x20400001

08003410 <_fflush_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	690b      	ldr	r3, [r1, #16]
 8003414:	4605      	mov	r5, r0
 8003416:	460c      	mov	r4, r1
 8003418:	b913      	cbnz	r3, 8003420 <_fflush_r+0x10>
 800341a:	2500      	movs	r5, #0
 800341c:	4628      	mov	r0, r5
 800341e:	bd38      	pop	{r3, r4, r5, pc}
 8003420:	b118      	cbz	r0, 800342a <_fflush_r+0x1a>
 8003422:	6983      	ldr	r3, [r0, #24]
 8003424:	b90b      	cbnz	r3, 800342a <_fflush_r+0x1a>
 8003426:	f000 f887 	bl	8003538 <__sinit>
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <_fflush_r+0x6c>)
 800342c:	429c      	cmp	r4, r3
 800342e:	d11b      	bne.n	8003468 <_fflush_r+0x58>
 8003430:	686c      	ldr	r4, [r5, #4]
 8003432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ef      	beq.n	800341a <_fflush_r+0xa>
 800343a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800343c:	07d0      	lsls	r0, r2, #31
 800343e:	d404      	bmi.n	800344a <_fflush_r+0x3a>
 8003440:	0599      	lsls	r1, r3, #22
 8003442:	d402      	bmi.n	800344a <_fflush_r+0x3a>
 8003444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003446:	f000 f915 	bl	8003674 <__retarget_lock_acquire_recursive>
 800344a:	4628      	mov	r0, r5
 800344c:	4621      	mov	r1, r4
 800344e:	f7ff ff59 	bl	8003304 <__sflush_r>
 8003452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003454:	07da      	lsls	r2, r3, #31
 8003456:	4605      	mov	r5, r0
 8003458:	d4e0      	bmi.n	800341c <_fflush_r+0xc>
 800345a:	89a3      	ldrh	r3, [r4, #12]
 800345c:	059b      	lsls	r3, r3, #22
 800345e:	d4dd      	bmi.n	800341c <_fflush_r+0xc>
 8003460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003462:	f000 f908 	bl	8003676 <__retarget_lock_release_recursive>
 8003466:	e7d9      	b.n	800341c <_fflush_r+0xc>
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <_fflush_r+0x70>)
 800346a:	429c      	cmp	r4, r3
 800346c:	d101      	bne.n	8003472 <_fflush_r+0x62>
 800346e:	68ac      	ldr	r4, [r5, #8]
 8003470:	e7df      	b.n	8003432 <_fflush_r+0x22>
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <_fflush_r+0x74>)
 8003474:	429c      	cmp	r4, r3
 8003476:	bf08      	it	eq
 8003478:	68ec      	ldreq	r4, [r5, #12]
 800347a:	e7da      	b.n	8003432 <_fflush_r+0x22>
 800347c:	080042f8 	.word	0x080042f8
 8003480:	08004318 	.word	0x08004318
 8003484:	080042d8 	.word	0x080042d8

08003488 <std>:
 8003488:	2300      	movs	r3, #0
 800348a:	b510      	push	{r4, lr}
 800348c:	4604      	mov	r4, r0
 800348e:	e9c0 3300 	strd	r3, r3, [r0]
 8003492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003496:	6083      	str	r3, [r0, #8]
 8003498:	8181      	strh	r1, [r0, #12]
 800349a:	6643      	str	r3, [r0, #100]	; 0x64
 800349c:	81c2      	strh	r2, [r0, #14]
 800349e:	6183      	str	r3, [r0, #24]
 80034a0:	4619      	mov	r1, r3
 80034a2:	2208      	movs	r2, #8
 80034a4:	305c      	adds	r0, #92	; 0x5c
 80034a6:	f7ff fdd7 	bl	8003058 <memset>
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <std+0x38>)
 80034ac:	6263      	str	r3, [r4, #36]	; 0x24
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <std+0x3c>)
 80034b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <std+0x40>)
 80034b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <std+0x44>)
 80034b8:	6224      	str	r4, [r4, #32]
 80034ba:	6323      	str	r3, [r4, #48]	; 0x30
 80034bc:	bd10      	pop	{r4, pc}
 80034be:	bf00      	nop
 80034c0:	08003f01 	.word	0x08003f01
 80034c4:	08003f23 	.word	0x08003f23
 80034c8:	08003f5b 	.word	0x08003f5b
 80034cc:	08003f7f 	.word	0x08003f7f

080034d0 <_cleanup_r>:
 80034d0:	4901      	ldr	r1, [pc, #4]	; (80034d8 <_cleanup_r+0x8>)
 80034d2:	f000 b8af 	b.w	8003634 <_fwalk_reent>
 80034d6:	bf00      	nop
 80034d8:	08003411 	.word	0x08003411

080034dc <__sfmoreglue>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	2268      	movs	r2, #104	; 0x68
 80034e0:	1e4d      	subs	r5, r1, #1
 80034e2:	4355      	muls	r5, r2
 80034e4:	460e      	mov	r6, r1
 80034e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034ea:	f000 f997 	bl	800381c <_malloc_r>
 80034ee:	4604      	mov	r4, r0
 80034f0:	b140      	cbz	r0, 8003504 <__sfmoreglue+0x28>
 80034f2:	2100      	movs	r1, #0
 80034f4:	e9c0 1600 	strd	r1, r6, [r0]
 80034f8:	300c      	adds	r0, #12
 80034fa:	60a0      	str	r0, [r4, #8]
 80034fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003500:	f7ff fdaa 	bl	8003058 <memset>
 8003504:	4620      	mov	r0, r4
 8003506:	bd70      	pop	{r4, r5, r6, pc}

08003508 <__sfp_lock_acquire>:
 8003508:	4801      	ldr	r0, [pc, #4]	; (8003510 <__sfp_lock_acquire+0x8>)
 800350a:	f000 b8b3 	b.w	8003674 <__retarget_lock_acquire_recursive>
 800350e:	bf00      	nop
 8003510:	20000555 	.word	0x20000555

08003514 <__sfp_lock_release>:
 8003514:	4801      	ldr	r0, [pc, #4]	; (800351c <__sfp_lock_release+0x8>)
 8003516:	f000 b8ae 	b.w	8003676 <__retarget_lock_release_recursive>
 800351a:	bf00      	nop
 800351c:	20000555 	.word	0x20000555

08003520 <__sinit_lock_acquire>:
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <__sinit_lock_acquire+0x8>)
 8003522:	f000 b8a7 	b.w	8003674 <__retarget_lock_acquire_recursive>
 8003526:	bf00      	nop
 8003528:	20000556 	.word	0x20000556

0800352c <__sinit_lock_release>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__sinit_lock_release+0x8>)
 800352e:	f000 b8a2 	b.w	8003676 <__retarget_lock_release_recursive>
 8003532:	bf00      	nop
 8003534:	20000556 	.word	0x20000556

08003538 <__sinit>:
 8003538:	b510      	push	{r4, lr}
 800353a:	4604      	mov	r4, r0
 800353c:	f7ff fff0 	bl	8003520 <__sinit_lock_acquire>
 8003540:	69a3      	ldr	r3, [r4, #24]
 8003542:	b11b      	cbz	r3, 800354c <__sinit+0x14>
 8003544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003548:	f7ff bff0 	b.w	800352c <__sinit_lock_release>
 800354c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003550:	6523      	str	r3, [r4, #80]	; 0x50
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <__sinit+0x68>)
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <__sinit+0x6c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	62a2      	str	r2, [r4, #40]	; 0x28
 800355a:	42a3      	cmp	r3, r4
 800355c:	bf04      	itt	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	61a3      	streq	r3, [r4, #24]
 8003562:	4620      	mov	r0, r4
 8003564:	f000 f820 	bl	80035a8 <__sfp>
 8003568:	6060      	str	r0, [r4, #4]
 800356a:	4620      	mov	r0, r4
 800356c:	f000 f81c 	bl	80035a8 <__sfp>
 8003570:	60a0      	str	r0, [r4, #8]
 8003572:	4620      	mov	r0, r4
 8003574:	f000 f818 	bl	80035a8 <__sfp>
 8003578:	2200      	movs	r2, #0
 800357a:	60e0      	str	r0, [r4, #12]
 800357c:	2104      	movs	r1, #4
 800357e:	6860      	ldr	r0, [r4, #4]
 8003580:	f7ff ff82 	bl	8003488 <std>
 8003584:	68a0      	ldr	r0, [r4, #8]
 8003586:	2201      	movs	r2, #1
 8003588:	2109      	movs	r1, #9
 800358a:	f7ff ff7d 	bl	8003488 <std>
 800358e:	68e0      	ldr	r0, [r4, #12]
 8003590:	2202      	movs	r2, #2
 8003592:	2112      	movs	r1, #18
 8003594:	f7ff ff78 	bl	8003488 <std>
 8003598:	2301      	movs	r3, #1
 800359a:	61a3      	str	r3, [r4, #24]
 800359c:	e7d2      	b.n	8003544 <__sinit+0xc>
 800359e:	bf00      	nop
 80035a0:	080042d4 	.word	0x080042d4
 80035a4:	080034d1 	.word	0x080034d1

080035a8 <__sfp>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	4607      	mov	r7, r0
 80035ac:	f7ff ffac 	bl	8003508 <__sfp_lock_acquire>
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <__sfp+0x84>)
 80035b2:	681e      	ldr	r6, [r3, #0]
 80035b4:	69b3      	ldr	r3, [r6, #24]
 80035b6:	b913      	cbnz	r3, 80035be <__sfp+0x16>
 80035b8:	4630      	mov	r0, r6
 80035ba:	f7ff ffbd 	bl	8003538 <__sinit>
 80035be:	3648      	adds	r6, #72	; 0x48
 80035c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	d503      	bpl.n	80035d0 <__sfp+0x28>
 80035c8:	6833      	ldr	r3, [r6, #0]
 80035ca:	b30b      	cbz	r3, 8003610 <__sfp+0x68>
 80035cc:	6836      	ldr	r6, [r6, #0]
 80035ce:	e7f7      	b.n	80035c0 <__sfp+0x18>
 80035d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035d4:	b9d5      	cbnz	r5, 800360c <__sfp+0x64>
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <__sfp+0x88>)
 80035d8:	60e3      	str	r3, [r4, #12]
 80035da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035de:	6665      	str	r5, [r4, #100]	; 0x64
 80035e0:	f000 f847 	bl	8003672 <__retarget_lock_init_recursive>
 80035e4:	f7ff ff96 	bl	8003514 <__sfp_lock_release>
 80035e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035f0:	6025      	str	r5, [r4, #0]
 80035f2:	61a5      	str	r5, [r4, #24]
 80035f4:	2208      	movs	r2, #8
 80035f6:	4629      	mov	r1, r5
 80035f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035fc:	f7ff fd2c 	bl	8003058 <memset>
 8003600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003608:	4620      	mov	r0, r4
 800360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360c:	3468      	adds	r4, #104	; 0x68
 800360e:	e7d9      	b.n	80035c4 <__sfp+0x1c>
 8003610:	2104      	movs	r1, #4
 8003612:	4638      	mov	r0, r7
 8003614:	f7ff ff62 	bl	80034dc <__sfmoreglue>
 8003618:	4604      	mov	r4, r0
 800361a:	6030      	str	r0, [r6, #0]
 800361c:	2800      	cmp	r0, #0
 800361e:	d1d5      	bne.n	80035cc <__sfp+0x24>
 8003620:	f7ff ff78 	bl	8003514 <__sfp_lock_release>
 8003624:	230c      	movs	r3, #12
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	e7ee      	b.n	8003608 <__sfp+0x60>
 800362a:	bf00      	nop
 800362c:	080042d4 	.word	0x080042d4
 8003630:	ffff0001 	.word	0xffff0001

08003634 <_fwalk_reent>:
 8003634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003638:	4606      	mov	r6, r0
 800363a:	4688      	mov	r8, r1
 800363c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003640:	2700      	movs	r7, #0
 8003642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003646:	f1b9 0901 	subs.w	r9, r9, #1
 800364a:	d505      	bpl.n	8003658 <_fwalk_reent+0x24>
 800364c:	6824      	ldr	r4, [r4, #0]
 800364e:	2c00      	cmp	r4, #0
 8003650:	d1f7      	bne.n	8003642 <_fwalk_reent+0xe>
 8003652:	4638      	mov	r0, r7
 8003654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003658:	89ab      	ldrh	r3, [r5, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d907      	bls.n	800366e <_fwalk_reent+0x3a>
 800365e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003662:	3301      	adds	r3, #1
 8003664:	d003      	beq.n	800366e <_fwalk_reent+0x3a>
 8003666:	4629      	mov	r1, r5
 8003668:	4630      	mov	r0, r6
 800366a:	47c0      	blx	r8
 800366c:	4307      	orrs	r7, r0
 800366e:	3568      	adds	r5, #104	; 0x68
 8003670:	e7e9      	b.n	8003646 <_fwalk_reent+0x12>

08003672 <__retarget_lock_init_recursive>:
 8003672:	4770      	bx	lr

08003674 <__retarget_lock_acquire_recursive>:
 8003674:	4770      	bx	lr

08003676 <__retarget_lock_release_recursive>:
 8003676:	4770      	bx	lr

08003678 <__swhatbuf_r>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	460e      	mov	r6, r1
 800367c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003680:	2900      	cmp	r1, #0
 8003682:	b096      	sub	sp, #88	; 0x58
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	da08      	bge.n	800369c <__swhatbuf_r+0x24>
 800368a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	602a      	str	r2, [r5, #0]
 8003692:	061a      	lsls	r2, r3, #24
 8003694:	d410      	bmi.n	80036b8 <__swhatbuf_r+0x40>
 8003696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369a:	e00e      	b.n	80036ba <__swhatbuf_r+0x42>
 800369c:	466a      	mov	r2, sp
 800369e:	f000 fc95 	bl	8003fcc <_fstat_r>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	dbf1      	blt.n	800368a <__swhatbuf_r+0x12>
 80036a6:	9a01      	ldr	r2, [sp, #4]
 80036a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036b0:	425a      	negs	r2, r3
 80036b2:	415a      	adcs	r2, r3
 80036b4:	602a      	str	r2, [r5, #0]
 80036b6:	e7ee      	b.n	8003696 <__swhatbuf_r+0x1e>
 80036b8:	2340      	movs	r3, #64	; 0x40
 80036ba:	2000      	movs	r0, #0
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	b016      	add	sp, #88	; 0x58
 80036c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080036c4 <__smakebuf_r>:
 80036c4:	898b      	ldrh	r3, [r1, #12]
 80036c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036c8:	079d      	lsls	r5, r3, #30
 80036ca:	4606      	mov	r6, r0
 80036cc:	460c      	mov	r4, r1
 80036ce:	d507      	bpl.n	80036e0 <__smakebuf_r+0x1c>
 80036d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	2301      	movs	r3, #1
 80036da:	6163      	str	r3, [r4, #20]
 80036dc:	b002      	add	sp, #8
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	ab01      	add	r3, sp, #4
 80036e2:	466a      	mov	r2, sp
 80036e4:	f7ff ffc8 	bl	8003678 <__swhatbuf_r>
 80036e8:	9900      	ldr	r1, [sp, #0]
 80036ea:	4605      	mov	r5, r0
 80036ec:	4630      	mov	r0, r6
 80036ee:	f000 f895 	bl	800381c <_malloc_r>
 80036f2:	b948      	cbnz	r0, 8003708 <__smakebuf_r+0x44>
 80036f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f8:	059a      	lsls	r2, r3, #22
 80036fa:	d4ef      	bmi.n	80036dc <__smakebuf_r+0x18>
 80036fc:	f023 0303 	bic.w	r3, r3, #3
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	e7e3      	b.n	80036d0 <__smakebuf_r+0xc>
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <__smakebuf_r+0x7c>)
 800370a:	62b3      	str	r3, [r6, #40]	; 0x28
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	6020      	str	r0, [r4, #0]
 8003710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003714:	81a3      	strh	r3, [r4, #12]
 8003716:	9b00      	ldr	r3, [sp, #0]
 8003718:	6163      	str	r3, [r4, #20]
 800371a:	9b01      	ldr	r3, [sp, #4]
 800371c:	6120      	str	r0, [r4, #16]
 800371e:	b15b      	cbz	r3, 8003738 <__smakebuf_r+0x74>
 8003720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003724:	4630      	mov	r0, r6
 8003726:	f000 fc63 	bl	8003ff0 <_isatty_r>
 800372a:	b128      	cbz	r0, 8003738 <__smakebuf_r+0x74>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	89a0      	ldrh	r0, [r4, #12]
 800373a:	4305      	orrs	r5, r0
 800373c:	81a5      	strh	r5, [r4, #12]
 800373e:	e7cd      	b.n	80036dc <__smakebuf_r+0x18>
 8003740:	080034d1 	.word	0x080034d1

08003744 <_free_r>:
 8003744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003746:	2900      	cmp	r1, #0
 8003748:	d044      	beq.n	80037d4 <_free_r+0x90>
 800374a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800374e:	9001      	str	r0, [sp, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f1a1 0404 	sub.w	r4, r1, #4
 8003756:	bfb8      	it	lt
 8003758:	18e4      	addlt	r4, r4, r3
 800375a:	f000 fc6b 	bl	8004034 <__malloc_lock>
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <_free_r+0x94>)
 8003760:	9801      	ldr	r0, [sp, #4]
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	b933      	cbnz	r3, 8003774 <_free_r+0x30>
 8003766:	6063      	str	r3, [r4, #4]
 8003768:	6014      	str	r4, [r2, #0]
 800376a:	b003      	add	sp, #12
 800376c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003770:	f000 bc66 	b.w	8004040 <__malloc_unlock>
 8003774:	42a3      	cmp	r3, r4
 8003776:	d908      	bls.n	800378a <_free_r+0x46>
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	1961      	adds	r1, r4, r5
 800377c:	428b      	cmp	r3, r1
 800377e:	bf01      	itttt	eq
 8003780:	6819      	ldreq	r1, [r3, #0]
 8003782:	685b      	ldreq	r3, [r3, #4]
 8003784:	1949      	addeq	r1, r1, r5
 8003786:	6021      	streq	r1, [r4, #0]
 8003788:	e7ed      	b.n	8003766 <_free_r+0x22>
 800378a:	461a      	mov	r2, r3
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b10b      	cbz	r3, 8003794 <_free_r+0x50>
 8003790:	42a3      	cmp	r3, r4
 8003792:	d9fa      	bls.n	800378a <_free_r+0x46>
 8003794:	6811      	ldr	r1, [r2, #0]
 8003796:	1855      	adds	r5, r2, r1
 8003798:	42a5      	cmp	r5, r4
 800379a:	d10b      	bne.n	80037b4 <_free_r+0x70>
 800379c:	6824      	ldr	r4, [r4, #0]
 800379e:	4421      	add	r1, r4
 80037a0:	1854      	adds	r4, r2, r1
 80037a2:	42a3      	cmp	r3, r4
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	d1e0      	bne.n	800376a <_free_r+0x26>
 80037a8:	681c      	ldr	r4, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	6053      	str	r3, [r2, #4]
 80037ae:	4421      	add	r1, r4
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	e7da      	b.n	800376a <_free_r+0x26>
 80037b4:	d902      	bls.n	80037bc <_free_r+0x78>
 80037b6:	230c      	movs	r3, #12
 80037b8:	6003      	str	r3, [r0, #0]
 80037ba:	e7d6      	b.n	800376a <_free_r+0x26>
 80037bc:	6825      	ldr	r5, [r4, #0]
 80037be:	1961      	adds	r1, r4, r5
 80037c0:	428b      	cmp	r3, r1
 80037c2:	bf04      	itt	eq
 80037c4:	6819      	ldreq	r1, [r3, #0]
 80037c6:	685b      	ldreq	r3, [r3, #4]
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	bf04      	itt	eq
 80037cc:	1949      	addeq	r1, r1, r5
 80037ce:	6021      	streq	r1, [r4, #0]
 80037d0:	6054      	str	r4, [r2, #4]
 80037d2:	e7ca      	b.n	800376a <_free_r+0x26>
 80037d4:	b003      	add	sp, #12
 80037d6:	bd30      	pop	{r4, r5, pc}
 80037d8:	20000558 	.word	0x20000558

080037dc <sbrk_aligned>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	4e0e      	ldr	r6, [pc, #56]	; (8003818 <sbrk_aligned+0x3c>)
 80037e0:	460c      	mov	r4, r1
 80037e2:	6831      	ldr	r1, [r6, #0]
 80037e4:	4605      	mov	r5, r0
 80037e6:	b911      	cbnz	r1, 80037ee <sbrk_aligned+0x12>
 80037e8:	f000 fb7a 	bl	8003ee0 <_sbrk_r>
 80037ec:	6030      	str	r0, [r6, #0]
 80037ee:	4621      	mov	r1, r4
 80037f0:	4628      	mov	r0, r5
 80037f2:	f000 fb75 	bl	8003ee0 <_sbrk_r>
 80037f6:	1c43      	adds	r3, r0, #1
 80037f8:	d00a      	beq.n	8003810 <sbrk_aligned+0x34>
 80037fa:	1cc4      	adds	r4, r0, #3
 80037fc:	f024 0403 	bic.w	r4, r4, #3
 8003800:	42a0      	cmp	r0, r4
 8003802:	d007      	beq.n	8003814 <sbrk_aligned+0x38>
 8003804:	1a21      	subs	r1, r4, r0
 8003806:	4628      	mov	r0, r5
 8003808:	f000 fb6a 	bl	8003ee0 <_sbrk_r>
 800380c:	3001      	adds	r0, #1
 800380e:	d101      	bne.n	8003814 <sbrk_aligned+0x38>
 8003810:	f04f 34ff 	mov.w	r4, #4294967295
 8003814:	4620      	mov	r0, r4
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	2000055c 	.word	0x2000055c

0800381c <_malloc_r>:
 800381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003820:	1ccd      	adds	r5, r1, #3
 8003822:	f025 0503 	bic.w	r5, r5, #3
 8003826:	3508      	adds	r5, #8
 8003828:	2d0c      	cmp	r5, #12
 800382a:	bf38      	it	cc
 800382c:	250c      	movcc	r5, #12
 800382e:	2d00      	cmp	r5, #0
 8003830:	4607      	mov	r7, r0
 8003832:	db01      	blt.n	8003838 <_malloc_r+0x1c>
 8003834:	42a9      	cmp	r1, r5
 8003836:	d905      	bls.n	8003844 <_malloc_r+0x28>
 8003838:	230c      	movs	r3, #12
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	2600      	movs	r6, #0
 800383e:	4630      	mov	r0, r6
 8003840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003844:	4e2e      	ldr	r6, [pc, #184]	; (8003900 <_malloc_r+0xe4>)
 8003846:	f000 fbf5 	bl	8004034 <__malloc_lock>
 800384a:	6833      	ldr	r3, [r6, #0]
 800384c:	461c      	mov	r4, r3
 800384e:	bb34      	cbnz	r4, 800389e <_malloc_r+0x82>
 8003850:	4629      	mov	r1, r5
 8003852:	4638      	mov	r0, r7
 8003854:	f7ff ffc2 	bl	80037dc <sbrk_aligned>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	4604      	mov	r4, r0
 800385c:	d14d      	bne.n	80038fa <_malloc_r+0xde>
 800385e:	6834      	ldr	r4, [r6, #0]
 8003860:	4626      	mov	r6, r4
 8003862:	2e00      	cmp	r6, #0
 8003864:	d140      	bne.n	80038e8 <_malloc_r+0xcc>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	4631      	mov	r1, r6
 800386a:	4638      	mov	r0, r7
 800386c:	eb04 0803 	add.w	r8, r4, r3
 8003870:	f000 fb36 	bl	8003ee0 <_sbrk_r>
 8003874:	4580      	cmp	r8, r0
 8003876:	d13a      	bne.n	80038ee <_malloc_r+0xd2>
 8003878:	6821      	ldr	r1, [r4, #0]
 800387a:	3503      	adds	r5, #3
 800387c:	1a6d      	subs	r5, r5, r1
 800387e:	f025 0503 	bic.w	r5, r5, #3
 8003882:	3508      	adds	r5, #8
 8003884:	2d0c      	cmp	r5, #12
 8003886:	bf38      	it	cc
 8003888:	250c      	movcc	r5, #12
 800388a:	4629      	mov	r1, r5
 800388c:	4638      	mov	r0, r7
 800388e:	f7ff ffa5 	bl	80037dc <sbrk_aligned>
 8003892:	3001      	adds	r0, #1
 8003894:	d02b      	beq.n	80038ee <_malloc_r+0xd2>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	442b      	add	r3, r5
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	e00e      	b.n	80038bc <_malloc_r+0xa0>
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	1b52      	subs	r2, r2, r5
 80038a2:	d41e      	bmi.n	80038e2 <_malloc_r+0xc6>
 80038a4:	2a0b      	cmp	r2, #11
 80038a6:	d916      	bls.n	80038d6 <_malloc_r+0xba>
 80038a8:	1961      	adds	r1, r4, r5
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	6025      	str	r5, [r4, #0]
 80038ae:	bf18      	it	ne
 80038b0:	6059      	strne	r1, [r3, #4]
 80038b2:	6863      	ldr	r3, [r4, #4]
 80038b4:	bf08      	it	eq
 80038b6:	6031      	streq	r1, [r6, #0]
 80038b8:	5162      	str	r2, [r4, r5]
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	4638      	mov	r0, r7
 80038be:	f104 060b 	add.w	r6, r4, #11
 80038c2:	f000 fbbd 	bl	8004040 <__malloc_unlock>
 80038c6:	f026 0607 	bic.w	r6, r6, #7
 80038ca:	1d23      	adds	r3, r4, #4
 80038cc:	1af2      	subs	r2, r6, r3
 80038ce:	d0b6      	beq.n	800383e <_malloc_r+0x22>
 80038d0:	1b9b      	subs	r3, r3, r6
 80038d2:	50a3      	str	r3, [r4, r2]
 80038d4:	e7b3      	b.n	800383e <_malloc_r+0x22>
 80038d6:	6862      	ldr	r2, [r4, #4]
 80038d8:	42a3      	cmp	r3, r4
 80038da:	bf0c      	ite	eq
 80038dc:	6032      	streq	r2, [r6, #0]
 80038de:	605a      	strne	r2, [r3, #4]
 80038e0:	e7ec      	b.n	80038bc <_malloc_r+0xa0>
 80038e2:	4623      	mov	r3, r4
 80038e4:	6864      	ldr	r4, [r4, #4]
 80038e6:	e7b2      	b.n	800384e <_malloc_r+0x32>
 80038e8:	4634      	mov	r4, r6
 80038ea:	6876      	ldr	r6, [r6, #4]
 80038ec:	e7b9      	b.n	8003862 <_malloc_r+0x46>
 80038ee:	230c      	movs	r3, #12
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4638      	mov	r0, r7
 80038f4:	f000 fba4 	bl	8004040 <__malloc_unlock>
 80038f8:	e7a1      	b.n	800383e <_malloc_r+0x22>
 80038fa:	6025      	str	r5, [r4, #0]
 80038fc:	e7de      	b.n	80038bc <_malloc_r+0xa0>
 80038fe:	bf00      	nop
 8003900:	20000558 	.word	0x20000558

08003904 <__sfputc_r>:
 8003904:	6893      	ldr	r3, [r2, #8]
 8003906:	3b01      	subs	r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	b410      	push	{r4}
 800390c:	6093      	str	r3, [r2, #8]
 800390e:	da08      	bge.n	8003922 <__sfputc_r+0x1e>
 8003910:	6994      	ldr	r4, [r2, #24]
 8003912:	42a3      	cmp	r3, r4
 8003914:	db01      	blt.n	800391a <__sfputc_r+0x16>
 8003916:	290a      	cmp	r1, #10
 8003918:	d103      	bne.n	8003922 <__sfputc_r+0x1e>
 800391a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800391e:	f7ff bc31 	b.w	8003184 <__swbuf_r>
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	1c58      	adds	r0, r3, #1
 8003926:	6010      	str	r0, [r2, #0]
 8003928:	7019      	strb	r1, [r3, #0]
 800392a:	4608      	mov	r0, r1
 800392c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003930:	4770      	bx	lr

08003932 <__sfputs_r>:
 8003932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003934:	4606      	mov	r6, r0
 8003936:	460f      	mov	r7, r1
 8003938:	4614      	mov	r4, r2
 800393a:	18d5      	adds	r5, r2, r3
 800393c:	42ac      	cmp	r4, r5
 800393e:	d101      	bne.n	8003944 <__sfputs_r+0x12>
 8003940:	2000      	movs	r0, #0
 8003942:	e007      	b.n	8003954 <__sfputs_r+0x22>
 8003944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003948:	463a      	mov	r2, r7
 800394a:	4630      	mov	r0, r6
 800394c:	f7ff ffda 	bl	8003904 <__sfputc_r>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d1f3      	bne.n	800393c <__sfputs_r+0xa>
 8003954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003958 <_vfiprintf_r>:
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	460d      	mov	r5, r1
 800395e:	b09d      	sub	sp, #116	; 0x74
 8003960:	4614      	mov	r4, r2
 8003962:	4698      	mov	r8, r3
 8003964:	4606      	mov	r6, r0
 8003966:	b118      	cbz	r0, 8003970 <_vfiprintf_r+0x18>
 8003968:	6983      	ldr	r3, [r0, #24]
 800396a:	b90b      	cbnz	r3, 8003970 <_vfiprintf_r+0x18>
 800396c:	f7ff fde4 	bl	8003538 <__sinit>
 8003970:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <_vfiprintf_r+0x240>)
 8003972:	429d      	cmp	r5, r3
 8003974:	d11b      	bne.n	80039ae <_vfiprintf_r+0x56>
 8003976:	6875      	ldr	r5, [r6, #4]
 8003978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800397a:	07d9      	lsls	r1, r3, #31
 800397c:	d405      	bmi.n	800398a <_vfiprintf_r+0x32>
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	059a      	lsls	r2, r3, #22
 8003982:	d402      	bmi.n	800398a <_vfiprintf_r+0x32>
 8003984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003986:	f7ff fe75 	bl	8003674 <__retarget_lock_acquire_recursive>
 800398a:	89ab      	ldrh	r3, [r5, #12]
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	d501      	bpl.n	8003994 <_vfiprintf_r+0x3c>
 8003990:	692b      	ldr	r3, [r5, #16]
 8003992:	b9eb      	cbnz	r3, 80039d0 <_vfiprintf_r+0x78>
 8003994:	4629      	mov	r1, r5
 8003996:	4630      	mov	r0, r6
 8003998:	f7ff fc46 	bl	8003228 <__swsetup_r>
 800399c:	b1c0      	cbz	r0, 80039d0 <_vfiprintf_r+0x78>
 800399e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039a0:	07dc      	lsls	r4, r3, #31
 80039a2:	d50e      	bpl.n	80039c2 <_vfiprintf_r+0x6a>
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	b01d      	add	sp, #116	; 0x74
 80039aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ae:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <_vfiprintf_r+0x244>)
 80039b0:	429d      	cmp	r5, r3
 80039b2:	d101      	bne.n	80039b8 <_vfiprintf_r+0x60>
 80039b4:	68b5      	ldr	r5, [r6, #8]
 80039b6:	e7df      	b.n	8003978 <_vfiprintf_r+0x20>
 80039b8:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <_vfiprintf_r+0x248>)
 80039ba:	429d      	cmp	r5, r3
 80039bc:	bf08      	it	eq
 80039be:	68f5      	ldreq	r5, [r6, #12]
 80039c0:	e7da      	b.n	8003978 <_vfiprintf_r+0x20>
 80039c2:	89ab      	ldrh	r3, [r5, #12]
 80039c4:	0598      	lsls	r0, r3, #22
 80039c6:	d4ed      	bmi.n	80039a4 <_vfiprintf_r+0x4c>
 80039c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039ca:	f7ff fe54 	bl	8003676 <__retarget_lock_release_recursive>
 80039ce:	e7e9      	b.n	80039a4 <_vfiprintf_r+0x4c>
 80039d0:	2300      	movs	r3, #0
 80039d2:	9309      	str	r3, [sp, #36]	; 0x24
 80039d4:	2320      	movs	r3, #32
 80039d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039da:	f8cd 800c 	str.w	r8, [sp, #12]
 80039de:	2330      	movs	r3, #48	; 0x30
 80039e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ba4 <_vfiprintf_r+0x24c>
 80039e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039e8:	f04f 0901 	mov.w	r9, #1
 80039ec:	4623      	mov	r3, r4
 80039ee:	469a      	mov	sl, r3
 80039f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039f4:	b10a      	cbz	r2, 80039fa <_vfiprintf_r+0xa2>
 80039f6:	2a25      	cmp	r2, #37	; 0x25
 80039f8:	d1f9      	bne.n	80039ee <_vfiprintf_r+0x96>
 80039fa:	ebba 0b04 	subs.w	fp, sl, r4
 80039fe:	d00b      	beq.n	8003a18 <_vfiprintf_r+0xc0>
 8003a00:	465b      	mov	r3, fp
 8003a02:	4622      	mov	r2, r4
 8003a04:	4629      	mov	r1, r5
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7ff ff93 	bl	8003932 <__sfputs_r>
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	f000 80aa 	beq.w	8003b66 <_vfiprintf_r+0x20e>
 8003a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a14:	445a      	add	r2, fp
 8003a16:	9209      	str	r2, [sp, #36]	; 0x24
 8003a18:	f89a 3000 	ldrb.w	r3, [sl]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a2 	beq.w	8003b66 <_vfiprintf_r+0x20e>
 8003a22:	2300      	movs	r3, #0
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a2c:	f10a 0a01 	add.w	sl, sl, #1
 8003a30:	9304      	str	r3, [sp, #16]
 8003a32:	9307      	str	r3, [sp, #28]
 8003a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a38:	931a      	str	r3, [sp, #104]	; 0x68
 8003a3a:	4654      	mov	r4, sl
 8003a3c:	2205      	movs	r2, #5
 8003a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a42:	4858      	ldr	r0, [pc, #352]	; (8003ba4 <_vfiprintf_r+0x24c>)
 8003a44:	f7fc fbc4 	bl	80001d0 <memchr>
 8003a48:	9a04      	ldr	r2, [sp, #16]
 8003a4a:	b9d8      	cbnz	r0, 8003a84 <_vfiprintf_r+0x12c>
 8003a4c:	06d1      	lsls	r1, r2, #27
 8003a4e:	bf44      	itt	mi
 8003a50:	2320      	movmi	r3, #32
 8003a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a56:	0713      	lsls	r3, r2, #28
 8003a58:	bf44      	itt	mi
 8003a5a:	232b      	movmi	r3, #43	; 0x2b
 8003a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a60:	f89a 3000 	ldrb.w	r3, [sl]
 8003a64:	2b2a      	cmp	r3, #42	; 0x2a
 8003a66:	d015      	beq.n	8003a94 <_vfiprintf_r+0x13c>
 8003a68:	9a07      	ldr	r2, [sp, #28]
 8003a6a:	4654      	mov	r4, sl
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f04f 0c0a 	mov.w	ip, #10
 8003a72:	4621      	mov	r1, r4
 8003a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a78:	3b30      	subs	r3, #48	; 0x30
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	d94e      	bls.n	8003b1c <_vfiprintf_r+0x1c4>
 8003a7e:	b1b0      	cbz	r0, 8003aae <_vfiprintf_r+0x156>
 8003a80:	9207      	str	r2, [sp, #28]
 8003a82:	e014      	b.n	8003aae <_vfiprintf_r+0x156>
 8003a84:	eba0 0308 	sub.w	r3, r0, r8
 8003a88:	fa09 f303 	lsl.w	r3, r9, r3
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	9304      	str	r3, [sp, #16]
 8003a90:	46a2      	mov	sl, r4
 8003a92:	e7d2      	b.n	8003a3a <_vfiprintf_r+0xe2>
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	1d19      	adds	r1, r3, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	9103      	str	r1, [sp, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bfbb      	ittet	lt
 8003aa0:	425b      	neglt	r3, r3
 8003aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8003aa6:	9307      	strge	r3, [sp, #28]
 8003aa8:	9307      	strlt	r3, [sp, #28]
 8003aaa:	bfb8      	it	lt
 8003aac:	9204      	strlt	r2, [sp, #16]
 8003aae:	7823      	ldrb	r3, [r4, #0]
 8003ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab2:	d10c      	bne.n	8003ace <_vfiprintf_r+0x176>
 8003ab4:	7863      	ldrb	r3, [r4, #1]
 8003ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab8:	d135      	bne.n	8003b26 <_vfiprintf_r+0x1ce>
 8003aba:	9b03      	ldr	r3, [sp, #12]
 8003abc:	1d1a      	adds	r2, r3, #4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	9203      	str	r2, [sp, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bfb8      	it	lt
 8003ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aca:	3402      	adds	r4, #2
 8003acc:	9305      	str	r3, [sp, #20]
 8003ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003bb4 <_vfiprintf_r+0x25c>
 8003ad2:	7821      	ldrb	r1, [r4, #0]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	4650      	mov	r0, sl
 8003ad8:	f7fc fb7a 	bl	80001d0 <memchr>
 8003adc:	b140      	cbz	r0, 8003af0 <_vfiprintf_r+0x198>
 8003ade:	2340      	movs	r3, #64	; 0x40
 8003ae0:	eba0 000a 	sub.w	r0, r0, sl
 8003ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8003ae8:	9b04      	ldr	r3, [sp, #16]
 8003aea:	4303      	orrs	r3, r0
 8003aec:	3401      	adds	r4, #1
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af4:	482c      	ldr	r0, [pc, #176]	; (8003ba8 <_vfiprintf_r+0x250>)
 8003af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003afa:	2206      	movs	r2, #6
 8003afc:	f7fc fb68 	bl	80001d0 <memchr>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d03f      	beq.n	8003b84 <_vfiprintf_r+0x22c>
 8003b04:	4b29      	ldr	r3, [pc, #164]	; (8003bac <_vfiprintf_r+0x254>)
 8003b06:	bb1b      	cbnz	r3, 8003b50 <_vfiprintf_r+0x1f8>
 8003b08:	9b03      	ldr	r3, [sp, #12]
 8003b0a:	3307      	adds	r3, #7
 8003b0c:	f023 0307 	bic.w	r3, r3, #7
 8003b10:	3308      	adds	r3, #8
 8003b12:	9303      	str	r3, [sp, #12]
 8003b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b16:	443b      	add	r3, r7
 8003b18:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1a:	e767      	b.n	80039ec <_vfiprintf_r+0x94>
 8003b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b20:	460c      	mov	r4, r1
 8003b22:	2001      	movs	r0, #1
 8003b24:	e7a5      	b.n	8003a72 <_vfiprintf_r+0x11a>
 8003b26:	2300      	movs	r3, #0
 8003b28:	3401      	adds	r4, #1
 8003b2a:	9305      	str	r3, [sp, #20]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f04f 0c0a 	mov.w	ip, #10
 8003b32:	4620      	mov	r0, r4
 8003b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b38:	3a30      	subs	r2, #48	; 0x30
 8003b3a:	2a09      	cmp	r2, #9
 8003b3c:	d903      	bls.n	8003b46 <_vfiprintf_r+0x1ee>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0c5      	beq.n	8003ace <_vfiprintf_r+0x176>
 8003b42:	9105      	str	r1, [sp, #20]
 8003b44:	e7c3      	b.n	8003ace <_vfiprintf_r+0x176>
 8003b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e7f0      	b.n	8003b32 <_vfiprintf_r+0x1da>
 8003b50:	ab03      	add	r3, sp, #12
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	462a      	mov	r2, r5
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <_vfiprintf_r+0x258>)
 8003b58:	a904      	add	r1, sp, #16
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f3af 8000 	nop.w
 8003b60:	4607      	mov	r7, r0
 8003b62:	1c78      	adds	r0, r7, #1
 8003b64:	d1d6      	bne.n	8003b14 <_vfiprintf_r+0x1bc>
 8003b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b68:	07d9      	lsls	r1, r3, #31
 8003b6a:	d405      	bmi.n	8003b78 <_vfiprintf_r+0x220>
 8003b6c:	89ab      	ldrh	r3, [r5, #12]
 8003b6e:	059a      	lsls	r2, r3, #22
 8003b70:	d402      	bmi.n	8003b78 <_vfiprintf_r+0x220>
 8003b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b74:	f7ff fd7f 	bl	8003676 <__retarget_lock_release_recursive>
 8003b78:	89ab      	ldrh	r3, [r5, #12]
 8003b7a:	065b      	lsls	r3, r3, #25
 8003b7c:	f53f af12 	bmi.w	80039a4 <_vfiprintf_r+0x4c>
 8003b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b82:	e711      	b.n	80039a8 <_vfiprintf_r+0x50>
 8003b84:	ab03      	add	r3, sp, #12
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <_vfiprintf_r+0x258>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f000 f880 	bl	8003c94 <_printf_i>
 8003b94:	e7e4      	b.n	8003b60 <_vfiprintf_r+0x208>
 8003b96:	bf00      	nop
 8003b98:	080042f8 	.word	0x080042f8
 8003b9c:	08004318 	.word	0x08004318
 8003ba0:	080042d8 	.word	0x080042d8
 8003ba4:	08004338 	.word	0x08004338
 8003ba8:	08004342 	.word	0x08004342
 8003bac:	00000000 	.word	0x00000000
 8003bb0:	08003933 	.word	0x08003933
 8003bb4:	0800433e 	.word	0x0800433e

08003bb8 <_printf_common>:
 8003bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	4699      	mov	r9, r3
 8003bc0:	688a      	ldr	r2, [r1, #8]
 8003bc2:	690b      	ldr	r3, [r1, #16]
 8003bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bfb8      	it	lt
 8003bcc:	4613      	movlt	r3, r2
 8003bce:	6033      	str	r3, [r6, #0]
 8003bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bd4:	4607      	mov	r7, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	b10a      	cbz	r2, 8003bde <_printf_common+0x26>
 8003bda:	3301      	adds	r3, #1
 8003bdc:	6033      	str	r3, [r6, #0]
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	0699      	lsls	r1, r3, #26
 8003be2:	bf42      	ittt	mi
 8003be4:	6833      	ldrmi	r3, [r6, #0]
 8003be6:	3302      	addmi	r3, #2
 8003be8:	6033      	strmi	r3, [r6, #0]
 8003bea:	6825      	ldr	r5, [r4, #0]
 8003bec:	f015 0506 	ands.w	r5, r5, #6
 8003bf0:	d106      	bne.n	8003c00 <_printf_common+0x48>
 8003bf2:	f104 0a19 	add.w	sl, r4, #25
 8003bf6:	68e3      	ldr	r3, [r4, #12]
 8003bf8:	6832      	ldr	r2, [r6, #0]
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	42ab      	cmp	r3, r5
 8003bfe:	dc26      	bgt.n	8003c4e <_printf_common+0x96>
 8003c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c04:	1e13      	subs	r3, r2, #0
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	bf18      	it	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	0692      	lsls	r2, r2, #26
 8003c0e:	d42b      	bmi.n	8003c68 <_printf_common+0xb0>
 8003c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c14:	4649      	mov	r1, r9
 8003c16:	4638      	mov	r0, r7
 8003c18:	47c0      	blx	r8
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d01e      	beq.n	8003c5c <_printf_common+0xa4>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	68e5      	ldr	r5, [r4, #12]
 8003c22:	6832      	ldr	r2, [r6, #0]
 8003c24:	f003 0306 	and.w	r3, r3, #6
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	bf08      	it	eq
 8003c2c:	1aad      	subeq	r5, r5, r2
 8003c2e:	68a3      	ldr	r3, [r4, #8]
 8003c30:	6922      	ldr	r2, [r4, #16]
 8003c32:	bf0c      	ite	eq
 8003c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c38:	2500      	movne	r5, #0
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	bfc4      	itt	gt
 8003c3e:	1a9b      	subgt	r3, r3, r2
 8003c40:	18ed      	addgt	r5, r5, r3
 8003c42:	2600      	movs	r6, #0
 8003c44:	341a      	adds	r4, #26
 8003c46:	42b5      	cmp	r5, r6
 8003c48:	d11a      	bne.n	8003c80 <_printf_common+0xc8>
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e008      	b.n	8003c60 <_printf_common+0xa8>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4652      	mov	r2, sl
 8003c52:	4649      	mov	r1, r9
 8003c54:	4638      	mov	r0, r7
 8003c56:	47c0      	blx	r8
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d103      	bne.n	8003c64 <_printf_common+0xac>
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c64:	3501      	adds	r5, #1
 8003c66:	e7c6      	b.n	8003bf6 <_printf_common+0x3e>
 8003c68:	18e1      	adds	r1, r4, r3
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	2030      	movs	r0, #48	; 0x30
 8003c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c72:	4422      	add	r2, r4
 8003c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	e7c7      	b.n	8003c10 <_printf_common+0x58>
 8003c80:	2301      	movs	r3, #1
 8003c82:	4622      	mov	r2, r4
 8003c84:	4649      	mov	r1, r9
 8003c86:	4638      	mov	r0, r7
 8003c88:	47c0      	blx	r8
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d0e6      	beq.n	8003c5c <_printf_common+0xa4>
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7d9      	b.n	8003c46 <_printf_common+0x8e>
	...

08003c94 <_printf_i>:
 8003c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	7e0f      	ldrb	r7, [r1, #24]
 8003c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c9c:	2f78      	cmp	r7, #120	; 0x78
 8003c9e:	4691      	mov	r9, r2
 8003ca0:	4680      	mov	r8, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	469a      	mov	sl, r3
 8003ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003caa:	d807      	bhi.n	8003cbc <_printf_i+0x28>
 8003cac:	2f62      	cmp	r7, #98	; 0x62
 8003cae:	d80a      	bhi.n	8003cc6 <_printf_i+0x32>
 8003cb0:	2f00      	cmp	r7, #0
 8003cb2:	f000 80d8 	beq.w	8003e66 <_printf_i+0x1d2>
 8003cb6:	2f58      	cmp	r7, #88	; 0x58
 8003cb8:	f000 80a3 	beq.w	8003e02 <_printf_i+0x16e>
 8003cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cc4:	e03a      	b.n	8003d3c <_printf_i+0xa8>
 8003cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cca:	2b15      	cmp	r3, #21
 8003ccc:	d8f6      	bhi.n	8003cbc <_printf_i+0x28>
 8003cce:	a101      	add	r1, pc, #4	; (adr r1, 8003cd4 <_printf_i+0x40>)
 8003cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cd4:	08003d2d 	.word	0x08003d2d
 8003cd8:	08003d41 	.word	0x08003d41
 8003cdc:	08003cbd 	.word	0x08003cbd
 8003ce0:	08003cbd 	.word	0x08003cbd
 8003ce4:	08003cbd 	.word	0x08003cbd
 8003ce8:	08003cbd 	.word	0x08003cbd
 8003cec:	08003d41 	.word	0x08003d41
 8003cf0:	08003cbd 	.word	0x08003cbd
 8003cf4:	08003cbd 	.word	0x08003cbd
 8003cf8:	08003cbd 	.word	0x08003cbd
 8003cfc:	08003cbd 	.word	0x08003cbd
 8003d00:	08003e4d 	.word	0x08003e4d
 8003d04:	08003d71 	.word	0x08003d71
 8003d08:	08003e2f 	.word	0x08003e2f
 8003d0c:	08003cbd 	.word	0x08003cbd
 8003d10:	08003cbd 	.word	0x08003cbd
 8003d14:	08003e6f 	.word	0x08003e6f
 8003d18:	08003cbd 	.word	0x08003cbd
 8003d1c:	08003d71 	.word	0x08003d71
 8003d20:	08003cbd 	.word	0x08003cbd
 8003d24:	08003cbd 	.word	0x08003cbd
 8003d28:	08003e37 	.word	0x08003e37
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	602a      	str	r2, [r5, #0]
 8003d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0a3      	b.n	8003e88 <_printf_i+0x1f4>
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	6829      	ldr	r1, [r5, #0]
 8003d44:	0606      	lsls	r6, r0, #24
 8003d46:	f101 0304 	add.w	r3, r1, #4
 8003d4a:	d50a      	bpl.n	8003d62 <_printf_i+0xce>
 8003d4c:	680e      	ldr	r6, [r1, #0]
 8003d4e:	602b      	str	r3, [r5, #0]
 8003d50:	2e00      	cmp	r6, #0
 8003d52:	da03      	bge.n	8003d5c <_printf_i+0xc8>
 8003d54:	232d      	movs	r3, #45	; 0x2d
 8003d56:	4276      	negs	r6, r6
 8003d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d5c:	485e      	ldr	r0, [pc, #376]	; (8003ed8 <_printf_i+0x244>)
 8003d5e:	230a      	movs	r3, #10
 8003d60:	e019      	b.n	8003d96 <_printf_i+0x102>
 8003d62:	680e      	ldr	r6, [r1, #0]
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d6a:	bf18      	it	ne
 8003d6c:	b236      	sxthne	r6, r6
 8003d6e:	e7ef      	b.n	8003d50 <_printf_i+0xbc>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	6820      	ldr	r0, [r4, #0]
 8003d74:	1d19      	adds	r1, r3, #4
 8003d76:	6029      	str	r1, [r5, #0]
 8003d78:	0601      	lsls	r1, r0, #24
 8003d7a:	d501      	bpl.n	8003d80 <_printf_i+0xec>
 8003d7c:	681e      	ldr	r6, [r3, #0]
 8003d7e:	e002      	b.n	8003d86 <_printf_i+0xf2>
 8003d80:	0646      	lsls	r6, r0, #25
 8003d82:	d5fb      	bpl.n	8003d7c <_printf_i+0xe8>
 8003d84:	881e      	ldrh	r6, [r3, #0]
 8003d86:	4854      	ldr	r0, [pc, #336]	; (8003ed8 <_printf_i+0x244>)
 8003d88:	2f6f      	cmp	r7, #111	; 0x6f
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2308      	moveq	r3, #8
 8003d8e:	230a      	movne	r3, #10
 8003d90:	2100      	movs	r1, #0
 8003d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d96:	6865      	ldr	r5, [r4, #4]
 8003d98:	60a5      	str	r5, [r4, #8]
 8003d9a:	2d00      	cmp	r5, #0
 8003d9c:	bfa2      	ittt	ge
 8003d9e:	6821      	ldrge	r1, [r4, #0]
 8003da0:	f021 0104 	bicge.w	r1, r1, #4
 8003da4:	6021      	strge	r1, [r4, #0]
 8003da6:	b90e      	cbnz	r6, 8003dac <_printf_i+0x118>
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	d04d      	beq.n	8003e48 <_printf_i+0x1b4>
 8003dac:	4615      	mov	r5, r2
 8003dae:	fbb6 f1f3 	udiv	r1, r6, r3
 8003db2:	fb03 6711 	mls	r7, r3, r1, r6
 8003db6:	5dc7      	ldrb	r7, [r0, r7]
 8003db8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dbc:	4637      	mov	r7, r6
 8003dbe:	42bb      	cmp	r3, r7
 8003dc0:	460e      	mov	r6, r1
 8003dc2:	d9f4      	bls.n	8003dae <_printf_i+0x11a>
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d10b      	bne.n	8003de0 <_printf_i+0x14c>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	07de      	lsls	r6, r3, #31
 8003dcc:	d508      	bpl.n	8003de0 <_printf_i+0x14c>
 8003dce:	6923      	ldr	r3, [r4, #16]
 8003dd0:	6861      	ldr	r1, [r4, #4]
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	bfde      	ittt	le
 8003dd6:	2330      	movle	r3, #48	; 0x30
 8003dd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003de0:	1b52      	subs	r2, r2, r5
 8003de2:	6122      	str	r2, [r4, #16]
 8003de4:	f8cd a000 	str.w	sl, [sp]
 8003de8:	464b      	mov	r3, r9
 8003dea:	aa03      	add	r2, sp, #12
 8003dec:	4621      	mov	r1, r4
 8003dee:	4640      	mov	r0, r8
 8003df0:	f7ff fee2 	bl	8003bb8 <_printf_common>
 8003df4:	3001      	adds	r0, #1
 8003df6:	d14c      	bne.n	8003e92 <_printf_i+0x1fe>
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	b004      	add	sp, #16
 8003dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e02:	4835      	ldr	r0, [pc, #212]	; (8003ed8 <_printf_i+0x244>)
 8003e04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e08:	6829      	ldr	r1, [r5, #0]
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e10:	6029      	str	r1, [r5, #0]
 8003e12:	061d      	lsls	r5, r3, #24
 8003e14:	d514      	bpl.n	8003e40 <_printf_i+0x1ac>
 8003e16:	07df      	lsls	r7, r3, #31
 8003e18:	bf44      	itt	mi
 8003e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003e1e:	6023      	strmi	r3, [r4, #0]
 8003e20:	b91e      	cbnz	r6, 8003e2a <_printf_i+0x196>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	f023 0320 	bic.w	r3, r3, #32
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	e7b0      	b.n	8003d90 <_printf_i+0xfc>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	f043 0320 	orr.w	r3, r3, #32
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	2378      	movs	r3, #120	; 0x78
 8003e38:	4828      	ldr	r0, [pc, #160]	; (8003edc <_printf_i+0x248>)
 8003e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e3e:	e7e3      	b.n	8003e08 <_printf_i+0x174>
 8003e40:	0659      	lsls	r1, r3, #25
 8003e42:	bf48      	it	mi
 8003e44:	b2b6      	uxthmi	r6, r6
 8003e46:	e7e6      	b.n	8003e16 <_printf_i+0x182>
 8003e48:	4615      	mov	r5, r2
 8003e4a:	e7bb      	b.n	8003dc4 <_printf_i+0x130>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	6826      	ldr	r6, [r4, #0]
 8003e50:	6961      	ldr	r1, [r4, #20]
 8003e52:	1d18      	adds	r0, r3, #4
 8003e54:	6028      	str	r0, [r5, #0]
 8003e56:	0635      	lsls	r5, r6, #24
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	d501      	bpl.n	8003e60 <_printf_i+0x1cc>
 8003e5c:	6019      	str	r1, [r3, #0]
 8003e5e:	e002      	b.n	8003e66 <_printf_i+0x1d2>
 8003e60:	0670      	lsls	r0, r6, #25
 8003e62:	d5fb      	bpl.n	8003e5c <_printf_i+0x1c8>
 8003e64:	8019      	strh	r1, [r3, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	6123      	str	r3, [r4, #16]
 8003e6a:	4615      	mov	r5, r2
 8003e6c:	e7ba      	b.n	8003de4 <_printf_i+0x150>
 8003e6e:	682b      	ldr	r3, [r5, #0]
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	602a      	str	r2, [r5, #0]
 8003e74:	681d      	ldr	r5, [r3, #0]
 8003e76:	6862      	ldr	r2, [r4, #4]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7fc f9a8 	bl	80001d0 <memchr>
 8003e80:	b108      	cbz	r0, 8003e86 <_printf_i+0x1f2>
 8003e82:	1b40      	subs	r0, r0, r5
 8003e84:	6060      	str	r0, [r4, #4]
 8003e86:	6863      	ldr	r3, [r4, #4]
 8003e88:	6123      	str	r3, [r4, #16]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e90:	e7a8      	b.n	8003de4 <_printf_i+0x150>
 8003e92:	6923      	ldr	r3, [r4, #16]
 8003e94:	462a      	mov	r2, r5
 8003e96:	4649      	mov	r1, r9
 8003e98:	4640      	mov	r0, r8
 8003e9a:	47d0      	blx	sl
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d0ab      	beq.n	8003df8 <_printf_i+0x164>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	079b      	lsls	r3, r3, #30
 8003ea4:	d413      	bmi.n	8003ece <_printf_i+0x23a>
 8003ea6:	68e0      	ldr	r0, [r4, #12]
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	4298      	cmp	r0, r3
 8003eac:	bfb8      	it	lt
 8003eae:	4618      	movlt	r0, r3
 8003eb0:	e7a4      	b.n	8003dfc <_printf_i+0x168>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4632      	mov	r2, r6
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	4640      	mov	r0, r8
 8003eba:	47d0      	blx	sl
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d09b      	beq.n	8003df8 <_printf_i+0x164>
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	68e3      	ldr	r3, [r4, #12]
 8003ec4:	9903      	ldr	r1, [sp, #12]
 8003ec6:	1a5b      	subs	r3, r3, r1
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	dcf2      	bgt.n	8003eb2 <_printf_i+0x21e>
 8003ecc:	e7eb      	b.n	8003ea6 <_printf_i+0x212>
 8003ece:	2500      	movs	r5, #0
 8003ed0:	f104 0619 	add.w	r6, r4, #25
 8003ed4:	e7f5      	b.n	8003ec2 <_printf_i+0x22e>
 8003ed6:	bf00      	nop
 8003ed8:	08004349 	.word	0x08004349
 8003edc:	0800435a 	.word	0x0800435a

08003ee0 <_sbrk_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4d06      	ldr	r5, [pc, #24]	; (8003efc <_sbrk_r+0x1c>)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	602b      	str	r3, [r5, #0]
 8003eec:	f7fd f904 	bl	80010f8 <_sbrk>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_sbrk_r+0x1a>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_sbrk_r+0x1a>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	20000560 	.word	0x20000560

08003f00 <__sread>:
 8003f00:	b510      	push	{r4, lr}
 8003f02:	460c      	mov	r4, r1
 8003f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f08:	f000 f8a0 	bl	800404c <_read_r>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	bfab      	itete	ge
 8003f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f12:	89a3      	ldrhlt	r3, [r4, #12]
 8003f14:	181b      	addge	r3, r3, r0
 8003f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f1a:	bfac      	ite	ge
 8003f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f1e:	81a3      	strhlt	r3, [r4, #12]
 8003f20:	bd10      	pop	{r4, pc}

08003f22 <__swrite>:
 8003f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f26:	461f      	mov	r7, r3
 8003f28:	898b      	ldrh	r3, [r1, #12]
 8003f2a:	05db      	lsls	r3, r3, #23
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	4616      	mov	r6, r2
 8003f32:	d505      	bpl.n	8003f40 <__swrite+0x1e>
 8003f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f38:	2302      	movs	r3, #2
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f000 f868 	bl	8004010 <_lseek_r>
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f4a:	81a3      	strh	r3, [r4, #12]
 8003f4c:	4632      	mov	r2, r6
 8003f4e:	463b      	mov	r3, r7
 8003f50:	4628      	mov	r0, r5
 8003f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f56:	f000 b817 	b.w	8003f88 <_write_r>

08003f5a <__sseek>:
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f62:	f000 f855 	bl	8004010 <_lseek_r>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	bf15      	itete	ne
 8003f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f76:	81a3      	strheq	r3, [r4, #12]
 8003f78:	bf18      	it	ne
 8003f7a:	81a3      	strhne	r3, [r4, #12]
 8003f7c:	bd10      	pop	{r4, pc}

08003f7e <__sclose>:
 8003f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f82:	f000 b813 	b.w	8003fac <_close_r>
	...

08003f88 <_write_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d07      	ldr	r5, [pc, #28]	; (8003fa8 <_write_r+0x20>)
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	4608      	mov	r0, r1
 8003f90:	4611      	mov	r1, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	602a      	str	r2, [r5, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f7fd f85d 	bl	8001056 <_write>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_write_r+0x1e>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_write_r+0x1e>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20000560 	.word	0x20000560

08003fac <_close_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d06      	ldr	r5, [pc, #24]	; (8003fc8 <_close_r+0x1c>)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	f7fd f869 	bl	800108e <_close>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_close_r+0x1a>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_close_r+0x1a>
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	20000560 	.word	0x20000560

08003fcc <_fstat_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d07      	ldr	r5, [pc, #28]	; (8003fec <_fstat_r+0x20>)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	602b      	str	r3, [r5, #0]
 8003fda:	f7fd f864 	bl	80010a6 <_fstat>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	d102      	bne.n	8003fe8 <_fstat_r+0x1c>
 8003fe2:	682b      	ldr	r3, [r5, #0]
 8003fe4:	b103      	cbz	r3, 8003fe8 <_fstat_r+0x1c>
 8003fe6:	6023      	str	r3, [r4, #0]
 8003fe8:	bd38      	pop	{r3, r4, r5, pc}
 8003fea:	bf00      	nop
 8003fec:	20000560 	.word	0x20000560

08003ff0 <_isatty_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4d06      	ldr	r5, [pc, #24]	; (800400c <_isatty_r+0x1c>)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	602b      	str	r3, [r5, #0]
 8003ffc:	f7fd f863 	bl	80010c6 <_isatty>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_isatty_r+0x1a>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	b103      	cbz	r3, 800400a <_isatty_r+0x1a>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	20000560 	.word	0x20000560

08004010 <_lseek_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4d07      	ldr	r5, [pc, #28]	; (8004030 <_lseek_r+0x20>)
 8004014:	4604      	mov	r4, r0
 8004016:	4608      	mov	r0, r1
 8004018:	4611      	mov	r1, r2
 800401a:	2200      	movs	r2, #0
 800401c:	602a      	str	r2, [r5, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	f7fd f85c 	bl	80010dc <_lseek>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_lseek_r+0x1e>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	b103      	cbz	r3, 800402e <_lseek_r+0x1e>
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20000560 	.word	0x20000560

08004034 <__malloc_lock>:
 8004034:	4801      	ldr	r0, [pc, #4]	; (800403c <__malloc_lock+0x8>)
 8004036:	f7ff bb1d 	b.w	8003674 <__retarget_lock_acquire_recursive>
 800403a:	bf00      	nop
 800403c:	20000554 	.word	0x20000554

08004040 <__malloc_unlock>:
 8004040:	4801      	ldr	r0, [pc, #4]	; (8004048 <__malloc_unlock+0x8>)
 8004042:	f7ff bb18 	b.w	8003676 <__retarget_lock_release_recursive>
 8004046:	bf00      	nop
 8004048:	20000554 	.word	0x20000554

0800404c <_read_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4d07      	ldr	r5, [pc, #28]	; (800406c <_read_r+0x20>)
 8004050:	4604      	mov	r4, r0
 8004052:	4608      	mov	r0, r1
 8004054:	4611      	mov	r1, r2
 8004056:	2200      	movs	r2, #0
 8004058:	602a      	str	r2, [r5, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	f7fc ffde 	bl	800101c <_read>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d102      	bne.n	800406a <_read_r+0x1e>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	b103      	cbz	r3, 800406a <_read_r+0x1e>
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	20000560 	.word	0x20000560

08004070 <_init>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr

0800407c <_fini>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr
