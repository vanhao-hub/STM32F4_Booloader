
STM32F4-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006874  08040188  08040188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080469fc  080469fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08046b3c  08046b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08046b44  08046b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08046b48  08046b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005ec  20000000  08046b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000205ec  2**0
                  CONTENTS
  8 .bss          0000e464  200005ec  200005ec  000205ec  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000ea50  2000ea50  000205ec  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY
 11 .debug_info   000145ee  00000000  00000000  0002061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003a35  00000000  00000000  00034c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000a940  00000000  00000000  0003863f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00042f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  00043c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bd2  00000000  00000000  00044ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fd7  00000000  00000000  00067aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca8c2  00000000  00000000  00080aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0014b363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027bc  00000000  00000000  0014b434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040188 <__do_global_dtors_aux>:
 8040188:	b510      	push	{r4, lr}
 804018a:	4c05      	ldr	r4, [pc, #20]	; (80401a0 <__do_global_dtors_aux+0x18>)
 804018c:	7823      	ldrb	r3, [r4, #0]
 804018e:	b933      	cbnz	r3, 804019e <__do_global_dtors_aux+0x16>
 8040190:	4b04      	ldr	r3, [pc, #16]	; (80401a4 <__do_global_dtors_aux+0x1c>)
 8040192:	b113      	cbz	r3, 804019a <__do_global_dtors_aux+0x12>
 8040194:	4804      	ldr	r0, [pc, #16]	; (80401a8 <__do_global_dtors_aux+0x20>)
 8040196:	f3af 8000 	nop.w
 804019a:	2301      	movs	r3, #1
 804019c:	7023      	strb	r3, [r4, #0]
 804019e:	bd10      	pop	{r4, pc}
 80401a0:	200005ec 	.word	0x200005ec
 80401a4:	00000000 	.word	0x00000000
 80401a8:	080469e4 	.word	0x080469e4

080401ac <frame_dummy>:
 80401ac:	b508      	push	{r3, lr}
 80401ae:	4b03      	ldr	r3, [pc, #12]	; (80401bc <frame_dummy+0x10>)
 80401b0:	b11b      	cbz	r3, 80401ba <frame_dummy+0xe>
 80401b2:	4903      	ldr	r1, [pc, #12]	; (80401c0 <frame_dummy+0x14>)
 80401b4:	4803      	ldr	r0, [pc, #12]	; (80401c4 <frame_dummy+0x18>)
 80401b6:	f3af 8000 	nop.w
 80401ba:	bd08      	pop	{r3, pc}
 80401bc:	00000000 	.word	0x00000000
 80401c0:	200005f0 	.word	0x200005f0
 80401c4:	080469e4 	.word	0x080469e4

080401c8 <__aeabi_uldivmod>:
 80401c8:	b953      	cbnz	r3, 80401e0 <__aeabi_uldivmod+0x18>
 80401ca:	b94a      	cbnz	r2, 80401e0 <__aeabi_uldivmod+0x18>
 80401cc:	2900      	cmp	r1, #0
 80401ce:	bf08      	it	eq
 80401d0:	2800      	cmpeq	r0, #0
 80401d2:	bf1c      	itt	ne
 80401d4:	f04f 31ff 	movne.w	r1, #4294967295
 80401d8:	f04f 30ff 	movne.w	r0, #4294967295
 80401dc:	f000 b974 	b.w	80404c8 <__aeabi_idiv0>
 80401e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80401e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80401e8:	f000 f806 	bl	80401f8 <__udivmoddi4>
 80401ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80401f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80401f4:	b004      	add	sp, #16
 80401f6:	4770      	bx	lr

080401f8 <__udivmoddi4>:
 80401f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80401fc:	9d08      	ldr	r5, [sp, #32]
 80401fe:	4604      	mov	r4, r0
 8040200:	468e      	mov	lr, r1
 8040202:	2b00      	cmp	r3, #0
 8040204:	d14d      	bne.n	80402a2 <__udivmoddi4+0xaa>
 8040206:	428a      	cmp	r2, r1
 8040208:	4694      	mov	ip, r2
 804020a:	d969      	bls.n	80402e0 <__udivmoddi4+0xe8>
 804020c:	fab2 f282 	clz	r2, r2
 8040210:	b152      	cbz	r2, 8040228 <__udivmoddi4+0x30>
 8040212:	fa01 f302 	lsl.w	r3, r1, r2
 8040216:	f1c2 0120 	rsb	r1, r2, #32
 804021a:	fa20 f101 	lsr.w	r1, r0, r1
 804021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8040222:	ea41 0e03 	orr.w	lr, r1, r3
 8040226:	4094      	lsls	r4, r2
 8040228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 804022c:	0c21      	lsrs	r1, r4, #16
 804022e:	fbbe f6f8 	udiv	r6, lr, r8
 8040232:	fa1f f78c 	uxth.w	r7, ip
 8040236:	fb08 e316 	mls	r3, r8, r6, lr
 804023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 804023e:	fb06 f107 	mul.w	r1, r6, r7
 8040242:	4299      	cmp	r1, r3
 8040244:	d90a      	bls.n	804025c <__udivmoddi4+0x64>
 8040246:	eb1c 0303 	adds.w	r3, ip, r3
 804024a:	f106 30ff 	add.w	r0, r6, #4294967295
 804024e:	f080 811f 	bcs.w	8040490 <__udivmoddi4+0x298>
 8040252:	4299      	cmp	r1, r3
 8040254:	f240 811c 	bls.w	8040490 <__udivmoddi4+0x298>
 8040258:	3e02      	subs	r6, #2
 804025a:	4463      	add	r3, ip
 804025c:	1a5b      	subs	r3, r3, r1
 804025e:	b2a4      	uxth	r4, r4
 8040260:	fbb3 f0f8 	udiv	r0, r3, r8
 8040264:	fb08 3310 	mls	r3, r8, r0, r3
 8040268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 804026c:	fb00 f707 	mul.w	r7, r0, r7
 8040270:	42a7      	cmp	r7, r4
 8040272:	d90a      	bls.n	804028a <__udivmoddi4+0x92>
 8040274:	eb1c 0404 	adds.w	r4, ip, r4
 8040278:	f100 33ff 	add.w	r3, r0, #4294967295
 804027c:	f080 810a 	bcs.w	8040494 <__udivmoddi4+0x29c>
 8040280:	42a7      	cmp	r7, r4
 8040282:	f240 8107 	bls.w	8040494 <__udivmoddi4+0x29c>
 8040286:	4464      	add	r4, ip
 8040288:	3802      	subs	r0, #2
 804028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 804028e:	1be4      	subs	r4, r4, r7
 8040290:	2600      	movs	r6, #0
 8040292:	b11d      	cbz	r5, 804029c <__udivmoddi4+0xa4>
 8040294:	40d4      	lsrs	r4, r2
 8040296:	2300      	movs	r3, #0
 8040298:	e9c5 4300 	strd	r4, r3, [r5]
 804029c:	4631      	mov	r1, r6
 804029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402a2:	428b      	cmp	r3, r1
 80402a4:	d909      	bls.n	80402ba <__udivmoddi4+0xc2>
 80402a6:	2d00      	cmp	r5, #0
 80402a8:	f000 80ef 	beq.w	804048a <__udivmoddi4+0x292>
 80402ac:	2600      	movs	r6, #0
 80402ae:	e9c5 0100 	strd	r0, r1, [r5]
 80402b2:	4630      	mov	r0, r6
 80402b4:	4631      	mov	r1, r6
 80402b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402ba:	fab3 f683 	clz	r6, r3
 80402be:	2e00      	cmp	r6, #0
 80402c0:	d14a      	bne.n	8040358 <__udivmoddi4+0x160>
 80402c2:	428b      	cmp	r3, r1
 80402c4:	d302      	bcc.n	80402cc <__udivmoddi4+0xd4>
 80402c6:	4282      	cmp	r2, r0
 80402c8:	f200 80f9 	bhi.w	80404be <__udivmoddi4+0x2c6>
 80402cc:	1a84      	subs	r4, r0, r2
 80402ce:	eb61 0303 	sbc.w	r3, r1, r3
 80402d2:	2001      	movs	r0, #1
 80402d4:	469e      	mov	lr, r3
 80402d6:	2d00      	cmp	r5, #0
 80402d8:	d0e0      	beq.n	804029c <__udivmoddi4+0xa4>
 80402da:	e9c5 4e00 	strd	r4, lr, [r5]
 80402de:	e7dd      	b.n	804029c <__udivmoddi4+0xa4>
 80402e0:	b902      	cbnz	r2, 80402e4 <__udivmoddi4+0xec>
 80402e2:	deff      	udf	#255	; 0xff
 80402e4:	fab2 f282 	clz	r2, r2
 80402e8:	2a00      	cmp	r2, #0
 80402ea:	f040 8092 	bne.w	8040412 <__udivmoddi4+0x21a>
 80402ee:	eba1 010c 	sub.w	r1, r1, ip
 80402f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80402f6:	fa1f fe8c 	uxth.w	lr, ip
 80402fa:	2601      	movs	r6, #1
 80402fc:	0c20      	lsrs	r0, r4, #16
 80402fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8040302:	fb07 1113 	mls	r1, r7, r3, r1
 8040306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804030a:	fb0e f003 	mul.w	r0, lr, r3
 804030e:	4288      	cmp	r0, r1
 8040310:	d908      	bls.n	8040324 <__udivmoddi4+0x12c>
 8040312:	eb1c 0101 	adds.w	r1, ip, r1
 8040316:	f103 38ff 	add.w	r8, r3, #4294967295
 804031a:	d202      	bcs.n	8040322 <__udivmoddi4+0x12a>
 804031c:	4288      	cmp	r0, r1
 804031e:	f200 80cb 	bhi.w	80404b8 <__udivmoddi4+0x2c0>
 8040322:	4643      	mov	r3, r8
 8040324:	1a09      	subs	r1, r1, r0
 8040326:	b2a4      	uxth	r4, r4
 8040328:	fbb1 f0f7 	udiv	r0, r1, r7
 804032c:	fb07 1110 	mls	r1, r7, r0, r1
 8040330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040334:	fb0e fe00 	mul.w	lr, lr, r0
 8040338:	45a6      	cmp	lr, r4
 804033a:	d908      	bls.n	804034e <__udivmoddi4+0x156>
 804033c:	eb1c 0404 	adds.w	r4, ip, r4
 8040340:	f100 31ff 	add.w	r1, r0, #4294967295
 8040344:	d202      	bcs.n	804034c <__udivmoddi4+0x154>
 8040346:	45a6      	cmp	lr, r4
 8040348:	f200 80bb 	bhi.w	80404c2 <__udivmoddi4+0x2ca>
 804034c:	4608      	mov	r0, r1
 804034e:	eba4 040e 	sub.w	r4, r4, lr
 8040352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8040356:	e79c      	b.n	8040292 <__udivmoddi4+0x9a>
 8040358:	f1c6 0720 	rsb	r7, r6, #32
 804035c:	40b3      	lsls	r3, r6
 804035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8040362:	ea4c 0c03 	orr.w	ip, ip, r3
 8040366:	fa20 f407 	lsr.w	r4, r0, r7
 804036a:	fa01 f306 	lsl.w	r3, r1, r6
 804036e:	431c      	orrs	r4, r3
 8040370:	40f9      	lsrs	r1, r7
 8040372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040376:	fa00 f306 	lsl.w	r3, r0, r6
 804037a:	fbb1 f8f9 	udiv	r8, r1, r9
 804037e:	0c20      	lsrs	r0, r4, #16
 8040380:	fa1f fe8c 	uxth.w	lr, ip
 8040384:	fb09 1118 	mls	r1, r9, r8, r1
 8040388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804038c:	fb08 f00e 	mul.w	r0, r8, lr
 8040390:	4288      	cmp	r0, r1
 8040392:	fa02 f206 	lsl.w	r2, r2, r6
 8040396:	d90b      	bls.n	80403b0 <__udivmoddi4+0x1b8>
 8040398:	eb1c 0101 	adds.w	r1, ip, r1
 804039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80403a0:	f080 8088 	bcs.w	80404b4 <__udivmoddi4+0x2bc>
 80403a4:	4288      	cmp	r0, r1
 80403a6:	f240 8085 	bls.w	80404b4 <__udivmoddi4+0x2bc>
 80403aa:	f1a8 0802 	sub.w	r8, r8, #2
 80403ae:	4461      	add	r1, ip
 80403b0:	1a09      	subs	r1, r1, r0
 80403b2:	b2a4      	uxth	r4, r4
 80403b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80403b8:	fb09 1110 	mls	r1, r9, r0, r1
 80403bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80403c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80403c4:	458e      	cmp	lr, r1
 80403c6:	d908      	bls.n	80403da <__udivmoddi4+0x1e2>
 80403c8:	eb1c 0101 	adds.w	r1, ip, r1
 80403cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80403d0:	d26c      	bcs.n	80404ac <__udivmoddi4+0x2b4>
 80403d2:	458e      	cmp	lr, r1
 80403d4:	d96a      	bls.n	80404ac <__udivmoddi4+0x2b4>
 80403d6:	3802      	subs	r0, #2
 80403d8:	4461      	add	r1, ip
 80403da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80403de:	fba0 9402 	umull	r9, r4, r0, r2
 80403e2:	eba1 010e 	sub.w	r1, r1, lr
 80403e6:	42a1      	cmp	r1, r4
 80403e8:	46c8      	mov	r8, r9
 80403ea:	46a6      	mov	lr, r4
 80403ec:	d356      	bcc.n	804049c <__udivmoddi4+0x2a4>
 80403ee:	d053      	beq.n	8040498 <__udivmoddi4+0x2a0>
 80403f0:	b15d      	cbz	r5, 804040a <__udivmoddi4+0x212>
 80403f2:	ebb3 0208 	subs.w	r2, r3, r8
 80403f6:	eb61 010e 	sbc.w	r1, r1, lr
 80403fa:	fa01 f707 	lsl.w	r7, r1, r7
 80403fe:	fa22 f306 	lsr.w	r3, r2, r6
 8040402:	40f1      	lsrs	r1, r6
 8040404:	431f      	orrs	r7, r3
 8040406:	e9c5 7100 	strd	r7, r1, [r5]
 804040a:	2600      	movs	r6, #0
 804040c:	4631      	mov	r1, r6
 804040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040412:	f1c2 0320 	rsb	r3, r2, #32
 8040416:	40d8      	lsrs	r0, r3
 8040418:	fa0c fc02 	lsl.w	ip, ip, r2
 804041c:	fa21 f303 	lsr.w	r3, r1, r3
 8040420:	4091      	lsls	r1, r2
 8040422:	4301      	orrs	r1, r0
 8040424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040428:	fa1f fe8c 	uxth.w	lr, ip
 804042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8040430:	fb07 3610 	mls	r6, r7, r0, r3
 8040434:	0c0b      	lsrs	r3, r1, #16
 8040436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 804043a:	fb00 f60e 	mul.w	r6, r0, lr
 804043e:	429e      	cmp	r6, r3
 8040440:	fa04 f402 	lsl.w	r4, r4, r2
 8040444:	d908      	bls.n	8040458 <__udivmoddi4+0x260>
 8040446:	eb1c 0303 	adds.w	r3, ip, r3
 804044a:	f100 38ff 	add.w	r8, r0, #4294967295
 804044e:	d22f      	bcs.n	80404b0 <__udivmoddi4+0x2b8>
 8040450:	429e      	cmp	r6, r3
 8040452:	d92d      	bls.n	80404b0 <__udivmoddi4+0x2b8>
 8040454:	3802      	subs	r0, #2
 8040456:	4463      	add	r3, ip
 8040458:	1b9b      	subs	r3, r3, r6
 804045a:	b289      	uxth	r1, r1
 804045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8040460:	fb07 3316 	mls	r3, r7, r6, r3
 8040464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040468:	fb06 f30e 	mul.w	r3, r6, lr
 804046c:	428b      	cmp	r3, r1
 804046e:	d908      	bls.n	8040482 <__udivmoddi4+0x28a>
 8040470:	eb1c 0101 	adds.w	r1, ip, r1
 8040474:	f106 38ff 	add.w	r8, r6, #4294967295
 8040478:	d216      	bcs.n	80404a8 <__udivmoddi4+0x2b0>
 804047a:	428b      	cmp	r3, r1
 804047c:	d914      	bls.n	80404a8 <__udivmoddi4+0x2b0>
 804047e:	3e02      	subs	r6, #2
 8040480:	4461      	add	r1, ip
 8040482:	1ac9      	subs	r1, r1, r3
 8040484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040488:	e738      	b.n	80402fc <__udivmoddi4+0x104>
 804048a:	462e      	mov	r6, r5
 804048c:	4628      	mov	r0, r5
 804048e:	e705      	b.n	804029c <__udivmoddi4+0xa4>
 8040490:	4606      	mov	r6, r0
 8040492:	e6e3      	b.n	804025c <__udivmoddi4+0x64>
 8040494:	4618      	mov	r0, r3
 8040496:	e6f8      	b.n	804028a <__udivmoddi4+0x92>
 8040498:	454b      	cmp	r3, r9
 804049a:	d2a9      	bcs.n	80403f0 <__udivmoddi4+0x1f8>
 804049c:	ebb9 0802 	subs.w	r8, r9, r2
 80404a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80404a4:	3801      	subs	r0, #1
 80404a6:	e7a3      	b.n	80403f0 <__udivmoddi4+0x1f8>
 80404a8:	4646      	mov	r6, r8
 80404aa:	e7ea      	b.n	8040482 <__udivmoddi4+0x28a>
 80404ac:	4620      	mov	r0, r4
 80404ae:	e794      	b.n	80403da <__udivmoddi4+0x1e2>
 80404b0:	4640      	mov	r0, r8
 80404b2:	e7d1      	b.n	8040458 <__udivmoddi4+0x260>
 80404b4:	46d0      	mov	r8, sl
 80404b6:	e77b      	b.n	80403b0 <__udivmoddi4+0x1b8>
 80404b8:	3b02      	subs	r3, #2
 80404ba:	4461      	add	r1, ip
 80404bc:	e732      	b.n	8040324 <__udivmoddi4+0x12c>
 80404be:	4630      	mov	r0, r6
 80404c0:	e709      	b.n	80402d6 <__udivmoddi4+0xde>
 80404c2:	4464      	add	r4, ip
 80404c4:	3802      	subs	r0, #2
 80404c6:	e742      	b.n	804034e <__udivmoddi4+0x156>

080404c8 <__aeabi_idiv0>:
 80404c8:	4770      	bx	lr
 80404ca:	bf00      	nop

080404cc <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 80404cc:	2000      	movs	r0, #0
 80404ce:	4770      	bx	lr

080404d0 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 80404d0:	2000      	movs	r0, #0
 80404d2:	4770      	bx	lr

080404d4 <cs43l22_SetVolume>:
{
 80404d4:	b507      	push	{r0, r1, r2, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80404d6:	2964      	cmp	r1, #100	; 0x64
 80404d8:	bf9b      	ittet	ls
 80404da:	2264      	movls	r2, #100	; 0x64
 80404dc:	ebc1 2101 	rsbls	r1, r1, r1, lsl #8
 80404e0:	22ff      	movhi	r2, #255	; 0xff
 80404e2:	fbb1 f2f2 	udivls	r2, r1, r2
 80404e6:	bf98      	it	ls
 80404e8:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80404ea:	3219      	adds	r2, #25
 80404ec:	b2c0      	uxtb	r0, r0
 80404ee:	b2d2      	uxtb	r2, r2
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80404f0:	2120      	movs	r1, #32
 80404f2:	9201      	str	r2, [sp, #4]
 80404f4:	9000      	str	r0, [sp, #0]
 80404f6:	f000 fdcf 	bl	8041098 <AUDIO_IO_Write>
 80404fa:	9800      	ldr	r0, [sp, #0]
 80404fc:	9a01      	ldr	r2, [sp, #4]
 80404fe:	2121      	movs	r1, #33	; 0x21
 8040500:	f000 fdca 	bl	8041098 <AUDIO_IO_Write>
}
 8040504:	2000      	movs	r0, #0
 8040506:	b003      	add	sp, #12
 8040508:	f85d fb04 	ldr.w	pc, [sp], #4

0804050c <cs43l22_Init>:
{
 804050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804050e:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8040510:	b2f4      	uxtb	r4, r6
{
 8040512:	460d      	mov	r5, r1
 8040514:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8040516:	f000 fd8b 	bl	8041030 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 804051a:	2201      	movs	r2, #1
 804051c:	2102      	movs	r1, #2
 804051e:	4620      	mov	r0, r4
 8040520:	f000 fdba 	bl	8041098 <AUDIO_IO_Write>
  switch (OutputDevice)
 8040524:	1e6a      	subs	r2, r5, #1
 8040526:	4b2a      	ldr	r3, [pc, #168]	; (80405d0 <cs43l22_Init+0xc4>)
 8040528:	2a03      	cmp	r2, #3
 804052a:	d84e      	bhi.n	80405ca <cs43l22_Init+0xbe>
 804052c:	e8df f002 	tbb	[pc, r2]
 8040530:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8040534:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 8040536:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8040538:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 804053a:	2104      	movs	r1, #4
 804053c:	4620      	mov	r0, r4
 804053e:	f000 fdab 	bl	8041098 <AUDIO_IO_Write>
 8040542:	2281      	movs	r2, #129	; 0x81
 8040544:	2105      	movs	r1, #5
 8040546:	4620      	mov	r0, r4
 8040548:	f000 fda6 	bl	8041098 <AUDIO_IO_Write>
 804054c:	2204      	movs	r2, #4
 804054e:	2106      	movs	r1, #6
 8040550:	4620      	mov	r0, r4
 8040552:	f000 fda1 	bl	8041098 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8040556:	4630      	mov	r0, r6
 8040558:	4639      	mov	r1, r7
 804055a:	f7ff ffbb 	bl	80404d4 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 804055e:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8040560:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8040562:	d00e      	beq.n	8040582 <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8040564:	2206      	movs	r2, #6
 8040566:	210f      	movs	r1, #15
 8040568:	4620      	mov	r0, r4
 804056a:	f000 fd95 	bl	8041098 <AUDIO_IO_Write>
 804056e:	2200      	movs	r2, #0
 8040570:	2124      	movs	r1, #36	; 0x24
 8040572:	4620      	mov	r0, r4
 8040574:	f000 fd90 	bl	8041098 <AUDIO_IO_Write>
 8040578:	2200      	movs	r2, #0
 804057a:	2125      	movs	r1, #37	; 0x25
 804057c:	4620      	mov	r0, r4
 804057e:	f000 fd8b 	bl	8041098 <AUDIO_IO_Write>
 8040582:	4620      	mov	r0, r4
 8040584:	2200      	movs	r2, #0
 8040586:	210a      	movs	r1, #10
 8040588:	f000 fd86 	bl	8041098 <AUDIO_IO_Write>
 804058c:	4620      	mov	r0, r4
 804058e:	2204      	movs	r2, #4
 8040590:	210e      	movs	r1, #14
 8040592:	f000 fd81 	bl	8041098 <AUDIO_IO_Write>
 8040596:	4620      	mov	r0, r4
 8040598:	2200      	movs	r2, #0
 804059a:	2127      	movs	r1, #39	; 0x27
 804059c:	f000 fd7c 	bl	8041098 <AUDIO_IO_Write>
 80405a0:	4620      	mov	r0, r4
 80405a2:	220f      	movs	r2, #15
 80405a4:	211f      	movs	r1, #31
 80405a6:	f000 fd77 	bl	8041098 <AUDIO_IO_Write>
 80405aa:	4620      	mov	r0, r4
 80405ac:	220a      	movs	r2, #10
 80405ae:	211a      	movs	r1, #26
 80405b0:	f000 fd72 	bl	8041098 <AUDIO_IO_Write>
 80405b4:	4620      	mov	r0, r4
 80405b6:	220a      	movs	r2, #10
 80405b8:	211b      	movs	r1, #27
 80405ba:	f000 fd6d 	bl	8041098 <AUDIO_IO_Write>
}
 80405be:	4630      	mov	r0, r6
 80405c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 80405c2:	22af      	movs	r2, #175	; 0xaf
 80405c4:	e7b7      	b.n	8040536 <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 80405c6:	22aa      	movs	r2, #170	; 0xaa
 80405c8:	e7b5      	b.n	8040536 <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 80405ca:	2205      	movs	r2, #5
 80405cc:	e7b3      	b.n	8040536 <cs43l22_Init+0x2a>
 80405ce:	bf00      	nop
 80405d0:	20000608 	.word	0x20000608

080405d4 <cs43l22_SetOutputMode>:
  switch (Output) 
 80405d4:	3901      	subs	r1, #1
{
 80405d6:	b510      	push	{r4, lr}
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80405d8:	b2c0      	uxtb	r0, r0
 80405da:	4c10      	ldr	r4, [pc, #64]	; (804061c <cs43l22_SetOutputMode+0x48>)
  switch (Output) 
 80405dc:	2903      	cmp	r1, #3
 80405de:	d817      	bhi.n	8040610 <cs43l22_SetOutputMode+0x3c>
 80405e0:	e8df f001 	tbb	[pc, r1]
 80405e4:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 80405e8:	22fa      	movs	r2, #250	; 0xfa
 80405ea:	2104      	movs	r1, #4
 80405ec:	f000 fd54 	bl	8041098 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 80405f0:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 80405f2:	7023      	strb	r3, [r4, #0]
}
 80405f4:	2000      	movs	r0, #0
 80405f6:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 80405f8:	22af      	movs	r2, #175	; 0xaf
 80405fa:	2104      	movs	r1, #4
 80405fc:	f000 fd4c 	bl	8041098 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8040600:	23af      	movs	r3, #175	; 0xaf
 8040602:	e7f6      	b.n	80405f2 <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8040604:	22aa      	movs	r2, #170	; 0xaa
 8040606:	2104      	movs	r1, #4
 8040608:	f000 fd46 	bl	8041098 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 804060c:	23aa      	movs	r3, #170	; 0xaa
 804060e:	e7f0      	b.n	80405f2 <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8040610:	2205      	movs	r2, #5
 8040612:	2104      	movs	r1, #4
 8040614:	f000 fd40 	bl	8041098 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8040618:	2305      	movs	r3, #5
 804061a:	e7ea      	b.n	80405f2 <cs43l22_SetOutputMode+0x1e>
 804061c:	20000608 	.word	0x20000608

08040620 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 8040620:	f000 bd38 	b.w	8041094 <AUDIO_IO_DeInit>

08040624 <cs43l22_ReadID>:
{
 8040624:	b510      	push	{r4, lr}
 8040626:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 8040628:	f000 fd02 	bl	8041030 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 804062c:	2101      	movs	r1, #1
 804062e:	b2e0      	uxtb	r0, r4
 8040630:	f000 fd50 	bl	80410d4 <AUDIO_IO_Read>
}
 8040634:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8040638:	bd10      	pop	{r4, pc}

0804063a <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 804063a:	b507      	push	{r0, r1, r2, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 804063c:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 804063e:	22ff      	movs	r2, #255	; 0xff
 8040640:	2104      	movs	r1, #4
 8040642:	9001      	str	r0, [sp, #4]
 8040644:	f000 fd28 	bl	8041098 <AUDIO_IO_Write>
 8040648:	9801      	ldr	r0, [sp, #4]
 804064a:	2201      	movs	r2, #1
 804064c:	2122      	movs	r1, #34	; 0x22
 804064e:	f000 fd23 	bl	8041098 <AUDIO_IO_Write>
 8040652:	9801      	ldr	r0, [sp, #4]
 8040654:	2201      	movs	r2, #1
 8040656:	2123      	movs	r1, #35	; 0x23
}
 8040658:	b003      	add	sp, #12
 804065a:	f85d eb04 	ldr.w	lr, [sp], #4
  AUDIO_IO_Write(Addr, Reg, Value);
 804065e:	f000 bd1b 	b.w	8041098 <AUDIO_IO_Write>
	...

08040664 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8040664:	2901      	cmp	r1, #1
{
 8040666:	b507      	push	{r0, r1, r2, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8040668:	d105      	bne.n	8040676 <cs43l22_SetMute+0x12>
 804066a:	f7ff ffe6 	bl	804063a <cs43l22_SetMute.part.0>
}
 804066e:	2000      	movs	r0, #0
 8040670:	b003      	add	sp, #12
 8040672:	f85d fb04 	ldr.w	pc, [sp], #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8040676:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8040678:	2200      	movs	r2, #0
 804067a:	2122      	movs	r1, #34	; 0x22
 804067c:	9001      	str	r0, [sp, #4]
 804067e:	f000 fd0b 	bl	8041098 <AUDIO_IO_Write>
 8040682:	9801      	ldr	r0, [sp, #4]
 8040684:	2200      	movs	r2, #0
 8040686:	2123      	movs	r1, #35	; 0x23
 8040688:	f000 fd06 	bl	8041098 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 804068c:	4b03      	ldr	r3, [pc, #12]	; (804069c <cs43l22_SetMute+0x38>)
  AUDIO_IO_Write(Addr, Reg, Value);
 804068e:	9801      	ldr	r0, [sp, #4]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8040690:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8040692:	2104      	movs	r1, #4
 8040694:	f000 fd00 	bl	8041098 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8040698:	e7e9      	b.n	804066e <cs43l22_SetMute+0xa>
 804069a:	bf00      	nop
 804069c:	20000608 	.word	0x20000608

080406a0 <cs43l22_Resume>:
{
 80406a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 80406a2:	2600      	movs	r6, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80406a4:	4631      	mov	r1, r6
{
 80406a6:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 80406a8:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80406aa:	f7ff ffdb 	bl	8040664 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 80406ae:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80406b0:	4605      	mov	r5, r0
  for(index = 0x00; index < 0xFF; index++);
 80406b2:	9b03      	ldr	r3, [sp, #12]
 80406b4:	2bfe      	cmp	r3, #254	; 0xfe
 80406b6:	d90e      	bls.n	80406d6 <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80406b8:	4b09      	ldr	r3, [pc, #36]	; (80406e0 <cs43l22_Resume+0x40>)
 80406ba:	b2e0      	uxtb	r0, r4
 80406bc:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80406be:	9001      	str	r0, [sp, #4]
 80406c0:	2104      	movs	r1, #4
 80406c2:	f000 fce9 	bl	8041098 <AUDIO_IO_Write>
 80406c6:	9801      	ldr	r0, [sp, #4]
 80406c8:	229e      	movs	r2, #158	; 0x9e
 80406ca:	2102      	movs	r1, #2
 80406cc:	f000 fce4 	bl	8041098 <AUDIO_IO_Write>
}
 80406d0:	4628      	mov	r0, r5
 80406d2:	b004      	add	sp, #16
 80406d4:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 80406d6:	9b03      	ldr	r3, [sp, #12]
 80406d8:	3301      	adds	r3, #1
 80406da:	9303      	str	r3, [sp, #12]
 80406dc:	e7e9      	b.n	80406b2 <cs43l22_Resume+0x12>
 80406de:	bf00      	nop
 80406e0:	20000608 	.word	0x20000608

080406e4 <cs43l22_Pause>:
{  
 80406e4:	b510      	push	{r4, lr}
 80406e6:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 80406e8:	f7ff ffa7 	bl	804063a <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80406ec:	b2e0      	uxtb	r0, r4
 80406ee:	2201      	movs	r2, #1
 80406f0:	2102      	movs	r1, #2
 80406f2:	f000 fcd1 	bl	8041098 <AUDIO_IO_Write>
}
 80406f6:	2000      	movs	r0, #0
 80406f8:	bd10      	pop	{r4, pc}
	...

080406fc <cs43l22_Stop>:
{
 80406fc:	b513      	push	{r0, r1, r4, lr}
 80406fe:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 8040700:	f7ff ff9b 	bl	804063a <cs43l22_SetMute.part.0>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8040704:	b2e0      	uxtb	r0, r4
  AUDIO_IO_Write(Addr, Reg, Value);
 8040706:	2204      	movs	r2, #4
 8040708:	210e      	movs	r1, #14
 804070a:	9001      	str	r0, [sp, #4]
 804070c:	f000 fcc4 	bl	8041098 <AUDIO_IO_Write>
 8040710:	9801      	ldr	r0, [sp, #4]
 8040712:	229f      	movs	r2, #159	; 0x9f
 8040714:	2102      	movs	r1, #2
 8040716:	f000 fcbf 	bl	8041098 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 804071a:	4b03      	ldr	r3, [pc, #12]	; (8040728 <cs43l22_Stop+0x2c>)
 804071c:	2201      	movs	r2, #1
}
 804071e:	2000      	movs	r0, #0
  Is_cs43l22_Stop = 1;
 8040720:	701a      	strb	r2, [r3, #0]
}
 8040722:	b002      	add	sp, #8
 8040724:	bd10      	pop	{r4, pc}
 8040726:	bf00      	nop
 8040728:	20000000 	.word	0x20000000

0804072c <cs43l22_Play>:
{
 804072c:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 804072e:	4d0d      	ldr	r5, [pc, #52]	; (8040764 <cs43l22_Play+0x38>)
 8040730:	782b      	ldrb	r3, [r5, #0]
 8040732:	2b01      	cmp	r3, #1
{
 8040734:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 8040736:	d113      	bne.n	8040760 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8040738:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 804073a:	2206      	movs	r2, #6
 804073c:	210e      	movs	r1, #14
 804073e:	4630      	mov	r0, r6
 8040740:	f000 fcaa 	bl	8041098 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8040744:	2100      	movs	r1, #0
 8040746:	4620      	mov	r0, r4
 8040748:	f7ff ff8c 	bl	8040664 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 804074c:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 804074e:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8040750:	2102      	movs	r1, #2
 8040752:	4630      	mov	r0, r6
 8040754:	f000 fca0 	bl	8041098 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8040758:	2300      	movs	r3, #0
 804075a:	702b      	strb	r3, [r5, #0]
}
 804075c:	4620      	mov	r0, r4
 804075e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8040760:	2400      	movs	r4, #0
  return counter;  
 8040762:	e7fb      	b.n	804075c <cs43l22_Play+0x30>
 8040764:	20000000 	.word	0x20000000

08040768 <LIS302DL_DeInit>:
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
  
}
 8040768:	4770      	bx	lr

0804076a <LIS302DL_Init>:
{
 804076a:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 804076c:	2300      	movs	r3, #0
{
 804076e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8040770:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 8040774:	f000 fbc8 	bl	8040f08 <ACCELERO_IO_Init>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8040778:	2201      	movs	r2, #1
 804077a:	2120      	movs	r1, #32
 804077c:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) InitStruct;
 8040780:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8040784:	f000 fc0e 	bl	8040fa4 <ACCELERO_IO_Write>
}
 8040788:	b002      	add	sp, #8
 804078a:	bd10      	pop	{r4, pc}

0804078c <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 804078c:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = 0;
 804078e:	2300      	movs	r3, #0
 8040790:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8040794:	f000 fbb8 	bl	8040f08 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8040798:	f10d 0007 	add.w	r0, sp, #7
 804079c:	2201      	movs	r2, #1
 804079e:	210f      	movs	r1, #15
 80407a0:	f000 fc22 	bl	8040fe8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 80407a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80407a8:	b003      	add	sp, #12
 80407aa:	f85d fb04 	ldr.w	pc, [sp], #4

080407ae <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 80407ae:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 80407b0:	2300      	movs	r3, #0
{
 80407b2:	4604      	mov	r4, r0
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80407b4:	2201      	movs	r2, #1
 80407b6:	f10d 0007 	add.w	r0, sp, #7
 80407ba:	2121      	movs	r1, #33	; 0x21
  uint8_t ctrl = 0x00;
 80407bc:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80407c0:	f000 fc12 	bl	8040fe8 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 80407c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80407c8:	f020 002f 	bic.w	r0, r0, #47	; 0x2f
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 80407cc:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80407ce:	2201      	movs	r2, #1
 80407d0:	2121      	movs	r1, #33	; 0x21
 80407d2:	f10d 0007 	add.w	r0, sp, #7
  ctrl |= FilterStruct;
 80407d6:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80407da:	f000 fbe3 	bl	8040fa4 <ACCELERO_IO_Write>
}
 80407de:	b002      	add	sp, #8
 80407e0:	bd10      	pop	{r4, pc}

080407e2 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 80407e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[6], clickreg = 0;
 80407e4:	2300      	movs	r3, #0

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 80407e6:	f10d 0007 	add.w	r0, sp, #7
 80407ea:	2201      	movs	r2, #1
 80407ec:	2139      	movs	r1, #57	; 0x39
  uint8_t buffer[6], clickreg = 0;
 80407ee:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 80407f2:	f000 fbf9 	bl	8040fe8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 80407f6:	2206      	movs	r2, #6
 80407f8:	2127      	movs	r1, #39	; 0x27
 80407fa:	a802      	add	r0, sp, #8
 80407fc:	f000 fbf4 	bl	8040fe8 <ACCELERO_IO_Read>
}
 8040800:	b005      	add	sp, #20
 8040802:	f85d fb04 	ldr.w	pc, [sp], #4

08040806 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8040806:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8040808:	2201      	movs	r2, #1
 804080a:	f10d 0007 	add.w	r0, sp, #7
 804080e:	2121      	movs	r1, #33	; 0x21
 8040810:	f000 fbea 	bl	8040fe8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8040814:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8040818:	2201      	movs	r2, #1
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 804081a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 804081e:	2121      	movs	r1, #33	; 0x21
 8040820:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8040824:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8040828:	f000 fbbc 	bl	8040fa4 <ACCELERO_IO_Write>
}
 804082c:	b003      	add	sp, #12
 804082e:	f85d fb04 	ldr.w	pc, [sp], #4

08040832 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 8040832:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8040834:	4604      	mov	r4, r0
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
  uint8_t crtl, i = 0x00;
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 8040836:	2201      	movs	r2, #1
 8040838:	f10d 0007 	add.w	r0, sp, #7
 804083c:	2120      	movs	r1, #32
 804083e:	f000 fbd3 	bl	8040fe8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 8040842:	a802      	add	r0, sp, #8
 8040844:	2206      	movs	r2, #6
 8040846:	2129      	movs	r1, #41	; 0x29
 8040848:	f000 fbce 	bl	8040fe8 <ACCELERO_IO_Read>
  for(i=0; i<3; i++)
  {
    pnRawData[i] = buffer[2*i];
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 804084c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    pnRawData[i] = buffer[2*i];
 8040850:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 8040854:	f99d 100a 	ldrsb.w	r1, [sp, #10]
 8040858:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
    break;
    
    /* FS bit = 1 ==> Sensitivity typical value = 72milligals/digit*/ 
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 804085c:	f012 0f20 	tst.w	r2, #32
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8040860:	bf0c      	ite	eq
 8040862:	2212      	moveq	r2, #18
 8040864:	2248      	movne	r2, #72	; 0x48
 8040866:	fb10 f002 	smulbb	r0, r0, r2
 804086a:	fb11 f102 	smulbb	r1, r1, r2
 804086e:	fb13 f302 	smulbb	r3, r3, r2
 8040872:	8020      	strh	r0, [r4, #0]
 8040874:	8061      	strh	r1, [r4, #2]
 8040876:	80a3      	strh	r3, [r4, #4]
  }
}
 8040878:	b004      	add	sp, #16
 804087a:	bd10      	pop	{r4, pc}

0804087c <LIS302DL_InterruptConfig>:
{
 804087c:	b513      	push	{r0, r1, r4, lr}
 804087e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8040880:	2300      	movs	r3, #0
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8040882:	f10d 0007 	add.w	r0, sp, #7
 8040886:	2201      	movs	r2, #1
 8040888:	2138      	movs	r1, #56	; 0x38
  uint8_t ctrl = 0x00;
 804088a:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 804088e:	f000 fbab 	bl	8040fe8 <ACCELERO_IO_Read>
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8040892:	7862      	ldrb	r2, [r4, #1]
 8040894:	7823      	ldrb	r3, [r4, #0]
 8040896:	4313      	orrs	r3, r2
 8040898:	78a2      	ldrb	r2, [r4, #2]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 804089a:	2138      	movs	r1, #56	; 0x38
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 804089c:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 804089e:	f10d 0007 	add.w	r0, sp, #7
 80408a2:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 80408a4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80408a8:	f000 fb7c 	bl	8040fa4 <ACCELERO_IO_Write>
}
 80408ac:	b002      	add	sp, #8
 80408ae:	bd10      	pop	{r4, pc}

080408b0 <LIS302DL_Click_IntConfig>:
{
 80408b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t ctrl = 0x00;
 80408b2:	2300      	movs	r3, #0
 80408b4:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_ITConfig();
 80408b8:	f000 fb4c 	bl	8040f54 <ACCELERO_IO_ITConfig>
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80408bc:	2340      	movs	r3, #64	; 0x40
 80408be:	f88d 3004 	strb.w	r3, [sp, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80408c2:	2310      	movs	r3, #16
 80408c4:	f88d 3005 	strb.w	r3, [sp, #5]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80408c8:	a801      	add	r0, sp, #4
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80408ca:	2320      	movs	r3, #32
 80408cc:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl = 0x3F;
 80408d0:	243f      	movs	r4, #63	; 0x3f
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80408d2:	f7ff ffd3 	bl	804087c <LIS302DL_InterruptConfig>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80408d6:	f10d 0003 	add.w	r0, sp, #3
 80408da:	2201      	movs	r2, #1
 80408dc:	2122      	movs	r1, #34	; 0x22
  ctrl = 0x3F;
 80408de:	f88d 4003 	strb.w	r4, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80408e2:	f000 fb5f 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl = 0x50;
 80408e6:	2350      	movs	r3, #80	; 0x50
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80408e8:	f10d 0003 	add.w	r0, sp, #3
 80408ec:	2201      	movs	r2, #1
 80408ee:	2138      	movs	r1, #56	; 0x38
  ctrl = 0x50;
 80408f0:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80408f4:	f000 fb56 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl = 0xAA;
 80408f8:	23aa      	movs	r3, #170	; 0xaa
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80408fa:	f10d 0003 	add.w	r0, sp, #3
 80408fe:	2201      	movs	r2, #1
 8040900:	213b      	movs	r1, #59	; 0x3b
  ctrl = 0xAA;
 8040902:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8040906:	f000 fb4d 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl = 0x0A;
 804090a:	230a      	movs	r3, #10
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 804090c:	f10d 0003 	add.w	r0, sp, #3
 8040910:	2201      	movs	r2, #1
 8040912:	213c      	movs	r1, #60	; 0x3c
  ctrl = 0x0A;
 8040914:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8040918:	f000 fb44 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl = 0x4C;
 804091c:	234c      	movs	r3, #76	; 0x4c
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 804091e:	f10d 0003 	add.w	r0, sp, #3
 8040922:	2201      	movs	r2, #1
 8040924:	2130      	movs	r1, #48	; 0x30
  ctrl = 0x4C;
 8040926:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 804092a:	f000 fb3b 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl = 0x03;
 804092e:	2303      	movs	r3, #3
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8040930:	eb0d 0003 	add.w	r0, sp, r3
 8040934:	2201      	movs	r2, #1
 8040936:	213d      	movs	r1, #61	; 0x3d
  ctrl = 0x03;
 8040938:	f88d 3003 	strb.w	r3, [sp, #3]
  ctrl = 0x7F;
 804093c:	257f      	movs	r5, #127	; 0x7f
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 804093e:	f000 fb31 	bl	8040fa4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8040942:	f10d 0003 	add.w	r0, sp, #3
 8040946:	2201      	movs	r2, #1
 8040948:	213e      	movs	r1, #62	; 0x3e
  ctrl = 0x7F;
 804094a:	f88d 5003 	strb.w	r5, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 804094e:	f000 fb29 	bl	8040fa4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8040952:	2201      	movs	r2, #1
 8040954:	4621      	mov	r1, r4
 8040956:	f10d 0003 	add.w	r0, sp, #3
  ctrl = 0x7F;
 804095a:	f88d 5003 	strb.w	r5, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 804095e:	f000 fb21 	bl	8040fa4 <ACCELERO_IO_Write>
}
 8040962:	b003      	add	sp, #12
 8040964:	bd30      	pop	{r4, r5, pc}

08040966 <LIS3DSH_DeInit>:
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
  
}
 8040966:	4770      	bx	lr

08040968 <LIS3DSH_Init>:
{
 8040968:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 804096a:	2300      	movs	r3, #0
{
 804096c:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 804096e:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 8040972:	f000 fac9 	bl	8040f08 <ACCELERO_IO_Init>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8040976:	f10d 0007 	add.w	r0, sp, #7
 804097a:	2201      	movs	r2, #1
 804097c:	2120      	movs	r1, #32
  ctrl = (uint8_t) (InitStruct);
 804097e:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8040982:	f000 fb0f 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 8040986:	0a24      	lsrs	r4, r4, #8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8040988:	2201      	movs	r2, #1
 804098a:	2124      	movs	r1, #36	; 0x24
 804098c:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 8040990:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8040994:	f000 fb06 	bl	8040fa4 <ACCELERO_IO_Write>
}
 8040998:	b002      	add	sp, #8
 804099a:	bd10      	pop	{r4, pc}

0804099c <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 804099c:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = 0;
 804099e:	2300      	movs	r3, #0
 80409a0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80409a4:	f000 fab0 	bl	8040f08 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80409a8:	f10d 0007 	add.w	r0, sp, #7
 80409ac:	2201      	movs	r2, #1
 80409ae:	210f      	movs	r1, #15
 80409b0:	f000 fb1a 	bl	8040fe8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 80409b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80409b8:	b003      	add	sp, #12
 80409ba:	f85d fb04 	ldr.w	pc, [sp], #4

080409be <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 80409be:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80409c0:	2201      	movs	r2, #1
 80409c2:	f10d 0007 	add.w	r0, sp, #7
 80409c6:	2125      	movs	r1, #37	; 0x25
 80409c8:	f000 fb0e 	bl	8040fe8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80409cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80409d0:	2201      	movs	r2, #1
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80409d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80409d6:	2125      	movs	r1, #37	; 0x25
 80409d8:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80409dc:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80409e0:	f000 fae0 	bl	8040fa4 <ACCELERO_IO_Write>
}
 80409e4:	b003      	add	sp, #12
 80409e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080409ec <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 80409ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80409ee:	4604      	mov	r4, r0
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
  float valueinfloat = 0;
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 80409f0:	2201      	movs	r2, #1
 80409f2:	2124      	movs	r1, #36	; 0x24
 80409f4:	f10d 0007 	add.w	r0, sp, #7
 80409f8:	f000 faf6 	bl	8040fe8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 80409fc:	2201      	movs	r2, #1
 80409fe:	2128      	movs	r1, #40	; 0x28
 8040a00:	a802      	add	r0, sp, #8
 8040a02:	f000 faf1 	bl	8040fe8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8040a06:	2201      	movs	r2, #1
 8040a08:	2129      	movs	r1, #41	; 0x29
 8040a0a:	f10d 0009 	add.w	r0, sp, #9
 8040a0e:	f000 faeb 	bl	8040fe8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8040a12:	2201      	movs	r2, #1
 8040a14:	212a      	movs	r1, #42	; 0x2a
 8040a16:	f10d 000a 	add.w	r0, sp, #10
 8040a1a:	f000 fae5 	bl	8040fe8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8040a1e:	2201      	movs	r2, #1
 8040a20:	212b      	movs	r1, #43	; 0x2b
 8040a22:	f10d 000b 	add.w	r0, sp, #11
 8040a26:	f000 fadf 	bl	8040fe8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8040a2a:	2201      	movs	r2, #1
 8040a2c:	212c      	movs	r1, #44	; 0x2c
 8040a2e:	a803      	add	r0, sp, #12
 8040a30:	f000 fada 	bl	8040fe8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8040a34:	2201      	movs	r2, #1
 8040a36:	212d      	movs	r1, #45	; 0x2d
 8040a38:	f10d 000d 	add.w	r0, sp, #13
 8040a3c:	f000 fad4 	bl	8040fe8 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 8040a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8040a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8040a48:	3b08      	subs	r3, #8
 8040a4a:	b2db      	uxtb	r3, r3
 8040a4c:	2b18      	cmp	r3, #24
 8040a4e:	bf97      	itett	ls
 8040a50:	4a0f      	ldrls	r2, [pc, #60]	; (8040a90 <LIS3DSH_ReadACC+0xa4>)
 8040a52:	ed9f 7a10 	vldrhi	s14, [pc, #64]	; 8040a94 <LIS3DSH_ReadACC+0xa8>
 8040a56:	eb02 0383 	addls.w	r3, r2, r3, lsl #2
 8040a5a:	ed93 7a00 	vldrls	s14, [r3]
  default:
    break;
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8040a5e:	1ea1      	subs	r1, r4, #2
 8040a60:	aa02      	add	r2, sp, #8
 8040a62:	3404      	adds	r4, #4
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8040a64:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8040a68:	f912 3b02 	ldrsb.w	r3, [r2], #2
 8040a6c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8040a70:	ee07 3a90 	vmov	s15, r3
 8040a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8040a78:	ee67 7a87 	vmul.f32	s15, s15, s14
    pData[i] = (int16_t)valueinfloat;
 8040a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8040a80:	ee17 3a90 	vmov	r3, s15
 8040a84:	f821 3f02 	strh.w	r3, [r1, #2]!
  for(i=0; i<3; i++)
 8040a88:	428c      	cmp	r4, r1
 8040a8a:	d1eb      	bne.n	8040a64 <LIS3DSH_ReadACC+0x78>
  }
}
 8040a8c:	b004      	add	sp, #16
 8040a8e:	bd10      	pop	{r4, pc}
 8040a90:	080469fc 	.word	0x080469fc
 8040a94:	3d75c28f 	.word	0x3d75c28f

08040a98 <LIS3DSH_InterruptConfig>:
{
 8040a98:	b513      	push	{r0, r1, r4, lr}
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8040a9a:	7802      	ldrb	r2, [r0, #0]
 8040a9c:	7843      	ldrb	r3, [r0, #1]
 8040a9e:	4313      	orrs	r3, r2
 8040aa0:	7882      	ldrb	r2, [r0, #2]
{
 8040aa2:	4604      	mov	r4, r0
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8040aa4:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8040aa6:	f10d 0007 	add.w	r0, sp, #7
 8040aaa:	2201      	movs	r2, #1
 8040aac:	2123      	movs	r1, #35	; 0x23
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8040aae:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8040ab2:	f000 fa77 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8040ab6:	7922      	ldrb	r2, [r4, #4]
 8040ab8:	78e3      	ldrb	r3, [r4, #3]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8040aba:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8040abe:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8040ac0:	2121      	movs	r1, #33	; 0x21
 8040ac2:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8040ac4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8040ac8:	f000 fa6c 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8040acc:	79a2      	ldrb	r2, [r4, #6]
 8040ace:	7963      	ldrb	r3, [r4, #5]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8040ad0:	2122      	movs	r1, #34	; 0x22
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8040ad2:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8040ad4:	f10d 0007 	add.w	r0, sp, #7
 8040ad8:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8040ada:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8040ade:	f000 fa61 	bl	8040fa4 <ACCELERO_IO_Write>
}
 8040ae2:	b002      	add	sp, #8
 8040ae4:	bd10      	pop	{r4, pc}

08040ae6 <LIS3DSH_Click_IntConfig>:
{
 8040ae6:	b530      	push	{r4, r5, lr}
 8040ae8:	b085      	sub	sp, #20
  uint8_t ctrl = 0x00;
 8040aea:	2500      	movs	r5, #0
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8040aec:	2401      	movs	r4, #1
  uint8_t ctrl = 0x00;
 8040aee:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_ITConfig();
 8040af2:	f000 fa2f 	bl	8040f54 <ACCELERO_IO_ITConfig>
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8040af6:	2340      	movs	r3, #64	; 0x40
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8040af8:	a802      	add	r0, sp, #8
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8040afa:	f88d 300a 	strb.w	r3, [sp, #10]
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8040afe:	f88d 5009 	strb.w	r5, [sp, #9]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8040b02:	f88d 5008 	strb.w	r5, [sp, #8]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8040b06:	f88d 500b 	strb.w	r5, [sp, #11]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8040b0a:	f88d 400d 	strb.w	r4, [sp, #13]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8040b0e:	f88d 500e 	strb.w	r5, [sp, #14]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8040b12:	f7ff ffc1 	bl	8040a98 <LIS3DSH_InterruptConfig>
  ctrl=0x03; 
 8040b16:	2303      	movs	r3, #3
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8040b18:	4622      	mov	r2, r4
 8040b1a:	f10d 0007 	add.w	r0, sp, #7
 8040b1e:	2152      	movs	r1, #82	; 0x52
  ctrl=0x03; 
 8040b20:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8040b24:	f000 fa3e 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8040b28:	23c8      	movs	r3, #200	; 0xc8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8040b2a:	4622      	mov	r2, r4
 8040b2c:	f10d 0007 	add.w	r0, sp, #7
 8040b30:	2154      	movs	r1, #84	; 0x54
  ctrl=0xC8; 
 8040b32:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8040b36:	f000 fa35 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl=0x45; 
 8040b3a:	2345      	movs	r3, #69	; 0x45
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8040b3c:	4622      	mov	r2, r4
 8040b3e:	f10d 0007 	add.w	r0, sp, #7
 8040b42:	2156      	movs	r1, #86	; 0x56
  ctrl=0x45; 
 8040b44:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8040b48:	f000 fa2c 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 8040b4c:	23fc      	movs	r3, #252	; 0xfc
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8040b4e:	4622      	mov	r2, r4
 8040b50:	f10d 0007 	add.w	r0, sp, #7
 8040b54:	215a      	movs	r1, #90	; 0x5a
  ctrl=0xFC; 
 8040b56:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8040b5a:	f000 fa23 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 8040b5e:	23a1      	movs	r3, #161	; 0xa1
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8040b60:	4622      	mov	r2, r4
 8040b62:	f10d 0007 	add.w	r0, sp, #7
 8040b66:	215b      	movs	r1, #91	; 0x5b
  ctrl=0xA1; 
 8040b68:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8040b6c:	f000 fa1a 	bl	8040fa4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8040b70:	4622      	mov	r2, r4
 8040b72:	f10d 0007 	add.w	r0, sp, #7
 8040b76:	215c      	movs	r1, #92	; 0x5c
  ctrl=0x01; 
 8040b78:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8040b7c:	f000 fa12 	bl	8040fa4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 8040b80:	4622      	mov	r2, r4
 8040b82:	f10d 0007 	add.w	r0, sp, #7
 8040b86:	217b      	movs	r1, #123	; 0x7b
 8040b88:	f000 fa0c 	bl	8040fa4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 8040b8c:	4622      	mov	r2, r4
 8040b8e:	f10d 0007 	add.w	r0, sp, #7
 8040b92:	2160      	movs	r1, #96	; 0x60
 8040b94:	f000 fa06 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl=0x06; 
 8040b98:	2306      	movs	r3, #6
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8040b9a:	4622      	mov	r2, r4
 8040b9c:	f10d 0007 	add.w	r0, sp, #7
 8040ba0:	2161      	movs	r1, #97	; 0x61
  ctrl=0x06; 
 8040ba2:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8040ba6:	f000 f9fd 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl=0x28; 
 8040baa:	2328      	movs	r3, #40	; 0x28
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8040bac:	4622      	mov	r2, r4
 8040bae:	f10d 0007 	add.w	r0, sp, #7
 8040bb2:	2162      	movs	r1, #98	; 0x62
  ctrl=0x28; 
 8040bb4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8040bb8:	f000 f9f4 	bl	8040fa4 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8040bbc:	2311      	movs	r3, #17
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8040bbe:	4622      	mov	r2, r4
 8040bc0:	2163      	movs	r1, #99	; 0x63
 8040bc2:	f10d 0007 	add.w	r0, sp, #7
  ctrl=0x11; 
 8040bc6:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8040bca:	f000 f9eb 	bl	8040fa4 <ACCELERO_IO_Write>
}
 8040bce:	b005      	add	sp, #20
 8040bd0:	bd30      	pop	{r4, r5, pc}
	...

08040bd4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8040bd4:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8040bd6:	4c22      	ldr	r4, [pc, #136]	; (8040c60 <SPIx_Init+0x8c>)
{
 8040bd8:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8040bda:	4620      	mov	r0, r4
 8040bdc:	f003 f898 	bl	8043d10 <HAL_SPI_GetState>
 8040be0:	2800      	cmp	r0, #0
 8040be2:	d13a      	bne.n	8040c5a <SPIx_Init+0x86>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8040be4:	4b1f      	ldr	r3, [pc, #124]	; (8040c64 <SPIx_Init+0x90>)
 8040be6:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8040be8:	2318      	movs	r3, #24
 8040bea:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 8040bec:	2307      	movs	r3, #7
 8040bee:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8040bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8040bf4:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8040bf8:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8040bfa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8040bfe:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8040c00:	4b19      	ldr	r3, [pc, #100]	; (8040c68 <SPIx_Init+0x94>)
 8040c02:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8040c04:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8040c06:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8040c08:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8040c0a:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8040c0c:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8040c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8040c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8040c14:	645a      	str	r2, [r3, #68]	; 0x44
 8040c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8040c18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8040c1c:	9201      	str	r2, [sp, #4]
 8040c1e:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8040c20:	9002      	str	r0, [sp, #8]
 8040c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8040c24:	f042 0201 	orr.w	r2, r2, #1
 8040c28:	631a      	str	r2, [r3, #48]	; 0x30
 8040c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c2c:	f003 0301 	and.w	r3, r3, #1
 8040c30:	9302      	str	r3, [sp, #8]
 8040c32:	9b02      	ldr	r3, [sp, #8]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8040c34:	21e0      	movs	r1, #224	; 0xe0
 8040c36:	2302      	movs	r3, #2
 8040c38:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8040c3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8040c3e:	2001      	movs	r0, #1
 8040c40:	2305      	movs	r3, #5
 8040c42:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8040c46:	a903      	add	r1, sp, #12
 8040c48:	4808      	ldr	r0, [pc, #32]	; (8040c6c <SPIx_Init+0x98>)
 8040c4a:	f001 f891 	bl	8041d70 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8040c4e:	4620      	mov	r0, r4
}
 8040c50:	b008      	add	sp, #32
 8040c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 8040c56:	f002 be98 	b.w	804398a <HAL_SPI_Init>
}
 8040c5a:	b008      	add	sp, #32
 8040c5c:	bd10      	pop	{r4, pc}
 8040c5e:	bf00      	nop
 8040c60:	2000060c 	.word	0x2000060c
 8040c64:	40013000 	.word	0x40013000
 8040c68:	40023800 	.word	0x40023800
 8040c6c:	40020000 	.word	0x40020000

08040c70 <SPIx_WriteRead>:
{
 8040c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 8040c72:	2300      	movs	r3, #0
 8040c74:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8040c78:	4b0b      	ldr	r3, [pc, #44]	; (8040ca8 <SPIx_WriteRead+0x38>)
{
 8040c7a:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8040c7e:	681b      	ldr	r3, [r3, #0]
 8040c80:	9300      	str	r3, [sp, #0]
 8040c82:	480a      	ldr	r0, [pc, #40]	; (8040cac <SPIx_WriteRead+0x3c>)
 8040c84:	2301      	movs	r3, #1
 8040c86:	f10d 0217 	add.w	r2, sp, #23
 8040c8a:	f10d 010f 	add.w	r1, sp, #15
 8040c8e:	f002 fef4 	bl	8043a7a <HAL_SPI_TransmitReceive>
 8040c92:	b120      	cbz	r0, 8040c9e <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 8040c94:	4805      	ldr	r0, [pc, #20]	; (8040cac <SPIx_WriteRead+0x3c>)
 8040c96:	f002 feda 	bl	8043a4e <HAL_SPI_DeInit>
  SPIx_Init();
 8040c9a:	f7ff ff9b 	bl	8040bd4 <SPIx_Init>
}
 8040c9e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8040ca2:	b007      	add	sp, #28
 8040ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8040ca8:	2000009c 	.word	0x2000009c
 8040cac:	2000060c 	.word	0x2000060c

08040cb0 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8040cb0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8040cb2:	4e2b      	ldr	r6, [pc, #172]	; (8040d60 <I2Cx_Init+0xb0>)
{
 8040cb4:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8040cb6:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8040cba:	f001 fd8b 	bl	80427d4 <HAL_I2C_GetState>
 8040cbe:	4604      	mov	r4, r0
 8040cc0:	2800      	cmp	r0, #0
 8040cc2:	d14b      	bne.n	8040d5c <I2Cx_Init+0xac>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8040cc4:	4b27      	ldr	r3, [pc, #156]	; (8040d64 <I2Cx_Init+0xb4>)
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8040cc6:	4d28      	ldr	r5, [pc, #160]	; (8040d68 <I2Cx_Init+0xb8>)
 8040cc8:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8040cca:	e9c6 3017 	strd	r3, r0, [r6, #92]	; 0x5c
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8040cce:	2233      	movs	r2, #51	; 0x33
 8040cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8040cd4:	e9c6 2319 	strd	r2, r3, [r6, #100]	; 0x64
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8040cd8:	4b24      	ldr	r3, [pc, #144]	; (8040d6c <I2Cx_Init+0xbc>)
 8040cda:	65b3      	str	r3, [r6, #88]	; 0x58
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8040cdc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8040cde:	f043 0302 	orr.w	r3, r3, #2
 8040ce2:	632b      	str	r3, [r5, #48]	; 0x30
 8040ce4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8040ce6:	f003 0302 	and.w	r3, r3, #2
 8040cea:	9301      	str	r3, [sp, #4]
 8040cec:	9b01      	ldr	r3, [sp, #4]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8040cee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8040cf2:	2312      	movs	r3, #18
 8040cf4:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8040cf8:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8040cfa:	e9cd 0305 	strd	r0, r3, [sp, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8040cfe:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8040d00:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8040d02:	481b      	ldr	r0, [pc, #108]	; (8040d70 <I2Cx_Init+0xc0>)
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8040d04:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8040d06:	f001 f833 	bl	8041d70 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8040d0a:	9402      	str	r4, [sp, #8]
 8040d0c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8040d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8040d12:	642b      	str	r3, [r5, #64]	; 0x40
 8040d14:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8040d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040d1a:	9302      	str	r3, [sp, #8]
 8040d1c:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8040d1e:	6a2b      	ldr	r3, [r5, #32]
 8040d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8040d24:	622b      	str	r3, [r5, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8040d26:	6a2b      	ldr	r3, [r5, #32]
 8040d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8040d2c:	622b      	str	r3, [r5, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8040d2e:	4622      	mov	r2, r4
 8040d30:	4621      	mov	r1, r4
 8040d32:	201f      	movs	r0, #31
 8040d34:	f000 fdcc 	bl	80418d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8040d38:	201f      	movs	r0, #31
 8040d3a:	f000 fdfb 	bl	8041934 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8040d3e:	4622      	mov	r2, r4
 8040d40:	4621      	mov	r1, r4
 8040d42:	2020      	movs	r0, #32
 8040d44:	f000 fdc4 	bl	80418d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8040d48:	2020      	movs	r0, #32
 8040d4a:	f000 fdf3 	bl	8041934 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8040d4e:	f106 0058 	add.w	r0, r6, #88	; 0x58
}
 8040d52:	b008      	add	sp, #32
 8040d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(&I2cHandle);
 8040d58:	f001 bae2 	b.w	8042320 <HAL_I2C_Init>
}
 8040d5c:	b008      	add	sp, #32
 8040d5e:	bd70      	pop	{r4, r5, r6, pc}
 8040d60:	2000060c 	.word	0x2000060c
 8040d64:	000186a0 	.word	0x000186a0
 8040d68:	40023800 	.word	0x40023800
 8040d6c:	40005400 	.word	0x40005400
 8040d70:	40020400 	.word	0x40020400

08040d74 <BSP_LED_Init>:
{
 8040d74:	b530      	push	{r4, r5, lr}
 8040d76:	b08b      	sub	sp, #44	; 0x2c
  LEDx_GPIO_CLK_ENABLE(Led);
 8040d78:	bb08      	cbnz	r0, 8040dbe <BSP_LED_Init+0x4a>
 8040d7a:	4b27      	ldr	r3, [pc, #156]	; (8040e18 <BSP_LED_Init+0xa4>)
 8040d7c:	9001      	str	r0, [sp, #4]
 8040d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8040d80:	f042 0208 	orr.w	r2, r2, #8
 8040d84:	631a      	str	r2, [r3, #48]	; 0x30
 8040d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d88:	f003 0308 	and.w	r3, r3, #8
 8040d8c:	9301      	str	r3, [sp, #4]
 8040d8e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8040d90:	4c22      	ldr	r4, [pc, #136]	; (8040e1c <BSP_LED_Init+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8040d92:	4b23      	ldr	r3, [pc, #140]	; (8040e20 <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8040d94:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8040d98:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8040d9c:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8040d9e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040da0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040da2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8040da6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8040da8:	2302      	movs	r3, #2
 8040daa:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8040dac:	f000 ffe0 	bl	8041d70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8040db0:	6860      	ldr	r0, [r4, #4]
 8040db2:	2200      	movs	r2, #0
 8040db4:	4629      	mov	r1, r5
 8040db6:	f001 f8bb 	bl	8041f30 <HAL_GPIO_WritePin>
}
 8040dba:	b00b      	add	sp, #44	; 0x2c
 8040dbc:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8040dbe:	2801      	cmp	r0, #1
 8040dc0:	d10c      	bne.n	8040ddc <BSP_LED_Init+0x68>
 8040dc2:	2300      	movs	r3, #0
 8040dc4:	9302      	str	r3, [sp, #8]
 8040dc6:	4b14      	ldr	r3, [pc, #80]	; (8040e18 <BSP_LED_Init+0xa4>)
 8040dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8040dca:	f042 0208 	orr.w	r2, r2, #8
 8040dce:	631a      	str	r2, [r3, #48]	; 0x30
 8040dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040dd2:	f003 0308 	and.w	r3, r3, #8
 8040dd6:	9302      	str	r3, [sp, #8]
 8040dd8:	9b02      	ldr	r3, [sp, #8]
 8040dda:	e7d9      	b.n	8040d90 <BSP_LED_Init+0x1c>
 8040ddc:	2802      	cmp	r0, #2
 8040dde:	d10c      	bne.n	8040dfa <BSP_LED_Init+0x86>
 8040de0:	2300      	movs	r3, #0
 8040de2:	9303      	str	r3, [sp, #12]
 8040de4:	4b0c      	ldr	r3, [pc, #48]	; (8040e18 <BSP_LED_Init+0xa4>)
 8040de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8040de8:	f042 0208 	orr.w	r2, r2, #8
 8040dec:	631a      	str	r2, [r3, #48]	; 0x30
 8040dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040df0:	f003 0308 	and.w	r3, r3, #8
 8040df4:	9303      	str	r3, [sp, #12]
 8040df6:	9b03      	ldr	r3, [sp, #12]
 8040df8:	e7ca      	b.n	8040d90 <BSP_LED_Init+0x1c>
 8040dfa:	2803      	cmp	r0, #3
 8040dfc:	d1c8      	bne.n	8040d90 <BSP_LED_Init+0x1c>
 8040dfe:	2300      	movs	r3, #0
 8040e00:	9304      	str	r3, [sp, #16]
 8040e02:	4b05      	ldr	r3, [pc, #20]	; (8040e18 <BSP_LED_Init+0xa4>)
 8040e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8040e06:	f042 0208 	orr.w	r2, r2, #8
 8040e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8040e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040e0e:	f003 0308 	and.w	r3, r3, #8
 8040e12:	9304      	str	r3, [sp, #16]
 8040e14:	9b04      	ldr	r3, [sp, #16]
 8040e16:	e7bb      	b.n	8040d90 <BSP_LED_Init+0x1c>
 8040e18:	40023800 	.word	0x40023800
 8040e1c:	2000009c 	.word	0x2000009c
 8040e20:	08046a60 	.word	0x08046a60

08040e24 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8040e24:	4b04      	ldr	r3, [pc, #16]	; (8040e38 <BSP_LED_On+0x14>)
 8040e26:	4905      	ldr	r1, [pc, #20]	; (8040e3c <BSP_LED_On+0x18>)
 8040e28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8040e2c:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8040e30:	6858      	ldr	r0, [r3, #4]
 8040e32:	2201      	movs	r2, #1
 8040e34:	f001 b87c 	b.w	8041f30 <HAL_GPIO_WritePin>
 8040e38:	2000009c 	.word	0x2000009c
 8040e3c:	08046a60 	.word	0x08046a60

08040e40 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8040e40:	4b04      	ldr	r3, [pc, #16]	; (8040e54 <BSP_LED_Off+0x14>)
 8040e42:	4905      	ldr	r1, [pc, #20]	; (8040e58 <BSP_LED_Off+0x18>)
 8040e44:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8040e48:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8040e4c:	6858      	ldr	r0, [r3, #4]
 8040e4e:	2200      	movs	r2, #0
 8040e50:	f001 b86e 	b.w	8041f30 <HAL_GPIO_WritePin>
 8040e54:	2000009c 	.word	0x2000009c
 8040e58:	08046a60 	.word	0x08046a60

08040e5c <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8040e5c:	4b04      	ldr	r3, [pc, #16]	; (8040e70 <BSP_LED_Toggle+0x14>)
 8040e5e:	4a05      	ldr	r2, [pc, #20]	; (8040e74 <BSP_LED_Toggle+0x18>)
 8040e60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8040e64:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8040e68:	6858      	ldr	r0, [r3, #4]
 8040e6a:	f001 b866 	b.w	8041f3a <HAL_GPIO_TogglePin>
 8040e6e:	bf00      	nop
 8040e70:	2000009c 	.word	0x2000009c
 8040e74:	08046a60 	.word	0x08046a60

08040e78 <BSP_PB_Init>:
{
 8040e78:	b510      	push	{r4, lr}
 8040e7a:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8040e7c:	b950      	cbnz	r0, 8040e94 <BSP_PB_Init+0x1c>
 8040e7e:	4b1a      	ldr	r3, [pc, #104]	; (8040ee8 <BSP_PB_Init+0x70>)
 8040e80:	9000      	str	r0, [sp, #0]
 8040e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8040e84:	f042 0201 	orr.w	r2, r2, #1
 8040e88:	631a      	str	r2, [r3, #48]	; 0x30
 8040e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040e8c:	f003 0301 	and.w	r3, r3, #1
 8040e90:	9300      	str	r3, [sp, #0]
 8040e92:	9b00      	ldr	r3, [sp, #0]
  if (Mode == BUTTON_MODE_GPIO)
 8040e94:	b971      	cbnz	r1, 8040eb4 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8040e96:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040e98:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8040e9c:	2302      	movs	r3, #2
 8040e9e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8040ea0:	4b12      	ldr	r3, [pc, #72]	; (8040eec <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ea2:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8040ea4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8040ea8:	a901      	add	r1, sp, #4
 8040eaa:	6940      	ldr	r0, [r0, #20]
 8040eac:	f000 ff60 	bl	8041d70 <HAL_GPIO_Init>
}
 8040eb0:	b006      	add	sp, #24
 8040eb2:	bd10      	pop	{r4, pc}
  if (Mode == BUTTON_MODE_EXTI)
 8040eb4:	2901      	cmp	r1, #1
 8040eb6:	d1fb      	bne.n	8040eb0 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8040eb8:	2400      	movs	r4, #0
 8040eba:	2302      	movs	r3, #2
 8040ebc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8040ec0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8040ec4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8040ec6:	4b09      	ldr	r3, [pc, #36]	; (8040eec <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8040ec8:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8040eca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8040ece:	a901      	add	r1, sp, #4
 8040ed0:	6940      	ldr	r0, [r0, #20]
 8040ed2:	f000 ff4d 	bl	8041d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8040ed6:	4622      	mov	r2, r4
 8040ed8:	210f      	movs	r1, #15
 8040eda:	2006      	movs	r0, #6
 8040edc:	f000 fcf8 	bl	80418d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8040ee0:	2006      	movs	r0, #6
 8040ee2:	f000 fd27 	bl	8041934 <HAL_NVIC_EnableIRQ>
}
 8040ee6:	e7e3      	b.n	8040eb0 <BSP_PB_Init+0x38>
 8040ee8:	40023800 	.word	0x40023800
 8040eec:	2000009c 	.word	0x2000009c

08040ef0 <BSP_PB_GetState>:
{
 8040ef0:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8040ef2:	4b04      	ldr	r3, [pc, #16]	; (8040f04 <BSP_PB_GetState+0x14>)
 8040ef4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8040ef8:	2101      	movs	r1, #1
 8040efa:	6940      	ldr	r0, [r0, #20]
 8040efc:	f001 f812 	bl	8041f24 <HAL_GPIO_ReadPin>
}
 8040f00:	bd08      	pop	{r3, pc}
 8040f02:	bf00      	nop
 8040f04:	2000009c 	.word	0x2000009c

08040f08 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8040f08:	b530      	push	{r4, r5, lr}
 8040f0a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8040f0c:	4b0f      	ldr	r3, [pc, #60]	; (8040f4c <ACCELERO_IO_Init+0x44>)
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8040f0e:	4810      	ldr	r0, [pc, #64]	; (8040f50 <ACCELERO_IO_Init+0x48>)
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8040f10:	2100      	movs	r1, #0
 8040f12:	9100      	str	r1, [sp, #0]
 8040f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8040f16:	f042 0210 	orr.w	r2, r2, #16
 8040f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8040f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8040f1e:	2401      	movs	r4, #1
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8040f20:	f003 0310 	and.w	r3, r3, #16
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8040f24:	e9cd 1403 	strd	r1, r4, [sp, #12]
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8040f28:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8040f2a:	2508      	movs	r5, #8
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8040f2c:	a901      	add	r1, sp, #4
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8040f2e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8040f30:	e9cd 5401 	strd	r5, r4, [sp, #4]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8040f34:	f000 ff1c 	bl	8041d70 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8040f38:	4805      	ldr	r0, [pc, #20]	; (8040f50 <ACCELERO_IO_Init+0x48>)
 8040f3a:	4622      	mov	r2, r4
 8040f3c:	4629      	mov	r1, r5
 8040f3e:	f000 fff7 	bl	8041f30 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8040f42:	f7ff fe47 	bl	8040bd4 <SPIx_Init>
}
 8040f46:	b007      	add	sp, #28
 8040f48:	bd30      	pop	{r4, r5, pc}
 8040f4a:	bf00      	nop
 8040f4c:	40023800 	.word	0x40023800
 8040f50:	40021000 	.word	0x40021000

08040f54 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8040f54:	b510      	push	{r4, lr}
 8040f56:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8040f58:	2400      	movs	r4, #0
 8040f5a:	4b10      	ldr	r3, [pc, #64]	; (8040f9c <ACCELERO_IO_ITConfig+0x48>)
 8040f5c:	9400      	str	r4, [sp, #0]
 8040f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8040f60:	480f      	ldr	r0, [pc, #60]	; (8040fa0 <ACCELERO_IO_ITConfig+0x4c>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8040f62:	f042 0210 	orr.w	r2, r2, #16
 8040f66:	631a      	str	r2, [r3, #48]	; 0x30
 8040f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f6a:	f003 0310 	and.w	r3, r3, #16
 8040f6e:	9300      	str	r3, [sp, #0]
 8040f70:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8040f72:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8040f76:	2302      	movs	r3, #2
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8040f78:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8040f7a:	e9cd 3201 	strd	r3, r2, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8040f7e:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8040f82:	f000 fef5 	bl	8041d70 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8040f86:	4622      	mov	r2, r4
 8040f88:	210f      	movs	r1, #15
 8040f8a:	2007      	movs	r0, #7
 8040f8c:	f000 fca0 	bl	80418d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8040f90:	2007      	movs	r0, #7
 8040f92:	f000 fccf 	bl	8041934 <HAL_NVIC_EnableIRQ>
}
 8040f96:	b006      	add	sp, #24
 8040f98:	bd10      	pop	{r4, pc}
 8040f9a:	bf00      	nop
 8040f9c:	40023800 	.word	0x40023800
 8040fa0:	40021000 	.word	0x40021000

08040fa4 <ACCELERO_IO_Write>:
{
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8040fa4:	2a01      	cmp	r2, #1
{
 8040fa6:	b570      	push	{r4, r5, r6, lr}
 8040fa8:	460e      	mov	r6, r1
 8040faa:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8040fac:	bf88      	it	hi
 8040fae:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8040fb2:	480c      	ldr	r0, [pc, #48]	; (8040fe4 <ACCELERO_IO_Write+0x40>)
{
 8040fb4:	4614      	mov	r4, r2
  ACCELERO_CS_LOW();
 8040fb6:	2108      	movs	r1, #8
 8040fb8:	2200      	movs	r2, #0
 8040fba:	f000 ffb9 	bl	8041f30 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8040fbe:	4630      	mov	r0, r6
 8040fc0:	f7ff fe56 	bl	8040c70 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8040fc4:	442c      	add	r4, r5
 8040fc6:	42a5      	cmp	r5, r4
 8040fc8:	d106      	bne.n	8040fd8 <ACCELERO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
}
 8040fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8040fce:	4805      	ldr	r0, [pc, #20]	; (8040fe4 <ACCELERO_IO_Write+0x40>)
 8040fd0:	2201      	movs	r2, #1
 8040fd2:	2108      	movs	r1, #8
 8040fd4:	f000 bfac 	b.w	8041f30 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 8040fd8:	f815 0b01 	ldrb.w	r0, [r5], #1
 8040fdc:	f7ff fe48 	bl	8040c70 <SPIx_WriteRead>
    pBuffer++;
 8040fe0:	e7f1      	b.n	8040fc6 <ACCELERO_IO_Write+0x22>
 8040fe2:	bf00      	nop
 8040fe4:	40021000 	.word	0x40021000

08040fe8 <ACCELERO_IO_Read>:
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8040fe8:	2a01      	cmp	r2, #1
{  
 8040fea:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8040fec:	bf8c      	ite	hi
 8040fee:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8040ff2:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 8040ff6:	4606      	mov	r6, r0
 8040ff8:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8040ffa:	480c      	ldr	r0, [pc, #48]	; (804102c <ACCELERO_IO_Read+0x44>)
 8040ffc:	2200      	movs	r2, #0
 8040ffe:	2108      	movs	r1, #8
 8041000:	f000 ff96 	bl	8041f30 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8041004:	4620      	mov	r0, r4
 8041006:	f7ff fe33 	bl	8040c70 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 804100a:	4435      	add	r5, r6
 804100c:	42ae      	cmp	r6, r5
 804100e:	d106      	bne.n	804101e <ACCELERO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
}
 8041010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8041014:	4805      	ldr	r0, [pc, #20]	; (804102c <ACCELERO_IO_Read+0x44>)
 8041016:	2201      	movs	r2, #1
 8041018:	2108      	movs	r1, #8
 804101a:	f000 bf89 	b.w	8041f30 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 804101e:	2000      	movs	r0, #0
 8041020:	f7ff fe26 	bl	8040c70 <SPIx_WriteRead>
 8041024:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 8041028:	e7f0      	b.n	804100c <ACCELERO_IO_Read+0x24>
 804102a:	bf00      	nop
 804102c:	40021000 	.word	0x40021000

08041030 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8041030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8041032:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8041034:	2600      	movs	r6, #0
 8041036:	4b15      	ldr	r3, [pc, #84]	; (804108c <AUDIO_IO_Init+0x5c>)
 8041038:	9600      	str	r6, [sp, #0]
 804103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 804103c:	4c14      	ldr	r4, [pc, #80]	; (8041090 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 804103e:	f042 0208 	orr.w	r2, r2, #8
 8041042:	631a      	str	r2, [r3, #48]	; 0x30
 8041044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041046:	f003 0308 	and.w	r3, r3, #8
 804104a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804104c:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 804104e:	a901      	add	r1, sp, #4
 8041050:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8041052:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041054:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8041056:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8041058:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804105c:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8041060:	f000 fe86 	bl	8041d70 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8041064:	f7ff fe24 	bl	8040cb0 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8041068:	4632      	mov	r2, r6
 804106a:	4629      	mov	r1, r5
 804106c:	4620      	mov	r0, r4
 804106e:	f000 ff5f 	bl	8041f30 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8041072:	2005      	movs	r0, #5
 8041074:	f000 fc00 	bl	8041878 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8041078:	463a      	mov	r2, r7
 804107a:	4629      	mov	r1, r5
 804107c:	4620      	mov	r0, r4
 804107e:	f000 ff57 	bl	8041f30 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8041082:	2005      	movs	r0, #5
 8041084:	f000 fbf8 	bl	8041878 <HAL_Delay>
}
 8041088:	b007      	add	sp, #28
 804108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804108c:	40023800 	.word	0x40023800
 8041090:	40020c00 	.word	0x40020c00

08041094 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
  
}
 8041094:	4770      	bx	lr
	...

08041098 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8041098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 804109a:	4b0c      	ldr	r3, [pc, #48]	; (80410cc <AUDIO_IO_Write+0x34>)
 804109c:	f88d 2017 	strb.w	r2, [sp, #23]
 80410a0:	699b      	ldr	r3, [r3, #24]
 80410a2:	9302      	str	r3, [sp, #8]
 80410a4:	f10d 0217 	add.w	r2, sp, #23
 80410a8:	2301      	movs	r3, #1
 80410aa:	9200      	str	r2, [sp, #0]
 80410ac:	9301      	str	r3, [sp, #4]
 80410ae:	460a      	mov	r2, r1
 80410b0:	4601      	mov	r1, r0
 80410b2:	4807      	ldr	r0, [pc, #28]	; (80410d0 <AUDIO_IO_Write+0x38>)
 80410b4:	f001 f9f6 	bl	80424a4 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80410b8:	b120      	cbz	r0, 80410c4 <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 80410ba:	4805      	ldr	r0, [pc, #20]	; (80410d0 <AUDIO_IO_Write+0x38>)
 80410bc:	f001 f9d9 	bl	8042472 <HAL_I2C_DeInit>
  I2Cx_Init();
 80410c0:	f7ff fdf6 	bl	8040cb0 <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 80410c4:	b007      	add	sp, #28
 80410c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80410ca:	bf00      	nop
 80410cc:	2000009c 	.word	0x2000009c
 80410d0:	20000664 	.word	0x20000664

080410d4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80410d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 80410d6:	2300      	movs	r3, #0
 80410d8:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 80410dc:	4b0b      	ldr	r3, [pc, #44]	; (804110c <AUDIO_IO_Read+0x38>)
 80410de:	699b      	ldr	r3, [r3, #24]
 80410e0:	9302      	str	r3, [sp, #8]
{
 80410e2:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 80410e4:	2301      	movs	r3, #1
 80410e6:	f10d 0117 	add.w	r1, sp, #23
 80410ea:	9100      	str	r1, [sp, #0]
 80410ec:	9301      	str	r3, [sp, #4]
 80410ee:	4601      	mov	r1, r0
 80410f0:	4807      	ldr	r0, [pc, #28]	; (8041110 <AUDIO_IO_Read+0x3c>)
 80410f2:	f001 fa67 	bl	80425c4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80410f6:	b120      	cbz	r0, 8041102 <AUDIO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 80410f8:	4805      	ldr	r0, [pc, #20]	; (8041110 <AUDIO_IO_Read+0x3c>)
 80410fa:	f001 f9ba 	bl	8042472 <HAL_I2C_DeInit>
  I2Cx_Init();
 80410fe:	f7ff fdd7 	bl	8040cb0 <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 8041102:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8041106:	b007      	add	sp, #28
 8041108:	f85d fb04 	ldr.w	pc, [sp], #4
 804110c:	2000009c 	.word	0x2000009c
 8041110:	20000664 	.word	0x20000664

08041114 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8041114:	b538      	push	{r3, r4, r5, lr}
  uint16_t ctrl = 0x0000;
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 8041116:	4c0e      	ldr	r4, [pc, #56]	; (8041150 <BSP_ACCELERO_Init+0x3c>)
 8041118:	68a3      	ldr	r3, [r4, #8]
 804111a:	4798      	blx	r3
 804111c:	283b      	cmp	r0, #59	; 0x3b
 804111e:	d10a      	bne.n	8041136 <BSP_ACCELERO_Init+0x22>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 8041120:	4d0c      	ldr	r5, [pc, #48]	; (8041154 <BSP_ACCELERO_Init+0x40>)
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
                       lis302dl_initstruct.Axes_Enable);
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8041122:	6823      	ldr	r3, [r4, #0]
    AcceleroDrv = &Lis302dlDrv;
 8041124:	602c      	str	r4, [r5, #0]
    AcceleroDrv->Init(ctrl);
 8041126:	2047      	movs	r0, #71	; 0x47
 8041128:	4798      	blx	r3
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
                     lis302dl_filter.HighPassFilter_Interrupt);

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 804112a:	682b      	ldr	r3, [r5, #0]
 804112c:	202d      	movs	r0, #45	; 0x2d
 804112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041130:	4798      	blx	r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
    
    ret = ACCELERO_OK;
 8041132:	2000      	movs	r0, #0
  else
  {
    ret = ACCELERO_ERROR;
  }
  return ret;
}
 8041134:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8041136:	4c08      	ldr	r4, [pc, #32]	; (8041158 <BSP_ACCELERO_Init+0x44>)
 8041138:	68a3      	ldr	r3, [r4, #8]
 804113a:	4798      	blx	r3
 804113c:	283f      	cmp	r0, #63	; 0x3f
 804113e:	d105      	bne.n	804114c <BSP_ACCELERO_Init+0x38>
    AcceleroDrv = &Lis3dshDrv;
 8041140:	4b04      	ldr	r3, [pc, #16]	; (8041154 <BSP_ACCELERO_Init+0x40>)
    AcceleroDrv->Init(ctrl);
 8041142:	2067      	movs	r0, #103	; 0x67
    AcceleroDrv = &Lis3dshDrv;
 8041144:	601c      	str	r4, [r3, #0]
    AcceleroDrv->Init(ctrl);
 8041146:	6823      	ldr	r3, [r4, #0]
 8041148:	4798      	blx	r3
 804114a:	e7f2      	b.n	8041132 <BSP_ACCELERO_Init+0x1e>
    ret = ACCELERO_ERROR;
 804114c:	2001      	movs	r0, #1
 804114e:	e7f1      	b.n	8041134 <BSP_ACCELERO_Init+0x20>
 8041150:	20000034 	.word	0x20000034
 8041154:	200006b8 	.word	0x200006b8
 8041158:	20000068 	.word	0x20000068

0804115c <BSP_ACCELERO_ReadID>:
  */
uint8_t BSP_ACCELERO_ReadID(void)
{
  uint8_t id = 0x00;

  if(AcceleroDrv->ReadID != NULL)
 804115c:	4b02      	ldr	r3, [pc, #8]	; (8041168 <BSP_ACCELERO_ReadID+0xc>)
 804115e:	681b      	ldr	r3, [r3, #0]
 8041160:	6898      	ldr	r0, [r3, #8]
 8041162:	b100      	cbz	r0, 8041166 <BSP_ACCELERO_ReadID+0xa>
  {
    id = AcceleroDrv->ReadID();
 8041164:	4700      	bx	r0
  }  
  return id;
}
 8041166:	4770      	bx	lr
 8041168:	200006b8 	.word	0x200006b8

0804116c <BSP_ACCELERO_Click_ITConfig>:
/**
  * @brief  Configure Accelerometer click IT. 
  */
void BSP_ACCELERO_Click_ITConfig(void)
{
  if(AcceleroDrv->ConfigIT != NULL)
 804116c:	4b02      	ldr	r3, [pc, #8]	; (8041178 <BSP_ACCELERO_Click_ITConfig+0xc>)
 804116e:	681b      	ldr	r3, [r3, #0]
 8041170:	695b      	ldr	r3, [r3, #20]
 8041172:	b103      	cbz	r3, 8041176 <BSP_ACCELERO_Click_ITConfig+0xa>
  {
    AcceleroDrv->ConfigIT();
 8041174:	4718      	bx	r3
  }
}
 8041176:	4770      	bx	lr
 8041178:	200006b8 	.word	0x200006b8

0804117c <BSP_ACCELERO_Click_ITClear>:
/**
  * @brief  Clear Accelerometer click IT.
  */
void BSP_ACCELERO_Click_ITClear(void)
{
  if(AcceleroDrv->ClearIT != NULL)
 804117c:	4b02      	ldr	r3, [pc, #8]	; (8041188 <BSP_ACCELERO_Click_ITClear+0xc>)
 804117e:	681b      	ldr	r3, [r3, #0]
 8041180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041182:	b103      	cbz	r3, 8041186 <BSP_ACCELERO_Click_ITClear+0xa>
  {
    AcceleroDrv->ClearIT();
 8041184:	4718      	bx	r3
  }
}
 8041186:	4770      	bx	lr
 8041188:	200006b8 	.word	0x200006b8

0804118c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 804118c:	b538      	push	{r3, r4, r5, lr}
  int16_t SwitchXY = 0;
  
  if(AcceleroDrv->GetXYZ != NULL)
 804118e:	4d08      	ldr	r5, [pc, #32]	; (80411b0 <BSP_ACCELERO_GetXYZ+0x24>)
 8041190:	682b      	ldr	r3, [r5, #0]
 8041192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 8041194:	4604      	mov	r4, r0
  if(AcceleroDrv->GetXYZ != NULL)
 8041196:	b153      	cbz	r3, 80411ae <BSP_ACCELERO_GetXYZ+0x22>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 8041198:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 804119a:	682a      	ldr	r2, [r5, #0]
 804119c:	4b05      	ldr	r3, [pc, #20]	; (80411b4 <BSP_ACCELERO_GetXYZ+0x28>)
 804119e:	429a      	cmp	r2, r3
 80411a0:	d105      	bne.n	80411ae <BSP_ACCELERO_GetXYZ+0x22>
    { 
      SwitchXY  = pDataXYZ[0];
 80411a2:	f9b4 3000 	ldrsh.w	r3, [r4]
      pDataXYZ[0] = pDataXYZ[1];
 80411a6:	8862      	ldrh	r2, [r4, #2]
 80411a8:	8022      	strh	r2, [r4, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 80411aa:	425b      	negs	r3, r3
 80411ac:	8063      	strh	r3, [r4, #2]
    } 
  }
}
 80411ae:	bd38      	pop	{r3, r4, r5, pc}
 80411b0:	200006b8 	.word	0x200006b8
 80411b4:	20000034 	.word	0x20000034

080411b8 <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80411b8:	4a0c      	ldr	r2, [pc, #48]	; (80411ec <I2S3_Init+0x34>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80411ba:	69d1      	ldr	r1, [r2, #28]
{
 80411bc:	b508      	push	{r3, lr}
  hAudioOutI2s.Instance         = I2S3;
 80411be:	4b0c      	ldr	r3, [pc, #48]	; (80411f0 <I2S3_Init+0x38>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80411c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  hAudioOutI2s.Instance         = I2S3;
 80411c4:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80411c6:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80411c8:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80411ca:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80411ce:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80411d0:	4618      	mov	r0, r3
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80411d2:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80411d6:	e9c3 1201 	strd	r1, r2, [r3, #4]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80411da:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80411dc:	6119      	str	r1, [r3, #16]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80411de:	f001 fb23 	bl	8042828 <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 80411e2:	3800      	subs	r0, #0
 80411e4:	bf18      	it	ne
 80411e6:	2001      	movne	r0, #1
 80411e8:	bd08      	pop	{r3, pc}
 80411ea:	bf00      	nop
 80411ec:	40003c00 	.word	0x40003c00
 80411f0:	200006bc 	.word	0x200006bc

080411f4 <BSP_AUDIO_OUT_Play>:
{
 80411f4:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80411f6:	4b0c      	ldr	r3, [pc, #48]	; (8041228 <BSP_AUDIO_OUT_Play+0x34>)
 80411f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 80411fa:	4605      	mov	r5, r0
 80411fc:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80411fe:	b28a      	uxth	r2, r1
 8041200:	68db      	ldr	r3, [r3, #12]
 8041202:	4601      	mov	r1, r0
 8041204:	2094      	movs	r0, #148	; 0x94
 8041206:	4798      	blx	r3
 8041208:	b960      	cbnz	r0, 8041224 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 804120a:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 804120e:	4806      	ldr	r0, [pc, #24]	; (8041228 <BSP_AUDIO_OUT_Play+0x34>)
 8041210:	bf34      	ite	cc
 8041212:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8041216:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 804121a:	4629      	mov	r1, r5
 804121c:	f001 fb9e 	bl	804295c <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8041220:	2000      	movs	r0, #0
}
 8041222:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8041224:	2001      	movs	r0, #1
 8041226:	e7fc      	b.n	8041222 <BSP_AUDIO_OUT_Play+0x2e>
 8041228:	200006bc 	.word	0x200006bc

0804122c <BSP_AUDIO_OUT_ChangeBuffer>:
{
 804122c:	460a      	mov	r2, r1
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 804122e:	4601      	mov	r1, r0
 8041230:	4801      	ldr	r0, [pc, #4]	; (8041238 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8041232:	f001 bb93 	b.w	804295c <HAL_I2S_Transmit_DMA>
 8041236:	bf00      	nop
 8041238:	200006bc 	.word	0x200006bc

0804123c <BSP_AUDIO_OUT_Pause>:
{    
 804123c:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 804123e:	4d07      	ldr	r5, [pc, #28]	; (804125c <BSP_AUDIO_OUT_Pause+0x20>)
 8041240:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8041242:	2094      	movs	r0, #148	; 0x94
 8041244:	691b      	ldr	r3, [r3, #16]
 8041246:	4798      	blx	r3
 8041248:	4604      	mov	r4, r0
 804124a:	b920      	cbnz	r0, 8041256 <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_I2S_DMAPause(&hAudioOutI2s);
 804124c:	4628      	mov	r0, r5
 804124e:	f001 fc59 	bl	8042b04 <HAL_I2S_DMAPause>
    return AUDIO_OK;
 8041252:	4620      	mov	r0, r4
}
 8041254:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8041256:	2001      	movs	r0, #1
 8041258:	e7fc      	b.n	8041254 <BSP_AUDIO_OUT_Pause+0x18>
 804125a:	bf00      	nop
 804125c:	200006bc 	.word	0x200006bc

08041260 <BSP_AUDIO_OUT_Resume>:
{    
 8041260:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8041262:	4d07      	ldr	r5, [pc, #28]	; (8041280 <BSP_AUDIO_OUT_Resume+0x20>)
 8041264:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8041266:	2094      	movs	r0, #148	; 0x94
 8041268:	695b      	ldr	r3, [r3, #20]
 804126a:	4798      	blx	r3
 804126c:	4604      	mov	r4, r0
 804126e:	b920      	cbnz	r0, 804127a <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8041270:	4628      	mov	r0, r5
 8041272:	f001 fc7f 	bl	8042b74 <HAL_I2S_DMAResume>
    return AUDIO_OK;
 8041276:	4620      	mov	r0, r4
}
 8041278:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 804127a:	2001      	movs	r0, #1
 804127c:	e7fc      	b.n	8041278 <BSP_AUDIO_OUT_Resume+0x18>
 804127e:	bf00      	nop
 8041280:	200006bc 	.word	0x200006bc

08041284 <BSP_AUDIO_OUT_Stop>:
{
 8041284:	b538      	push	{r3, r4, r5, lr}
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8041286:	4c0d      	ldr	r4, [pc, #52]	; (80412bc <BSP_AUDIO_OUT_Stop+0x38>)
{
 8041288:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 804128a:	4620      	mov	r0, r4
 804128c:	f001 fcb6 	bl	8042bfc <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8041290:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8041292:	4629      	mov	r1, r5
 8041294:	699b      	ldr	r3, [r3, #24]
 8041296:	2094      	movs	r0, #148	; 0x94
 8041298:	4798      	blx	r3
 804129a:	4604      	mov	r4, r0
 804129c:	b958      	cbnz	r0, 80412b6 <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 804129e:	2d01      	cmp	r5, #1
 80412a0:	d107      	bne.n	80412b2 <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 80412a2:	4628      	mov	r0, r5
 80412a4:	f000 fae8 	bl	8041878 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80412a8:	4805      	ldr	r0, [pc, #20]	; (80412c0 <BSP_AUDIO_OUT_Stop+0x3c>)
 80412aa:	4622      	mov	r2, r4
 80412ac:	2110      	movs	r1, #16
 80412ae:	f000 fe3f 	bl	8041f30 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 80412b2:	4620      	mov	r0, r4
 80412b4:	e000      	b.n	80412b8 <BSP_AUDIO_OUT_Stop+0x34>
    return AUDIO_ERROR;
 80412b6:	2001      	movs	r0, #1
}
 80412b8:	bd38      	pop	{r3, r4, r5, pc}
 80412ba:	bf00      	nop
 80412bc:	200006bc 	.word	0x200006bc
 80412c0:	40020c00 	.word	0x40020c00

080412c4 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 80412c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80412c6:	4a12      	ldr	r2, [pc, #72]	; (8041310 <BSP_AUDIO_OUT_ClockConfig+0x4c>)
 80412c8:	2300      	movs	r3, #0
  uint8_t index = 0, freqindex = 0xFF;
 80412ca:	25ff      	movs	r5, #255	; 0xff
 80412cc:	4614      	mov	r4, r2
    if(I2SFreq[index] == AudioFreq)
 80412ce:	f852 6b04 	ldr.w	r6, [r2], #4
 80412d2:	b2d8      	uxtb	r0, r3
  for(index = 0; index < 8; index++)
 80412d4:	3301      	adds	r3, #1
    if(I2SFreq[index] == AudioFreq)
 80412d6:	428e      	cmp	r6, r1
 80412d8:	bf08      	it	eq
 80412da:	4605      	moveq	r5, r0
  for(index = 0; index < 8; index++)
 80412dc:	2b08      	cmp	r3, #8
 80412de:	d1f6      	bne.n	80412ce <BSP_AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80412e0:	4668      	mov	r0, sp
 80412e2:	f002 fa89 	bl	80437f8 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 80412e6:	2301      	movs	r3, #1
 80412e8:	f015 0f07 	tst.w	r5, #7
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80412ec:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80412ee:	bf0b      	itete	eq
 80412f0:	eb04 0385 	addeq.w	r3, r4, r5, lsl #2
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80412f4:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80412f8:	6a1a      	ldreq	r2, [r3, #32]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80412fa:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80412fc:	bf06      	itte	eq
 80412fe:	6c1b      	ldreq	r3, [r3, #64]	; 0x40
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8041300:	9201      	streq	r2, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8041302:	2303      	movne	r3, #3
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8041304:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8041306:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8041308:	f002 f9de 	bl	80436c8 <HAL_RCCEx_PeriphCLKConfig>
}
 804130c:	b004      	add	sp, #16
 804130e:	bd70      	pop	{r4, r5, r6, pc}
 8041310:	08046a6c 	.word	0x08046a6c

08041314 <BSP_AUDIO_OUT_MspInit>:
{
 8041314:	b570      	push	{r4, r5, r6, lr}
 8041316:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8041318:	4c40      	ldr	r4, [pc, #256]	; (804141c <BSP_AUDIO_OUT_MspInit+0x108>)
 804131a:	2500      	movs	r5, #0
 804131c:	9500      	str	r5, [sp, #0]
 804131e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8041320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8041324:	6423      	str	r3, [r4, #64]	; 0x40
 8041326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8041328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804132c:	9300      	str	r3, [sp, #0]
 804132e:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8041330:	9501      	str	r5, [sp, #4]
 8041332:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8041334:	f043 0304 	orr.w	r3, r3, #4
 8041338:	6323      	str	r3, [r4, #48]	; 0x30
 804133a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804133c:	f003 0304 	and.w	r3, r3, #4
 8041340:	9301      	str	r3, [sp, #4]
 8041342:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8041344:	9502      	str	r5, [sp, #8]
 8041346:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8041348:	f043 0301 	orr.w	r3, r3, #1
 804134c:	6323      	str	r3, [r4, #48]	; 0x30
 804134e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8041350:	f003 0301 	and.w	r3, r3, #1
 8041354:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8041356:	f44f 5ca0 	mov.w	ip, #5120	; 0x1400
  I2S3_WS_CLK_ENABLE();
 804135a:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 804135c:	2302      	movs	r3, #2
 804135e:	e9cd c305 	strd	ip, r3, [sp, #20]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8041362:	e9cd 5307 	strd	r5, r3, [sp, #28]
{
 8041366:	4606      	mov	r6, r0
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8041368:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 804136a:	482d      	ldr	r0, [pc, #180]	; (8041420 <BSP_AUDIO_OUT_MspInit+0x10c>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 804136c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 804136e:	a905      	add	r1, sp, #20
 8041370:	f000 fcfe 	bl	8041d70 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8041374:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8041376:	482b      	ldr	r0, [pc, #172]	; (8041424 <BSP_AUDIO_OUT_MspInit+0x110>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8041378:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 804137a:	a905      	add	r1, sp, #20
 804137c:	f000 fcf8 	bl	8041d70 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8041380:	9503      	str	r5, [sp, #12]
 8041382:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8041384:	4826      	ldr	r0, [pc, #152]	; (8041420 <BSP_AUDIO_OUT_MspInit+0x10c>)
  I2S3_MCK_CLK_ENABLE();
 8041386:	f043 0304 	orr.w	r3, r3, #4
 804138a:	6323      	str	r3, [r4, #48]	; 0x30
 804138c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804138e:	f003 0304 	and.w	r3, r3, #4
 8041392:	9303      	str	r3, [sp, #12]
 8041394:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8041396:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8041398:	2380      	movs	r3, #128	; 0x80
 804139a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 804139c:	f000 fce8 	bl	8041d70 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 80413a0:	9504      	str	r5, [sp, #16]
 80413a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 80413a4:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 80413a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80413aa:	6323      	str	r3, [r4, #48]	; 0x30
 80413ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80413ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80413b2:	9304      	str	r3, [sp, #16]
 80413b4:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 80413b6:	4b1c      	ldr	r3, [pc, #112]	; (8041428 <BSP_AUDIO_OUT_MspInit+0x114>)
 80413b8:	429a      	cmp	r2, r3
 80413ba:	d124      	bne.n	8041406 <BSP_AUDIO_OUT_MspInit+0xf2>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80413bc:	4b1b      	ldr	r3, [pc, #108]	; (804142c <BSP_AUDIO_OUT_MspInit+0x118>)
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80413be:	2240      	movs	r2, #64	; 0x40
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80413c0:	e9c3 2515 	strd	r2, r5, [r3, #84]	; 0x54
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80413c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80413c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80413cc:	e9c3 1217 	strd	r1, r2, [r3, #92]	; 0x5c
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80413d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80413d4:	e9c3 2519 	strd	r2, r5, [r3, #100]	; 0x64
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80413d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80413dc:	2204      	movs	r2, #4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80413de:	461c      	mov	r4, r3
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80413e0:	e9c3 021b 	strd	r0, r2, [r3, #108]	; 0x6c
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80413e4:	2203      	movs	r2, #3
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80413e6:	e9c3 251d 	strd	r2, r5, [r3, #116]	; 0x74
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80413ea:	4a11      	ldr	r2, [pc, #68]	; (8041430 <BSP_AUDIO_OUT_MspInit+0x11c>)
 80413ec:	f844 2f4c 	str.w	r2, [r4, #76]!
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80413f0:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 80413f2:	4620      	mov	r0, r4
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80413f4:	651d      	str	r5, [r3, #80]	; 0x50
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80413f6:	67dd      	str	r5, [r3, #124]	; 0x7c
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80413f8:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
    HAL_DMA_DeInit(&hdma_i2sTx);
 80413fc:	f000 fb52 	bl	8041aa4 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8041400:	4620      	mov	r0, r4
 8041402:	f000 facf 	bl	80419a4 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8041406:	2200      	movs	r2, #0
 8041408:	210e      	movs	r1, #14
 804140a:	202f      	movs	r0, #47	; 0x2f
 804140c:	f000 fa60 	bl	80418d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 8041410:	202f      	movs	r0, #47	; 0x2f
 8041412:	f000 fa8f 	bl	8041934 <HAL_NVIC_EnableIRQ>
}
 8041416:	b00a      	add	sp, #40	; 0x28
 8041418:	bd70      	pop	{r4, r5, r6, pc}
 804141a:	bf00      	nop
 804141c:	40023800 	.word	0x40023800
 8041420:	40020800 	.word	0x40020800
 8041424:	40020000 	.word	0x40020000
 8041428:	40003c00 	.word	0x40003c00
 804142c:	200006bc 	.word	0x200006bc
 8041430:	400260b8 	.word	0x400260b8

08041434 <BSP_AUDIO_OUT_Init>:
{    
 8041434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8041438:	4e17      	ldr	r6, [pc, #92]	; (8041498 <BSP_AUDIO_OUT_Init+0x64>)
{    
 804143a:	4615      	mov	r5, r2
 804143c:	4607      	mov	r7, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 804143e:	2200      	movs	r2, #0
 8041440:	4630      	mov	r0, r6
{    
 8041442:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8041444:	4629      	mov	r1, r5
 8041446:	f7ff ff3d 	bl	80412c4 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 804144a:	4b14      	ldr	r3, [pc, #80]	; (804149c <BSP_AUDIO_OUT_Init+0x68>)
 804144c:	6033      	str	r3, [r6, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 804144e:	4630      	mov	r0, r6
 8041450:	f001 fd87 	bl	8042f62 <HAL_I2S_GetState>
 8041454:	4601      	mov	r1, r0
 8041456:	b910      	cbnz	r0, 804145e <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8041458:	4630      	mov	r0, r6
 804145a:	f7ff ff5b 	bl	8041314 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 804145e:	4628      	mov	r0, r5
 8041460:	f7ff feaa 	bl	80411b8 <I2S3_Init>
 8041464:	4604      	mov	r4, r0
 8041466:	b118      	cbz	r0, 8041470 <BSP_AUDIO_OUT_Init+0x3c>
    ret = AUDIO_ERROR;
 8041468:	2401      	movs	r4, #1
}
 804146a:	4620      	mov	r0, r4
 804146c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8041470:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80414a0 <BSP_AUDIO_OUT_Init+0x6c>
 8041474:	2094      	movs	r0, #148	; 0x94
 8041476:	f8d9 3008 	ldr.w	r3, [r9, #8]
 804147a:	4798      	blx	r3
 804147c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8041480:	28e0      	cmp	r0, #224	; 0xe0
 8041482:	d1f1      	bne.n	8041468 <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8041484:	f8c6 9048 	str.w	r9, [r6, #72]	; 0x48
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8041488:	462b      	mov	r3, r5
 804148a:	f8d9 6000 	ldr.w	r6, [r9]
 804148e:	4642      	mov	r2, r8
 8041490:	4639      	mov	r1, r7
 8041492:	2094      	movs	r0, #148	; 0x94
 8041494:	47b0      	blx	r6
 8041496:	e7e8      	b.n	804146a <BSP_AUDIO_OUT_Init+0x36>
 8041498:	200006bc 	.word	0x200006bc
 804149c:	40003c00 	.word	0x40003c00
 80414a0:	20000004 	.word	0x20000004

080414a4 <HAL_I2S_TxCpltCallback>:
{
 80414a4:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80414a6:	6802      	ldr	r2, [r0, #0]
 80414a8:	4b02      	ldr	r3, [pc, #8]	; (80414b4 <HAL_I2S_TxCpltCallback+0x10>)
 80414aa:	429a      	cmp	r2, r3
 80414ac:	d101      	bne.n	80414b2 <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80414ae:	f002 fcc9 	bl	8043e44 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80414b2:	bd08      	pop	{r3, pc}
 80414b4:	40003c00 	.word	0x40003c00

080414b8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
 80414b8:	4770      	bx	lr
	...

080414bc <HAL_I2S_TxHalfCpltCallback>:
{
 80414bc:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80414be:	6802      	ldr	r2, [r0, #0]
 80414c0:	4b02      	ldr	r3, [pc, #8]	; (80414cc <HAL_I2S_TxHalfCpltCallback+0x10>)
 80414c2:	429a      	cmp	r2, r3
 80414c4:	d101      	bne.n	80414ca <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80414c6:	f7ff fff7 	bl	80414b8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80414ca:	bd08      	pop	{r3, pc}
 80414cc:	40003c00 	.word	0x40003c00

080414d0 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80414d0:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 80414d2:	b28a      	uxth	r2, r1
 80414d4:	4601      	mov	r1, r0
 80414d6:	4802      	ldr	r0, [pc, #8]	; (80414e0 <BSP_AUDIO_IN_Record+0x10>)
 80414d8:	f001 faa4 	bl	8042a24 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 80414dc:	2000      	movs	r0, #0
 80414de:	bd08      	pop	{r3, pc}
 80414e0:	20000768 	.word	0x20000768

080414e4 <BSP_AUDIO_IN_Stop>:
/**
  * @brief  Stops audio recording.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 80414e4:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Call the Media layer pause function */
  HAL_I2S_DMAStop(&hAudioInI2s);  
 80414e6:	4802      	ldr	r0, [pc, #8]	; (80414f0 <BSP_AUDIO_IN_Stop+0xc>)
 80414e8:	f001 fb88 	bl	8042bfc <HAL_I2S_DMAStop>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 80414ec:	2000      	movs	r0, #0
 80414ee:	bd08      	pop	{r3, pc}
 80414f0:	20000768 	.word	0x20000768

080414f4 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 80414f4:	b530      	push	{r4, r5, lr}
 80414f6:	b0a1      	sub	sp, #132	; 0x84
 80414f8:	460c      	mov	r4, r1
 80414fa:	4669      	mov	r1, sp
 80414fc:	1e82      	subs	r2, r0, #2
 80414fe:	f100 037e 	add.w	r3, r0, #126	; 0x7e
 8041502:	4608      	mov	r0, r1
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 8041504:	f832 5f02 	ldrh.w	r5, [r2, #2]!
 8041508:	ba6d      	rev16	r5, r5
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 804150a:	4293      	cmp	r3, r2
    AppPDM[index] = HTONS(PDMBuf[index]);
 804150c:	f821 5b02 	strh.w	r5, [r1], #2
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8041510:	d1f8      	bne.n	8041504 <BSP_AUDIO_IN_PDMToPCM+0x10>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8041512:	4a08      	ldr	r2, [pc, #32]	; (8041534 <BSP_AUDIO_IN_PDMToPCM+0x40>)
 8041514:	4621      	mov	r1, r4
 8041516:	f004 fde3 	bl	80460e0 <PDM_Filter>
  }
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
 804151a:	2300      	movs	r3, #0
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 804151c:	1ca2      	adds	r2, r4, #2
 804151e:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
 8041522:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8041526:	3301      	adds	r3, #1
 8041528:	2b10      	cmp	r3, #16
 804152a:	d1f8      	bne.n	804151e <BSP_AUDIO_IN_PDMToPCM+0x2a>
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 804152c:	2000      	movs	r0, #0
 804152e:	b021      	add	sp, #132	; 0x84
 8041530:	bd30      	pop	{r4, r5, pc}
 8041532:	bf00      	nop
 8041534:	200007b0 	.word	0x200007b0

08041538 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 8041538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804153a:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rccclkinit;

  /*Enable PLLI2S clock*/
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 804153c:	4668      	mov	r0, sp
 804153e:	f002 f95b 	bl	80437f8 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 8041542:	2301      	movs	r3, #1
 8041544:	f014 0f07 	tst.w	r4, #7
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8041548:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 804154a:	bf0b      	itete	eq
 804154c:	23c0      	moveq	r3, #192	; 0xc0
  {
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 804154e:	f44f 7391 	movne.w	r3, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8041552:	9301      	streq	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8041554:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 8041556:	bf0c      	ite	eq
 8041558:	2306      	moveq	r3, #6
    rccclkinit.PLLI2S.PLLI2SR = 2;
 804155a:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 804155c:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;
 804155e:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8041560:	f002 f8b2 	bl	80436c8 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8041564:	b004      	add	sp, #16
 8041566:	bd10      	pop	{r4, pc}

08041568 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8041568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804156c:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 804156e:	4c3b      	ldr	r4, [pc, #236]	; (804165c <BSP_AUDIO_IN_MspInit+0xf4>)
 8041570:	2500      	movs	r5, #0
 8041572:	9501      	str	r5, [sp, #4]
 8041574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8041576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804157a:	6423      	str	r3, [r4, #64]	; 0x40
 804157c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041582:	9301      	str	r3, [sp, #4]
 8041584:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 8041586:	9502      	str	r5, [sp, #8]
 8041588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804158a:	f043 0302 	orr.w	r3, r3, #2
 804158e:	6323      	str	r3, [r4, #48]	; 0x30
 8041590:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8041592:	f003 0302 	and.w	r3, r3, #2
 8041596:	9302      	str	r3, [sp, #8]
 8041598:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 804159a:	9503      	str	r5, [sp, #12]
 804159c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 804159e:	f043 0304 	orr.w	r3, r3, #4
 80415a2:	6323      	str	r3, [r4, #48]	; 0x30
 80415a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80415a6:	f003 0304 	and.w	r3, r3, #4
 80415aa:	9303      	str	r3, [sp, #12]
 80415ac:	9b03      	ldr	r3, [sp, #12]
{
 80415ae:	4606      	mov	r6, r0
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80415b0:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80415b2:	482b      	ldr	r0, [pc, #172]	; (8041660 <BSP_AUDIO_IN_MspInit+0xf8>)
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80415b4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 80415b6:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80415ba:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 80415bc:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80415c0:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 80415c4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 80415c6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80415ca:	f000 fbd1 	bl	8041d70 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 80415ce:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80415d0:	4824      	ldr	r0, [pc, #144]	; (8041664 <BSP_AUDIO_IN_MspInit+0xfc>)
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 80415d2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80415d4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 80415d6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80415da:	f000 fbc9 	bl	8041d70 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 80415de:	9504      	str	r5, [sp, #16]
 80415e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 80415e2:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 80415e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80415e8:	6323      	str	r3, [r4, #48]	; 0x30
 80415ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80415ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80415f0:	9304      	str	r3, [sp, #16]
 80415f2:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 80415f4:	4b1c      	ldr	r3, [pc, #112]	; (8041668 <BSP_AUDIO_IN_MspInit+0x100>)
 80415f6:	429a      	cmp	r2, r3
 80415f8:	d125      	bne.n	8041646 <BSP_AUDIO_IN_MspInit+0xde>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 80415fa:	4b1c      	ldr	r3, [pc, #112]	; (804166c <BSP_AUDIO_IN_MspInit+0x104>)
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 80415fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8041600:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041604:	e9c3 1268 	strd	r1, r2, [r3, #416]	; 0x1a0
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8041608:	f44f 7080 	mov.w	r0, #256	; 0x100
 804160c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8041610:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8041614:	e9c3 026a 	strd	r0, r2, [r3, #424]	; 0x1a8
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8041618:	2203      	movs	r2, #3
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 804161a:	e9c3 256d 	strd	r2, r5, [r3, #436]	; 0x1b4
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 804161e:	63f4      	str	r4, [r6, #60]	; 0x3c
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8041620:	4a13      	ldr	r2, [pc, #76]	; (8041670 <BSP_AUDIO_IN_MspInit+0x108>)
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8041622:	f8c3 51b0 	str.w	r5, [r3, #432]	; 0x1b0
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 8041626:	4620      	mov	r0, r4
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8041628:	e9c3 5564 	strd	r5, r5, [r3, #400]	; 0x190
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 804162c:	e9c3 5766 	strd	r5, r7, [r3, #408]	; 0x198
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8041630:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8041634:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8041638:	f8c3 61c4 	str.w	r6, [r3, #452]	; 0x1c4
    HAL_DMA_DeInit(&hdma_i2sRx);
 804163c:	f000 fa32 	bl	8041aa4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8041640:	4620      	mov	r0, r4
 8041642:	f000 f9af 	bl	80419a4 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8041646:	2200      	movs	r2, #0
 8041648:	210f      	movs	r1, #15
 804164a:	200e      	movs	r0, #14
 804164c:	f000 f940 	bl	80418d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8041650:	200e      	movs	r0, #14
 8041652:	f000 f96f 	bl	8041934 <HAL_NVIC_EnableIRQ>
}
 8041656:	b00a      	add	sp, #40	; 0x28
 8041658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804165c:	40023800 	.word	0x40023800
 8041660:	40020400 	.word	0x40020400
 8041664:	40020800 	.word	0x40020800
 8041668:	40003800 	.word	0x40003800
 804166c:	200006bc 	.word	0x200006bc
 8041670:	40026058 	.word	0x40026058

08041674 <BSP_AUDIO_IN_Init>:
{
 8041674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8041678:	4605      	mov	r5, r0
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 804167a:	4601      	mov	r1, r0
{
 804167c:	4691      	mov	r9, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 804167e:	4831      	ldr	r0, [pc, #196]	; (8041744 <BSP_AUDIO_IN_Init+0xd0>)
 8041680:	4c31      	ldr	r4, [pc, #196]	; (8041748 <BSP_AUDIO_IN_Init+0xd4>)
 8041682:	2200      	movs	r2, #0
 8041684:	f7ff ff58 	bl	8041538 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
  uint32_t index = 0;

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8041688:	2600      	movs	r6, #0
 804168a:	4b30      	ldr	r3, [pc, #192]	; (804174c <BSP_AUDIO_IN_Init+0xd8>)
 804168c:	9601      	str	r6, [sp, #4]
 804168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8041694:	631a      	str	r2, [r3, #48]	; 0x30
 8041696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804169c:	9301      	str	r3, [sp, #4]
 804169e:	9b01      	ldr	r3, [sp, #4]
  for(index = 0; index < ChnlNbrIn; index++)
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80416a0:	4b2b      	ldr	r3, [pc, #172]	; (8041750 <BSP_AUDIO_IN_Init+0xdc>)
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80416a2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80416a6:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
 80416aa:	fbb5 f8f8 	udiv	r8, r5, r8
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 80416ae:	46b2      	mov	sl, r6
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80416b0:	fa1f f888 	uxth.w	r8, r8
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80416b4:	f04f 0b02 	mov.w	fp, #2
  for(index = 0; index < ChnlNbrIn; index++)
 80416b8:	45b1      	cmp	r9, r6
 80416ba:	d127      	bne.n	804170c <BSP_AUDIO_IN_Init+0x98>
  hAudioInI2s.Instance = I2S2;
 80416bc:	4c25      	ldr	r4, [pc, #148]	; (8041754 <BSP_AUDIO_IN_Init+0xe0>)
 80416be:	4f26      	ldr	r7, [pc, #152]	; (8041758 <BSP_AUDIO_IN_Init+0xe4>)
 80416c0:	4626      	mov	r6, r4
 80416c2:	f846 7fac 	str.w	r7, [r6, #172]!
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 80416c6:	4630      	mov	r0, r6
 80416c8:	f001 fc4b 	bl	8042f62 <HAL_I2S_GetState>
 80416cc:	4601      	mov	r1, r0
 80416ce:	b910      	cbnz	r0, 80416d6 <BSP_AUDIO_IN_Init+0x62>
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 80416d0:	4630      	mov	r0, r6
 80416d2:	f7ff ff49 	bl	8041568 <BSP_AUDIO_IN_MspInit>
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80416d6:	69fb      	ldr	r3, [r7, #28]
  hAudioInI2s.Instance          = I2S2;
 80416d8:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80416dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80416e0:	006d      	lsls	r5, r5, #1
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80416e2:	61fb      	str	r3, [r7, #28]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80416e4:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 80416e8:	2308      	movs	r3, #8
 80416ea:	2500      	movs	r5, #0
 80416ec:	e9c4 3531 	strd	r3, r5, [r4, #196]	; 0xc4
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80416f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80416f4:	2320      	movs	r3, #32

  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80416f6:	4630      	mov	r0, r6
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 80416f8:	e9c4 552e 	strd	r5, r5, [r4, #184]	; 0xb8
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80416fc:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8041700:	f001 f892 	bl	8042828 <HAL_I2S_Init>
}
 8041704:	4628      	mov	r0, r5
 8041706:	b003      	add	sp, #12
 8041708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 804170c:	4620      	mov	r0, r4
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 804170e:	6063      	str	r3, [r4, #4]
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8041710:	f8a4 a000 	strh.w	sl, [r4]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8041714:	f8a4 a002 	strh.w	sl, [r4, #2]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8041718:	f8a4 b00a 	strh.w	fp, [r4, #10]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 804171c:	f8a4 9008 	strh.w	r9, [r4, #8]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8041720:	f004 fb62 	bl	8045de8 <PDM_Filter_Init>
    PDM_FilterConfig[index].mic_gain = 24;
 8041724:	2218      	movs	r2, #24
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8041726:	f8a7 8002 	strh.w	r8, [r7, #2]
    PDM_FilterConfig[index].mic_gain = 24;
 804172a:	80ba      	strh	r2, [r7, #4]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 804172c:	f8a7 b000 	strh.w	fp, [r7]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8041730:	4639      	mov	r1, r7
 8041732:	4620      	mov	r0, r4
 8041734:	f004 fbe2 	bl	8045efc <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 8041738:	3601      	adds	r6, #1
 804173a:	4b05      	ldr	r3, [pc, #20]	; (8041750 <BSP_AUDIO_IN_Init+0xdc>)
 804173c:	344c      	adds	r4, #76	; 0x4c
 804173e:	3706      	adds	r7, #6
 8041740:	e7ba      	b.n	80416b8 <BSP_AUDIO_IN_Init+0x44>
 8041742:	bf00      	nop
 8041744:	20000768 	.word	0x20000768
 8041748:	200007b0 	.word	0x200007b0
 804174c:	40023800 	.word	0x40023800
 8041750:	7e809d48 	.word	0x7e809d48
 8041754:	200006bc 	.word	0x200006bc
 8041758:	40003800 	.word	0x40003800

0804175c <HAL_I2S_RxCpltCallback>:
{
 804175c:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 804175e:	f002 fc99 	bl	8044094 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8041762:	bd08      	pop	{r3, pc}

08041764 <HAL_I2S_RxHalfCpltCallback>:
{
 8041764:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8041766:	f002 fc9b 	bl	80440a0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 804176a:	bd08      	pop	{r3, pc}

0804176c <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 804176c:	6802      	ldr	r2, [r0, #0]
 804176e:	4b07      	ldr	r3, [pc, #28]	; (804178c <HAL_I2S_ErrorCallback+0x20>)
 8041770:	429a      	cmp	r2, r3
{
 8041772:	b510      	push	{r4, lr}
 8041774:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8041776:	d101      	bne.n	804177c <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8041778:	f002 fbb8 	bl	8043eec <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 804177c:	6822      	ldr	r2, [r4, #0]
 804177e:	4b04      	ldr	r3, [pc, #16]	; (8041790 <HAL_I2S_ErrorCallback+0x24>)
 8041780:	429a      	cmp	r2, r3
 8041782:	d101      	bne.n	8041788 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8041784:	f002 fc92 	bl	80440ac <BSP_AUDIO_IN_Error_Callback>
  }
}
 8041788:	bd10      	pop	{r4, pc}
 804178a:	bf00      	nop
 804178c:	40003c00 	.word	0x40003c00
 8041790:	40003800 	.word	0x40003800

08041794 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041794:	490e      	ldr	r1, [pc, #56]	; (80417d0 <SystemInit+0x3c>)
 8041796:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 804179a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 804179e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80417a2:	4b0c      	ldr	r3, [pc, #48]	; (80417d4 <SystemInit+0x40>)
 80417a4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80417a6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80417a8:	f042 0201 	orr.w	r2, r2, #1
 80417ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80417ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80417b0:	681a      	ldr	r2, [r3, #0]
 80417b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80417b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80417ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80417bc:	4a06      	ldr	r2, [pc, #24]	; (80417d8 <SystemInit+0x44>)
 80417be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80417c0:	681a      	ldr	r2, [r3, #0]
 80417c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80417c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80417c8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80417ca:	4b04      	ldr	r3, [pc, #16]	; (80417dc <SystemInit+0x48>)
 80417cc:	608b      	str	r3, [r1, #8]
#endif
}
 80417ce:	4770      	bx	lr
 80417d0:	e000ed00 	.word	0xe000ed00
 80417d4:	40023800 	.word	0x40023800
 80417d8:	24003010 	.word	0x24003010
 80417dc:	08040000 	.word	0x08040000

080417e0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80417e0:	4770      	bx	lr
	...

080417e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80417e4:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80417e6:	4a0e      	ldr	r2, [pc, #56]	; (8041820 <HAL_InitTick+0x3c>)
 80417e8:	4e0e      	ldr	r6, [pc, #56]	; (8041824 <HAL_InitTick+0x40>)
{
 80417ea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80417ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80417f0:	7830      	ldrb	r0, [r6, #0]
 80417f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80417f6:	6810      	ldr	r0, [r2, #0]
 80417f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80417fc:	f000 f8a8 	bl	8041950 <HAL_SYSTICK_Config>
 8041800:	4604      	mov	r4, r0
 8041802:	b950      	cbnz	r0, 804181a <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041804:	2d0f      	cmp	r5, #15
 8041806:	d808      	bhi.n	804181a <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8041808:	4602      	mov	r2, r0
 804180a:	4629      	mov	r1, r5
 804180c:	f04f 30ff 	mov.w	r0, #4294967295
 8041810:	f000 f85e 	bl	80418d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8041814:	6075      	str	r5, [r6, #4]
 8041816:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8041818:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 804181a:	2001      	movs	r0, #1
 804181c:	e7fc      	b.n	8041818 <HAL_InitTick+0x34>
 804181e:	bf00      	nop
 8041820:	200000b8 	.word	0x200000b8
 8041824:	200000bc 	.word	0x200000bc

08041828 <HAL_Init>:
{
 8041828:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 804182a:	4b09      	ldr	r3, [pc, #36]	; (8041850 <HAL_Init+0x28>)
 804182c:	681a      	ldr	r2, [r3, #0]
 804182e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8041832:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8041834:	681a      	ldr	r2, [r3, #0]
 8041836:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 804183a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 804183c:	2003      	movs	r0, #3
 804183e:	f000 f835 	bl	80418ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8041842:	200f      	movs	r0, #15
 8041844:	f7ff ffce 	bl	80417e4 <HAL_InitTick>
  HAL_MspInit();
 8041848:	f7ff ffca 	bl	80417e0 <HAL_MspInit>
}
 804184c:	2000      	movs	r0, #0
 804184e:	bd08      	pop	{r3, pc}
 8041850:	40023c00 	.word	0x40023c00

08041854 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8041854:	4a03      	ldr	r2, [pc, #12]	; (8041864 <HAL_IncTick+0x10>)
 8041856:	4b04      	ldr	r3, [pc, #16]	; (8041868 <HAL_IncTick+0x14>)
 8041858:	6811      	ldr	r1, [r2, #0]
 804185a:	781b      	ldrb	r3, [r3, #0]
 804185c:	440b      	add	r3, r1
 804185e:	6013      	str	r3, [r2, #0]
}
 8041860:	4770      	bx	lr
 8041862:	bf00      	nop
 8041864:	200008b4 	.word	0x200008b4
 8041868:	200000bc 	.word	0x200000bc

0804186c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 804186c:	4b01      	ldr	r3, [pc, #4]	; (8041874 <HAL_GetTick+0x8>)
 804186e:	6818      	ldr	r0, [r3, #0]
}
 8041870:	4770      	bx	lr
 8041872:	bf00      	nop
 8041874:	200008b4 	.word	0x200008b4

08041878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8041878:	b538      	push	{r3, r4, r5, lr}
 804187a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 804187c:	f7ff fff6 	bl	804186c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8041880:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8041882:	bf1c      	itt	ne
 8041884:	4b05      	ldrne	r3, [pc, #20]	; (804189c <HAL_Delay+0x24>)
 8041886:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8041888:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 804188a:	bf18      	it	ne
 804188c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 804188e:	f7ff ffed 	bl	804186c <HAL_GetTick>
 8041892:	1b43      	subs	r3, r0, r5
 8041894:	42a3      	cmp	r3, r4
 8041896:	d3fa      	bcc.n	804188e <HAL_Delay+0x16>
  {
  }
}
 8041898:	bd38      	pop	{r3, r4, r5, pc}
 804189a:	bf00      	nop
 804189c:	200000bc 	.word	0x200000bc

080418a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 80418a0:	4b01      	ldr	r3, [pc, #4]	; (80418a8 <HAL_GetREVID+0x8>)
 80418a2:	6818      	ldr	r0, [r3, #0]
}
 80418a4:	0c00      	lsrs	r0, r0, #16
 80418a6:	4770      	bx	lr
 80418a8:	e0042000 	.word	0xe0042000

080418ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80418ac:	4907      	ldr	r1, [pc, #28]	; (80418cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80418ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80418b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80418b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80418b6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80418b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80418bc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80418be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80418c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80418c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80418c8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80418ca:	4770      	bx	lr
 80418cc:	e000ed00 	.word	0xe000ed00

080418d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80418d0:	4b16      	ldr	r3, [pc, #88]	; (804192c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80418d2:	b530      	push	{r4, r5, lr}
 80418d4:	68dc      	ldr	r4, [r3, #12]
 80418d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80418da:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80418de:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80418e0:	2d04      	cmp	r5, #4
 80418e2:	bf28      	it	cs
 80418e4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80418e6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80418e8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80418ec:	bf8c      	ite	hi
 80418ee:	3c03      	subhi	r4, #3
 80418f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80418f2:	fa03 f505 	lsl.w	r5, r3, r5
 80418f6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80418fa:	40a3      	lsls	r3, r4
 80418fc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041900:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8041902:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041904:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041908:	bfac      	ite	ge
 804190a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804190e:	4a08      	ldrlt	r2, [pc, #32]	; (8041930 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041910:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041914:	bfb8      	it	lt
 8041916:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804191a:	b2db      	uxtb	r3, r3
 804191c:	bfaa      	itet	ge
 804191e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041922:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041924:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8041928:	bd30      	pop	{r4, r5, pc}
 804192a:	bf00      	nop
 804192c:	e000ed00 	.word	0xe000ed00
 8041930:	e000ed14 	.word	0xe000ed14

08041934 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8041934:	2800      	cmp	r0, #0
 8041936:	db08      	blt.n	804194a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8041938:	0942      	lsrs	r2, r0, #5
 804193a:	2301      	movs	r3, #1
 804193c:	f000 001f 	and.w	r0, r0, #31
 8041940:	fa03 f000 	lsl.w	r0, r3, r0
 8041944:	4b01      	ldr	r3, [pc, #4]	; (804194c <HAL_NVIC_EnableIRQ+0x18>)
 8041946:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 804194a:	4770      	bx	lr
 804194c:	e000e100 	.word	0xe000e100

08041950 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8041950:	3801      	subs	r0, #1
 8041952:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8041956:	d20b      	bcs.n	8041970 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8041958:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804195c:	4a05      	ldr	r2, [pc, #20]	; (8041974 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 804195e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041960:	21f0      	movs	r1, #240	; 0xf0
 8041962:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8041966:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041968:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 804196a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 804196c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 804196e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8041970:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8041972:	4770      	bx	lr
 8041974:	e000ed00 	.word	0xe000ed00

08041978 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8041978:	6803      	ldr	r3, [r0, #0]
{
 804197a:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 804197c:	4c08      	ldr	r4, [pc, #32]	; (80419a0 <DMA_CalcBaseAndBitshift+0x28>)
{
 804197e:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8041980:	b2d9      	uxtb	r1, r3
 8041982:	3910      	subs	r1, #16
 8041984:	2018      	movs	r0, #24
 8041986:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 804198a:	5c20      	ldrb	r0, [r4, r0]
 804198c:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 804198e:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8041992:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8041996:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8041998:	bf88      	it	hi
 804199a:	3004      	addhi	r0, #4
 804199c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 804199e:	bd10      	pop	{r4, pc}
 80419a0:	08046ae4 	.word	0x08046ae4

080419a4 <HAL_DMA_Init>:
{
 80419a4:	b570      	push	{r4, r5, r6, lr}
 80419a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80419a8:	f7ff ff60 	bl	804186c <HAL_GetTick>
 80419ac:	4605      	mov	r5, r0
  if(hdma == NULL)
 80419ae:	2c00      	cmp	r4, #0
 80419b0:	d073      	beq.n	8041a9a <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 80419b2:	2302      	movs	r3, #2
 80419b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80419b8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80419ba:	2300      	movs	r3, #0
 80419bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80419c0:	6813      	ldr	r3, [r2, #0]
 80419c2:	f023 0301 	bic.w	r3, r3, #1
 80419c6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80419c8:	6821      	ldr	r1, [r4, #0]
 80419ca:	680b      	ldr	r3, [r1, #0]
 80419cc:	07d8      	lsls	r0, r3, #31
 80419ce:	d42f      	bmi.n	8041a30 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80419d0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80419d2:	4d33      	ldr	r5, [pc, #204]	; (8041aa0 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80419d4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80419d6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80419d8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80419dc:	4313      	orrs	r3, r2
 80419de:	68e2      	ldr	r2, [r4, #12]
 80419e0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80419e2:	6922      	ldr	r2, [r4, #16]
 80419e4:	4313      	orrs	r3, r2
 80419e6:	6962      	ldr	r2, [r4, #20]
 80419e8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80419ea:	69e2      	ldr	r2, [r4, #28]
 80419ec:	4303      	orrs	r3, r0
 80419ee:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80419f0:	6a22      	ldr	r2, [r4, #32]
 80419f2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80419f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80419f6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80419f8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80419fc:	bf02      	ittt	eq
 80419fe:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8041a02:	4335      	orreq	r5, r6
 8041a04:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8041a06:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8041a08:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8041a0a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8041a0c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8041a10:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8041a14:	d133      	bne.n	8041a7e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8041a16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8041a18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8041a1a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8041a1c:	b37d      	cbz	r5, 8041a7e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8041a1e:	b990      	cbnz	r0, 8041a46 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8041a20:	2a01      	cmp	r2, #1
 8041a22:	d021      	beq.n	8041a68 <HAL_DMA_Init+0xc4>
 8041a24:	f032 0202 	bics.w	r2, r2, #2
 8041a28:	d129      	bne.n	8041a7e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8041a2a:	01ea      	lsls	r2, r5, #7
 8041a2c:	d527      	bpl.n	8041a7e <HAL_DMA_Init+0xda>
 8041a2e:	e01e      	b.n	8041a6e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8041a30:	f7ff ff1c 	bl	804186c <HAL_GetTick>
 8041a34:	1b40      	subs	r0, r0, r5
 8041a36:	2805      	cmp	r0, #5
 8041a38:	d9c6      	bls.n	80419c8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8041a3a:	2320      	movs	r3, #32
 8041a3c:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8041a3e:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8041a40:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8041a44:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8041a46:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8041a4a:	d114      	bne.n	8041a76 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8041a4c:	2a03      	cmp	r2, #3
 8041a4e:	d816      	bhi.n	8041a7e <HAL_DMA_Init+0xda>
 8041a50:	a001      	add	r0, pc, #4	; (adr r0, 8041a58 <HAL_DMA_Init+0xb4>)
 8041a52:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8041a56:	bf00      	nop
 8041a58:	08041a6f 	.word	0x08041a6f
 8041a5c:	08041a2b 	.word	0x08041a2b
 8041a60:	08041a6f 	.word	0x08041a6f
 8041a64:	08041a69 	.word	0x08041a69
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8041a68:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8041a6c:	d107      	bne.n	8041a7e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8041a6e:	2340      	movs	r3, #64	; 0x40
 8041a70:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8041a72:	2001      	movs	r0, #1
 8041a74:	e7e4      	b.n	8041a40 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8041a76:	2a02      	cmp	r2, #2
 8041a78:	d9f9      	bls.n	8041a6e <HAL_DMA_Init+0xca>
 8041a7a:	2a03      	cmp	r2, #3
 8041a7c:	d0d5      	beq.n	8041a2a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8041a7e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8041a80:	4620      	mov	r0, r4
 8041a82:	f7ff ff79 	bl	8041978 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041a86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8041a88:	233f      	movs	r3, #63	; 0x3f
 8041a8a:	4093      	lsls	r3, r2
 8041a8c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041a8e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8041a90:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041a92:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8041a94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8041a98:	e7d4      	b.n	8041a44 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8041a9a:	2001      	movs	r0, #1
 8041a9c:	e7d2      	b.n	8041a44 <HAL_DMA_Init+0xa0>
 8041a9e:	bf00      	nop
 8041aa0:	f010803f 	.word	0xf010803f

08041aa4 <HAL_DMA_DeInit>:
{
 8041aa4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8041aa6:	4605      	mov	r5, r0
 8041aa8:	b320      	cbz	r0, 8041af4 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8041aaa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8041aae:	2b02      	cmp	r3, #2
 8041ab0:	b2dc      	uxtb	r4, r3
 8041ab2:	d01d      	beq.n	8041af0 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8041ab4:	6803      	ldr	r3, [r0, #0]
 8041ab6:	681a      	ldr	r2, [r3, #0]
 8041ab8:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8041abc:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8041abe:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8041ac0:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8041ac2:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8041ac4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8041ac6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8041ac8:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8041aca:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8041acc:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8041ace:	f7ff ff53 	bl	8041978 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041ad2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8041ad4:	233f      	movs	r3, #63	; 0x3f
 8041ad6:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8041ad8:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8041adc:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8041ae0:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041ae4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041ae6:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8041ae8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8041aec:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8041af0:	4620      	mov	r0, r4
 8041af2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8041af4:	2401      	movs	r4, #1
 8041af6:	e7fb      	b.n	8041af0 <HAL_DMA_DeInit+0x4c>

08041af8 <HAL_DMA_Start_IT>:
{
 8041af8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8041afa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8041afe:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8041b00:	2c01      	cmp	r4, #1
 8041b02:	d031      	beq.n	8041b68 <HAL_DMA_Start_IT+0x70>
 8041b04:	2401      	movs	r4, #1
 8041b06:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8041b0a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8041b0e:	2c01      	cmp	r4, #1
 8041b10:	f04f 0500 	mov.w	r5, #0
 8041b14:	f04f 0402 	mov.w	r4, #2
 8041b18:	d124      	bne.n	8041b64 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8041b1a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8041b1e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041b20:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8041b22:	6825      	ldr	r5, [r4, #0]
 8041b24:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8041b28:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8041b2a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8041b2c:	6883      	ldr	r3, [r0, #8]
 8041b2e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8041b30:	bf0e      	itee	eq
 8041b32:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8041b34:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8041b36:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041b38:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8041b3a:	bf08      	it	eq
 8041b3c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041b3e:	233f      	movs	r3, #63	; 0x3f
 8041b40:	4093      	lsls	r3, r2
 8041b42:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8041b44:	6823      	ldr	r3, [r4, #0]
 8041b46:	f043 0316 	orr.w	r3, r3, #22
 8041b4a:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8041b4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8041b4e:	b11b      	cbz	r3, 8041b58 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8041b50:	6823      	ldr	r3, [r4, #0]
 8041b52:	f043 0308 	orr.w	r3, r3, #8
 8041b56:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8041b58:	6823      	ldr	r3, [r4, #0]
 8041b5a:	f043 0301 	orr.w	r3, r3, #1
 8041b5e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041b60:	2000      	movs	r0, #0
}
 8041b62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8041b64:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8041b68:	2002      	movs	r0, #2
 8041b6a:	e7fa      	b.n	8041b62 <HAL_DMA_Start_IT+0x6a>

08041b6c <HAL_DMA_Abort>:
{
 8041b6c:	b570      	push	{r4, r5, r6, lr}
 8041b6e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8041b70:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8041b72:	f7ff fe7b 	bl	804186c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8041b76:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8041b7a:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8041b7c:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8041b7e:	d006      	beq.n	8041b8e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041b80:	2380      	movs	r3, #128	; 0x80
 8041b82:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8041b84:	2300      	movs	r3, #0
 8041b86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8041b8a:	2001      	movs	r0, #1
}
 8041b8c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8041b8e:	6823      	ldr	r3, [r4, #0]
 8041b90:	681a      	ldr	r2, [r3, #0]
 8041b92:	f022 0216 	bic.w	r2, r2, #22
 8041b96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8041b98:	695a      	ldr	r2, [r3, #20]
 8041b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8041b9e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8041ba0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8041ba2:	b90a      	cbnz	r2, 8041ba8 <HAL_DMA_Abort+0x3c>
 8041ba4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8041ba6:	b11a      	cbz	r2, 8041bb0 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8041ba8:	681a      	ldr	r2, [r3, #0]
 8041baa:	f022 0208 	bic.w	r2, r2, #8
 8041bae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8041bb0:	681a      	ldr	r2, [r3, #0]
 8041bb2:	f022 0201 	bic.w	r2, r2, #1
 8041bb6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8041bb8:	6823      	ldr	r3, [r4, #0]
 8041bba:	681b      	ldr	r3, [r3, #0]
 8041bbc:	f013 0301 	ands.w	r3, r3, #1
 8041bc0:	d10a      	bne.n	8041bd8 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041bc2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8041bc4:	223f      	movs	r2, #63	; 0x3f
 8041bc6:	408a      	lsls	r2, r1
 8041bc8:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8041bca:	2201      	movs	r2, #1
 8041bcc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8041bd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8041bd4:	4618      	mov	r0, r3
 8041bd6:	e7d9      	b.n	8041b8c <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8041bd8:	f7ff fe48 	bl	804186c <HAL_GetTick>
 8041bdc:	1b40      	subs	r0, r0, r5
 8041bde:	2805      	cmp	r0, #5
 8041be0:	d9ea      	bls.n	8041bb8 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8041be2:	2320      	movs	r3, #32
 8041be4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8041be6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8041be8:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8041bea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8041bee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8041bf2:	e7cb      	b.n	8041b8c <HAL_DMA_Abort+0x20>

08041bf4 <HAL_DMA_IRQHandler>:
{
 8041bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8041bf6:	2300      	movs	r3, #0
 8041bf8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8041bfa:	4b5c      	ldr	r3, [pc, #368]	; (8041d6c <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8041bfc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8041bfe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8041c00:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8041c02:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8041c04:	2208      	movs	r2, #8
 8041c06:	409a      	lsls	r2, r3
 8041c08:	4232      	tst	r2, r6
{
 8041c0a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8041c0c:	d00c      	beq.n	8041c28 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8041c0e:	6801      	ldr	r1, [r0, #0]
 8041c10:	6808      	ldr	r0, [r1, #0]
 8041c12:	0740      	lsls	r0, r0, #29
 8041c14:	d508      	bpl.n	8041c28 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8041c16:	6808      	ldr	r0, [r1, #0]
 8041c18:	f020 0004 	bic.w	r0, r0, #4
 8041c1c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8041c1e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8041c20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8041c22:	f042 0201 	orr.w	r2, r2, #1
 8041c26:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8041c28:	2201      	movs	r2, #1
 8041c2a:	409a      	lsls	r2, r3
 8041c2c:	4232      	tst	r2, r6
 8041c2e:	d008      	beq.n	8041c42 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8041c30:	6821      	ldr	r1, [r4, #0]
 8041c32:	6949      	ldr	r1, [r1, #20]
 8041c34:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8041c36:	bf41      	itttt	mi
 8041c38:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8041c3a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8041c3c:	f042 0202 	orrmi.w	r2, r2, #2
 8041c40:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8041c42:	2204      	movs	r2, #4
 8041c44:	409a      	lsls	r2, r3
 8041c46:	4232      	tst	r2, r6
 8041c48:	d008      	beq.n	8041c5c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8041c4a:	6821      	ldr	r1, [r4, #0]
 8041c4c:	6809      	ldr	r1, [r1, #0]
 8041c4e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8041c50:	bf41      	itttt	mi
 8041c52:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8041c54:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8041c56:	f042 0204 	orrmi.w	r2, r2, #4
 8041c5a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8041c5c:	2210      	movs	r2, #16
 8041c5e:	409a      	lsls	r2, r3
 8041c60:	4232      	tst	r2, r6
 8041c62:	d010      	beq.n	8041c86 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8041c64:	6823      	ldr	r3, [r4, #0]
 8041c66:	6819      	ldr	r1, [r3, #0]
 8041c68:	0709      	lsls	r1, r1, #28
 8041c6a:	d50c      	bpl.n	8041c86 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8041c6c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8041c6e:	681a      	ldr	r2, [r3, #0]
 8041c70:	0350      	lsls	r0, r2, #13
 8041c72:	d537      	bpl.n	8041ce4 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8041c74:	681b      	ldr	r3, [r3, #0]
 8041c76:	0319      	lsls	r1, r3, #12
 8041c78:	d401      	bmi.n	8041c7e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8041c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8041c7c:	e000      	b.n	8041c80 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8041c7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8041c80:	b10b      	cbz	r3, 8041c86 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8041c82:	4620      	mov	r0, r4
 8041c84:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8041c86:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8041c88:	2220      	movs	r2, #32
 8041c8a:	408a      	lsls	r2, r1
 8041c8c:	4232      	tst	r2, r6
 8041c8e:	d03a      	beq.n	8041d06 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8041c90:	6823      	ldr	r3, [r4, #0]
 8041c92:	6818      	ldr	r0, [r3, #0]
 8041c94:	06c6      	lsls	r6, r0, #27
 8041c96:	d536      	bpl.n	8041d06 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8041c98:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8041c9a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8041c9e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8041ca0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8041ca2:	d127      	bne.n	8041cf4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8041ca4:	f022 0216 	bic.w	r2, r2, #22
 8041ca8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8041caa:	695a      	ldr	r2, [r3, #20]
 8041cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8041cb0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8041cb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8041cb4:	b90a      	cbnz	r2, 8041cba <HAL_DMA_IRQHandler+0xc6>
 8041cb6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8041cb8:	b11a      	cbz	r2, 8041cc2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8041cba:	681a      	ldr	r2, [r3, #0]
 8041cbc:	f022 0208 	bic.w	r2, r2, #8
 8041cc0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041cc2:	233f      	movs	r3, #63	; 0x3f
 8041cc4:	408b      	lsls	r3, r1
 8041cc6:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8041cc8:	2301      	movs	r3, #1
 8041cca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8041cce:	2300      	movs	r3, #0
 8041cd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8041cd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8041cd6:	2b00      	cmp	r3, #0
 8041cd8:	d045      	beq.n	8041d66 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8041cda:	4620      	mov	r0, r4
}
 8041cdc:	b003      	add	sp, #12
 8041cde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8041ce2:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8041ce4:	681a      	ldr	r2, [r3, #0]
 8041ce6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8041ce8:	bf5e      	ittt	pl
 8041cea:	681a      	ldrpl	r2, [r3, #0]
 8041cec:	f022 0208 	bicpl.w	r2, r2, #8
 8041cf0:	601a      	strpl	r2, [r3, #0]
 8041cf2:	e7c2      	b.n	8041c7a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8041cf4:	0350      	lsls	r0, r2, #13
 8041cf6:	d527      	bpl.n	8041d48 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8041cf8:	681b      	ldr	r3, [r3, #0]
 8041cfa:	0319      	lsls	r1, r3, #12
 8041cfc:	d431      	bmi.n	8041d62 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8041cfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8041d00:	b10b      	cbz	r3, 8041d06 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8041d02:	4620      	mov	r0, r4
 8041d04:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8041d06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8041d08:	b36b      	cbz	r3, 8041d66 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8041d0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8041d0c:	07da      	lsls	r2, r3, #31
 8041d0e:	d519      	bpl.n	8041d44 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8041d10:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8041d12:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8041d16:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8041d1a:	2305      	movs	r3, #5
 8041d1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8041d20:	6813      	ldr	r3, [r2, #0]
 8041d22:	f023 0301 	bic.w	r3, r3, #1
 8041d26:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8041d28:	9b01      	ldr	r3, [sp, #4]
 8041d2a:	3301      	adds	r3, #1
 8041d2c:	42bb      	cmp	r3, r7
 8041d2e:	9301      	str	r3, [sp, #4]
 8041d30:	d802      	bhi.n	8041d38 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8041d32:	6813      	ldr	r3, [r2, #0]
 8041d34:	07db      	lsls	r3, r3, #31
 8041d36:	d4f7      	bmi.n	8041d28 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8041d38:	2301      	movs	r3, #1
 8041d3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8041d3e:	2300      	movs	r3, #0
 8041d40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8041d44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8041d46:	e7c6      	b.n	8041cd6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8041d48:	681a      	ldr	r2, [r3, #0]
 8041d4a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8041d4e:	d108      	bne.n	8041d62 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8041d50:	6819      	ldr	r1, [r3, #0]
 8041d52:	f021 0110 	bic.w	r1, r1, #16
 8041d56:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8041d58:	2301      	movs	r3, #1
 8041d5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8041d5e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8041d62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8041d64:	e7cc      	b.n	8041d00 <HAL_DMA_IRQHandler+0x10c>
}
 8041d66:	b003      	add	sp, #12
 8041d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8041d6a:	bf00      	nop
 8041d6c:	200000b8 	.word	0x200000b8

08041d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041d74:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8041f20 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041d78:	4a67      	ldr	r2, [pc, #412]	; (8041f18 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041d7a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8041d7c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8041d7e:	2401      	movs	r4, #1
 8041d80:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8041d82:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8041d86:	43ac      	bics	r4, r5
 8041d88:	f040 80b1 	bne.w	8041eee <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8041d8c:	684d      	ldr	r5, [r1, #4]
 8041d8e:	f005 0403 	and.w	r4, r5, #3
 8041d92:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8041d96:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8041d98:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8041d9a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8041d9e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8041da0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8041da4:	d834      	bhi.n	8041e10 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8041da6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8041da8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041dac:	68cf      	ldr	r7, [r1, #12]
 8041dae:	fa07 f708 	lsl.w	r7, r7, r8
 8041db2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8041db6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8041db8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8041dba:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8041dbe:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8041dc2:	409f      	lsls	r7, r3
 8041dc4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8041dc8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8041dca:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8041dcc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041dd0:	688f      	ldr	r7, [r1, #8]
 8041dd2:	fa07 f708 	lsl.w	r7, r7, r8
 8041dd6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041dda:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8041ddc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041dde:	d119      	bne.n	8041e14 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8041de0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8041de4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8041de8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8041dec:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8041df0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8041df4:	f04f 0e0f 	mov.w	lr, #15
 8041df8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8041dfc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8041e00:	690f      	ldr	r7, [r1, #16]
 8041e02:	fa07 f70b 	lsl.w	r7, r7, fp
 8041e06:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8041e0a:	f8ca 7020 	str.w	r7, [sl, #32]
 8041e0e:	e001      	b.n	8041e14 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8041e10:	2c03      	cmp	r4, #3
 8041e12:	d1da      	bne.n	8041dca <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8041e14:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8041e16:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8041e1a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8041e1c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8041e1e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8041e22:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8041e24:	d063      	beq.n	8041eee <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041e26:	f04f 0a00 	mov.w	sl, #0
 8041e2a:	f8cd a004 	str.w	sl, [sp, #4]
 8041e2e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8041e32:	4c3a      	ldr	r4, [pc, #232]	; (8041f1c <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041e34:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8041e38:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8041e3c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8041e40:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8041e44:	9601      	str	r6, [sp, #4]
 8041e46:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8041e48:	f023 0603 	bic.w	r6, r3, #3
 8041e4c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8041e50:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8041e54:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8041e58:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8041e5c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8041e60:	270f      	movs	r7, #15
 8041e62:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8041e66:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8041e68:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8041e6c:	d046      	beq.n	8041efc <HAL_GPIO_Init+0x18c>
 8041e6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8041e72:	42a0      	cmp	r0, r4
 8041e74:	d044      	beq.n	8041f00 <HAL_GPIO_Init+0x190>
 8041e76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8041e7a:	42a0      	cmp	r0, r4
 8041e7c:	d042      	beq.n	8041f04 <HAL_GPIO_Init+0x194>
 8041e7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8041e82:	42a0      	cmp	r0, r4
 8041e84:	d040      	beq.n	8041f08 <HAL_GPIO_Init+0x198>
 8041e86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8041e8a:	42a0      	cmp	r0, r4
 8041e8c:	d03e      	beq.n	8041f0c <HAL_GPIO_Init+0x19c>
 8041e8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8041e92:	42a0      	cmp	r0, r4
 8041e94:	d03c      	beq.n	8041f10 <HAL_GPIO_Init+0x1a0>
 8041e96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8041e9a:	42a0      	cmp	r0, r4
 8041e9c:	d03a      	beq.n	8041f14 <HAL_GPIO_Init+0x1a4>
 8041e9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8041ea2:	42a0      	cmp	r0, r4
 8041ea4:	bf0c      	ite	eq
 8041ea6:	2407      	moveq	r4, #7
 8041ea8:	2408      	movne	r4, #8
 8041eaa:	fa04 f40e 	lsl.w	r4, r4, lr
 8041eae:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8041eb0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8041eb2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8041eb4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8041eb8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8041eba:	bf54      	ite	pl
 8041ebc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8041ebe:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8041ec2:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8041ec4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041ec6:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8041ec8:	bf54      	ite	pl
 8041eca:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8041ecc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8041ed0:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8041ed2:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041ed4:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8041ed6:	bf54      	ite	pl
 8041ed8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8041eda:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8041ede:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8041ee0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8041ee2:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8041ee4:	bf54      	ite	pl
 8041ee6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8041ee8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8041eec:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041eee:	3301      	adds	r3, #1
 8041ef0:	2b10      	cmp	r3, #16
 8041ef2:	f47f af43 	bne.w	8041d7c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8041ef6:	b003      	add	sp, #12
 8041ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8041efc:	4654      	mov	r4, sl
 8041efe:	e7d4      	b.n	8041eaa <HAL_GPIO_Init+0x13a>
 8041f00:	2401      	movs	r4, #1
 8041f02:	e7d2      	b.n	8041eaa <HAL_GPIO_Init+0x13a>
 8041f04:	2402      	movs	r4, #2
 8041f06:	e7d0      	b.n	8041eaa <HAL_GPIO_Init+0x13a>
 8041f08:	2403      	movs	r4, #3
 8041f0a:	e7ce      	b.n	8041eaa <HAL_GPIO_Init+0x13a>
 8041f0c:	2404      	movs	r4, #4
 8041f0e:	e7cc      	b.n	8041eaa <HAL_GPIO_Init+0x13a>
 8041f10:	2405      	movs	r4, #5
 8041f12:	e7ca      	b.n	8041eaa <HAL_GPIO_Init+0x13a>
 8041f14:	2406      	movs	r4, #6
 8041f16:	e7c8      	b.n	8041eaa <HAL_GPIO_Init+0x13a>
 8041f18:	40013c00 	.word	0x40013c00
 8041f1c:	40020000 	.word	0x40020000
 8041f20:	40023800 	.word	0x40023800

08041f24 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8041f24:	6903      	ldr	r3, [r0, #16]
 8041f26:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8041f28:	bf14      	ite	ne
 8041f2a:	2001      	movne	r0, #1
 8041f2c:	2000      	moveq	r0, #0
 8041f2e:	4770      	bx	lr

08041f30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8041f30:	b10a      	cbz	r2, 8041f36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8041f32:	6181      	str	r1, [r0, #24]
  }
}
 8041f34:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8041f36:	0409      	lsls	r1, r1, #16
 8041f38:	e7fb      	b.n	8041f32 <HAL_GPIO_WritePin+0x2>

08041f3a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8041f3a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8041f3c:	ea01 0203 	and.w	r2, r1, r3
 8041f40:	ea21 0103 	bic.w	r1, r1, r3
 8041f44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8041f48:	6181      	str	r1, [r0, #24]
}
 8041f4a:	4770      	bx	lr

08041f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8041f4c:	4a04      	ldr	r2, [pc, #16]	; (8041f60 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8041f4e:	6951      	ldr	r1, [r2, #20]
 8041f50:	4201      	tst	r1, r0
{
 8041f52:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8041f54:	d002      	beq.n	8041f5c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8041f56:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8041f58:	f002 f8aa 	bl	80440b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8041f5c:	bd08      	pop	{r3, pc}
 8041f5e:	bf00      	nop
 8041f60:	40013c00 	.word	0x40013c00

08041f64 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8041f64:	6801      	ldr	r1, [r0, #0]
 8041f66:	694b      	ldr	r3, [r1, #20]
 8041f68:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8041f6c:	f04f 0200 	mov.w	r2, #0
 8041f70:	d010      	beq.n	8041f94 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8041f72:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8041f76:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8041f78:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8041f7a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8041f7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8041f80:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8041f84:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8041f86:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8041f8a:	f043 0304 	orr.w	r3, r3, #4
 8041f8e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8041f90:	2001      	movs	r0, #1
 8041f92:	4770      	bx	lr
  }
  return HAL_OK;
 8041f94:	4618      	mov	r0, r3
}
 8041f96:	4770      	bx	lr

08041f98 <I2C_WaitOnFlagUntilTimeout>:
{
 8041f98:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8041f9c:	4606      	mov	r6, r0
 8041f9e:	460f      	mov	r7, r1
 8041fa0:	4691      	mov	r9, r2
 8041fa2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8041fa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8041fa8:	6833      	ldr	r3, [r6, #0]
 8041faa:	f1ba 0f01 	cmp.w	sl, #1
 8041fae:	bf0c      	ite	eq
 8041fb0:	695c      	ldreq	r4, [r3, #20]
 8041fb2:	699c      	ldrne	r4, [r3, #24]
 8041fb4:	ea27 0404 	bic.w	r4, r7, r4
 8041fb8:	b2a4      	uxth	r4, r4
 8041fba:	fab4 f484 	clz	r4, r4
 8041fbe:	0964      	lsrs	r4, r4, #5
 8041fc0:	45a1      	cmp	r9, r4
 8041fc2:	d001      	beq.n	8041fc8 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8041fc4:	2000      	movs	r0, #0
 8041fc6:	e017      	b.n	8041ff8 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8041fc8:	1c6a      	adds	r2, r5, #1
 8041fca:	d0ee      	beq.n	8041faa <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8041fcc:	f7ff fc4e 	bl	804186c <HAL_GetTick>
 8041fd0:	9b08      	ldr	r3, [sp, #32]
 8041fd2:	1ac0      	subs	r0, r0, r3
 8041fd4:	42a8      	cmp	r0, r5
 8041fd6:	d801      	bhi.n	8041fdc <I2C_WaitOnFlagUntilTimeout+0x44>
 8041fd8:	2d00      	cmp	r5, #0
 8041fda:	d1e5      	bne.n	8041fa8 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8041fdc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8041fde:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8041fe0:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8041fe2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8041fe6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8041fea:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8041fec:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8041ff0:	f042 0220 	orr.w	r2, r2, #32
 8041ff4:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 8041ff6:	2001      	movs	r0, #1
}
 8041ff8:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08041ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8041ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042000:	4604      	mov	r4, r0
 8042002:	460f      	mov	r7, r1
 8042004:	4616      	mov	r6, r2
 8042006:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8042008:	6825      	ldr	r5, [r4, #0]
 804200a:	6968      	ldr	r0, [r5, #20]
 804200c:	ea27 0000 	bic.w	r0, r7, r0
 8042010:	b280      	uxth	r0, r0
 8042012:	b1b8      	cbz	r0, 8042044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8042014:	696b      	ldr	r3, [r5, #20]
 8042016:	055a      	lsls	r2, r3, #21
 8042018:	d516      	bpl.n	8042048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 804201a:	682b      	ldr	r3, [r5, #0]
 804201c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8042020:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8042022:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8042026:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8042028:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 804202a:	2300      	movs	r3, #0
 804202c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 804202e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042032:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8042036:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8042038:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 804203c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 804203e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8042042:	2001      	movs	r0, #1
}
 8042044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8042048:	1c73      	adds	r3, r6, #1
 804204a:	d0de      	beq.n	804200a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804204c:	f7ff fc0e 	bl	804186c <HAL_GetTick>
 8042050:	eba0 0008 	sub.w	r0, r0, r8
 8042054:	42b0      	cmp	r0, r6
 8042056:	d801      	bhi.n	804205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8042058:	2e00      	cmp	r6, #0
 804205a:	d1d5      	bne.n	8042008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 804205c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 804205e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8042060:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8042062:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042066:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 804206a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 804206c:	f042 0220 	orr.w	r2, r2, #32
 8042070:	e7e4      	b.n	804203c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08042072 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8042072:	b570      	push	{r4, r5, r6, lr}
 8042074:	4604      	mov	r4, r0
 8042076:	460d      	mov	r5, r1
 8042078:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 804207a:	6821      	ldr	r1, [r4, #0]
 804207c:	694b      	ldr	r3, [r1, #20]
 804207e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8042082:	d001      	beq.n	8042088 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8042084:	2000      	movs	r0, #0
 8042086:	e010      	b.n	80420aa <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8042088:	694a      	ldr	r2, [r1, #20]
 804208a:	06d2      	lsls	r2, r2, #27
 804208c:	d50e      	bpl.n	80420ac <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804208e:	f06f 0210 	mvn.w	r2, #16
 8042092:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8042094:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8042096:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8042098:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 804209c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80420a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80420a2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80420a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80420a8:	2001      	movs	r0, #1
}
 80420aa:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80420ac:	f7ff fbde 	bl	804186c <HAL_GetTick>
 80420b0:	1b80      	subs	r0, r0, r6
 80420b2:	42a8      	cmp	r0, r5
 80420b4:	d801      	bhi.n	80420ba <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80420b6:	2d00      	cmp	r5, #0
 80420b8:	d1df      	bne.n	804207a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80420ba:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80420bc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80420be:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80420c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80420c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80420c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80420ca:	f042 0220 	orr.w	r2, r2, #32
 80420ce:	e7e8      	b.n	80420a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080420d0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80420d0:	b570      	push	{r4, r5, r6, lr}
 80420d2:	4604      	mov	r4, r0
 80420d4:	460d      	mov	r5, r1
 80420d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80420d8:	6823      	ldr	r3, [r4, #0]
 80420da:	695b      	ldr	r3, [r3, #20]
 80420dc:	075b      	lsls	r3, r3, #29
 80420de:	d501      	bpl.n	80420e4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80420e0:	2000      	movs	r0, #0
}
 80420e2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80420e4:	4620      	mov	r0, r4
 80420e6:	f7ff ff3d 	bl	8041f64 <I2C_IsAcknowledgeFailed>
 80420ea:	b9a8      	cbnz	r0, 8042118 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80420ec:	1c6a      	adds	r2, r5, #1
 80420ee:	d0f3      	beq.n	80420d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80420f0:	f7ff fbbc 	bl	804186c <HAL_GetTick>
 80420f4:	1b80      	subs	r0, r0, r6
 80420f6:	42a8      	cmp	r0, r5
 80420f8:	d801      	bhi.n	80420fe <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80420fa:	2d00      	cmp	r5, #0
 80420fc:	d1ec      	bne.n	80420d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80420fe:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8042100:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8042102:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8042104:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042108:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 804210c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 804210e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8042112:	f042 0220 	orr.w	r2, r2, #32
 8042116:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8042118:	2001      	movs	r0, #1
 804211a:	e7e2      	b.n	80420e2 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0804211c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 804211c:	b570      	push	{r4, r5, r6, lr}
 804211e:	4604      	mov	r4, r0
 8042120:	460d      	mov	r5, r1
 8042122:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8042124:	6823      	ldr	r3, [r4, #0]
 8042126:	695b      	ldr	r3, [r3, #20]
 8042128:	061b      	lsls	r3, r3, #24
 804212a:	d501      	bpl.n	8042130 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 804212c:	2000      	movs	r0, #0
}
 804212e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8042130:	4620      	mov	r0, r4
 8042132:	f7ff ff17 	bl	8041f64 <I2C_IsAcknowledgeFailed>
 8042136:	b9a8      	cbnz	r0, 8042164 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8042138:	1c6a      	adds	r2, r5, #1
 804213a:	d0f3      	beq.n	8042124 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804213c:	f7ff fb96 	bl	804186c <HAL_GetTick>
 8042140:	1b80      	subs	r0, r0, r6
 8042142:	42a8      	cmp	r0, r5
 8042144:	d801      	bhi.n	804214a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8042146:	2d00      	cmp	r5, #0
 8042148:	d1ec      	bne.n	8042124 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 804214a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 804214c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 804214e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8042150:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8042154:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8042158:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 804215a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 804215e:	f042 0220 	orr.w	r2, r2, #32
 8042162:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8042164:	2001      	movs	r0, #1
 8042166:	e7e2      	b.n	804212e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08042168 <I2C_RequestMemoryWrite>:
{
 8042168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804216c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 804216e:	6802      	ldr	r2, [r0, #0]
{
 8042170:	b085      	sub	sp, #20
 8042172:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8042176:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8042178:	6813      	ldr	r3, [r2, #0]
 804217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804217e:	6013      	str	r3, [r2, #0]
{
 8042180:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8042182:	463b      	mov	r3, r7
 8042184:	f8cd 8000 	str.w	r8, [sp]
 8042188:	2200      	movs	r2, #0
 804218a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 804218e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8042190:	f7ff ff02 	bl	8041f98 <I2C_WaitOnFlagUntilTimeout>
 8042194:	6823      	ldr	r3, [r4, #0]
 8042196:	b138      	cbz	r0, 80421a8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8042198:	681b      	ldr	r3, [r3, #0]
 804219a:	05db      	lsls	r3, r3, #23
 804219c:	d502      	bpl.n	80421a4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 804219e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80421a2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80421a4:	2003      	movs	r0, #3
 80421a6:	e00a      	b.n	80421be <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80421a8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80421ac:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80421ae:	4919      	ldr	r1, [pc, #100]	; (8042214 <I2C_RequestMemoryWrite+0xac>)
 80421b0:	4643      	mov	r3, r8
 80421b2:	463a      	mov	r2, r7
 80421b4:	4620      	mov	r0, r4
 80421b6:	f7ff ff21 	bl	8041ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80421ba:	b118      	cbz	r0, 80421c4 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80421bc:	2001      	movs	r0, #1
}
 80421be:	b005      	add	sp, #20
 80421c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80421c4:	6823      	ldr	r3, [r4, #0]
 80421c6:	9003      	str	r0, [sp, #12]
 80421c8:	695a      	ldr	r2, [r3, #20]
 80421ca:	9203      	str	r2, [sp, #12]
 80421cc:	699b      	ldr	r3, [r3, #24]
 80421ce:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80421d0:	4642      	mov	r2, r8
 80421d2:	4639      	mov	r1, r7
 80421d4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80421d6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80421d8:	f7ff ffa0 	bl	804211c <I2C_WaitOnTXEFlagUntilTimeout>
 80421dc:	b140      	cbz	r0, 80421f0 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80421de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80421e0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80421e2:	bf01      	itttt	eq
 80421e4:	6822      	ldreq	r2, [r4, #0]
 80421e6:	6813      	ldreq	r3, [r2, #0]
 80421e8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80421ec:	6013      	streq	r3, [r2, #0]
 80421ee:	e7e5      	b.n	80421bc <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80421f0:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80421f4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80421f6:	d102      	bne.n	80421fe <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80421f8:	b2ed      	uxtb	r5, r5
 80421fa:	611d      	str	r5, [r3, #16]
 80421fc:	e7df      	b.n	80421be <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80421fe:	0a2a      	lsrs	r2, r5, #8
 8042200:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042202:	4639      	mov	r1, r7
 8042204:	4642      	mov	r2, r8
 8042206:	4620      	mov	r0, r4
 8042208:	f7ff ff88 	bl	804211c <I2C_WaitOnTXEFlagUntilTimeout>
 804220c:	2800      	cmp	r0, #0
 804220e:	d1e6      	bne.n	80421de <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8042210:	6823      	ldr	r3, [r4, #0]
 8042212:	e7f1      	b.n	80421f8 <I2C_RequestMemoryWrite+0x90>
 8042214:	00010002 	.word	0x00010002

08042218 <I2C_RequestMemoryRead>:
{
 8042218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804221c:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 804221e:	6803      	ldr	r3, [r0, #0]
{
 8042220:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8042222:	681a      	ldr	r2, [r3, #0]
 8042224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8042228:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 804222a:	681a      	ldr	r2, [r3, #0]
{
 804222c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8042230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8042234:	601a      	str	r2, [r3, #0]
{
 8042236:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8042238:	463b      	mov	r3, r7
 804223a:	f8cd 8000 	str.w	r8, [sp]
 804223e:	2200      	movs	r2, #0
 8042240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8042244:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8042246:	f7ff fea7 	bl	8041f98 <I2C_WaitOnFlagUntilTimeout>
 804224a:	6823      	ldr	r3, [r4, #0]
 804224c:	b148      	cbz	r0, 8042262 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 804224e:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8042250:	05db      	lsls	r3, r3, #23
 8042252:	d502      	bpl.n	804225a <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8042254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8042258:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 804225a:	2003      	movs	r0, #3
}
 804225c:	b004      	add	sp, #16
 804225e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8042262:	fa5f f986 	uxtb.w	r9, r6
 8042266:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 804226a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 804226c:	492a      	ldr	r1, [pc, #168]	; (8042318 <I2C_RequestMemoryRead+0x100>)
 804226e:	4643      	mov	r3, r8
 8042270:	463a      	mov	r2, r7
 8042272:	4620      	mov	r0, r4
 8042274:	f7ff fec2 	bl	8041ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8042278:	b108      	cbz	r0, 804227e <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 804227a:	2001      	movs	r0, #1
 804227c:	e7ee      	b.n	804225c <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804227e:	6823      	ldr	r3, [r4, #0]
 8042280:	9003      	str	r0, [sp, #12]
 8042282:	695a      	ldr	r2, [r3, #20]
 8042284:	9203      	str	r2, [sp, #12]
 8042286:	699b      	ldr	r3, [r3, #24]
 8042288:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 804228a:	4642      	mov	r2, r8
 804228c:	4639      	mov	r1, r7
 804228e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8042290:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042292:	f7ff ff43 	bl	804211c <I2C_WaitOnTXEFlagUntilTimeout>
 8042296:	b140      	cbz	r0, 80422aa <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8042298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804229a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 804229c:	bf01      	itttt	eq
 804229e:	6822      	ldreq	r2, [r4, #0]
 80422a0:	6813      	ldreq	r3, [r2, #0]
 80422a2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80422a6:	6013      	streq	r3, [r2, #0]
 80422a8:	e7e7      	b.n	804227a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80422aa:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80422ae:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80422b0:	d11a      	bne.n	80422e8 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80422b2:	b2ed      	uxtb	r5, r5
 80422b4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80422b6:	4642      	mov	r2, r8
 80422b8:	4639      	mov	r1, r7
 80422ba:	4620      	mov	r0, r4
 80422bc:	f7ff ff2e 	bl	804211c <I2C_WaitOnTXEFlagUntilTimeout>
 80422c0:	2800      	cmp	r0, #0
 80422c2:	d1e9      	bne.n	8042298 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80422c4:	6822      	ldr	r2, [r4, #0]
 80422c6:	6813      	ldr	r3, [r2, #0]
 80422c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80422cc:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80422ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80422d2:	4602      	mov	r2, r0
 80422d4:	f8cd 8000 	str.w	r8, [sp]
 80422d8:	463b      	mov	r3, r7
 80422da:	4620      	mov	r0, r4
 80422dc:	f7ff fe5c 	bl	8041f98 <I2C_WaitOnFlagUntilTimeout>
 80422e0:	6822      	ldr	r2, [r4, #0]
 80422e2:	b160      	cbz	r0, 80422fe <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80422e4:	6813      	ldr	r3, [r2, #0]
 80422e6:	e7b3      	b.n	8042250 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80422e8:	0a2a      	lsrs	r2, r5, #8
 80422ea:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80422ec:	4639      	mov	r1, r7
 80422ee:	4642      	mov	r2, r8
 80422f0:	4620      	mov	r0, r4
 80422f2:	f7ff ff13 	bl	804211c <I2C_WaitOnTXEFlagUntilTimeout>
 80422f6:	2800      	cmp	r0, #0
 80422f8:	d1ce      	bne.n	8042298 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80422fa:	6823      	ldr	r3, [r4, #0]
 80422fc:	e7d9      	b.n	80422b2 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80422fe:	f049 0301 	orr.w	r3, r9, #1
 8042302:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8042304:	4904      	ldr	r1, [pc, #16]	; (8042318 <I2C_RequestMemoryRead+0x100>)
 8042306:	4643      	mov	r3, r8
 8042308:	463a      	mov	r2, r7
 804230a:	4620      	mov	r0, r4
 804230c:	f7ff fe76 	bl	8041ffc <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8042310:	3800      	subs	r0, #0
 8042312:	bf18      	it	ne
 8042314:	2001      	movne	r0, #1
 8042316:	e7a1      	b.n	804225c <I2C_RequestMemoryRead+0x44>
 8042318:	00010002 	.word	0x00010002

0804231c <HAL_I2C_MspInit>:
}
 804231c:	4770      	bx	lr
	...

08042320 <HAL_I2C_Init>:
{
 8042320:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8042322:	4604      	mov	r4, r0
 8042324:	b908      	cbnz	r0, 804232a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8042326:	2001      	movs	r0, #1
}
 8042328:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 804232a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 804232e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8042332:	b91b      	cbnz	r3, 804233c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8042334:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8042338:	f7ff fff0 	bl	804231c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 804233c:	2324      	movs	r3, #36	; 0x24
 804233e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8042342:	6823      	ldr	r3, [r4, #0]
 8042344:	681a      	ldr	r2, [r3, #0]
 8042346:	f022 0201 	bic.w	r2, r2, #1
 804234a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 804234c:	681a      	ldr	r2, [r3, #0]
 804234e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8042352:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8042354:	681a      	ldr	r2, [r3, #0]
 8042356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804235a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 804235c:	f001 f9a4 	bl	80436a8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8042360:	4b3f      	ldr	r3, [pc, #252]	; (8042460 <HAL_I2C_Init+0x140>)
 8042362:	6865      	ldr	r5, [r4, #4]
 8042364:	429d      	cmp	r5, r3
 8042366:	bf94      	ite	ls
 8042368:	4b3e      	ldrls	r3, [pc, #248]	; (8042464 <HAL_I2C_Init+0x144>)
 804236a:	4b3f      	ldrhi	r3, [pc, #252]	; (8042468 <HAL_I2C_Init+0x148>)
 804236c:	4298      	cmp	r0, r3
 804236e:	bf8c      	ite	hi
 8042370:	2300      	movhi	r3, #0
 8042372:	2301      	movls	r3, #1
 8042374:	2b00      	cmp	r3, #0
 8042376:	d1d6      	bne.n	8042326 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8042378:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 804237a:	4e39      	ldr	r6, [pc, #228]	; (8042460 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 804237c:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 804237e:	493b      	ldr	r1, [pc, #236]	; (804246c <HAL_I2C_Init+0x14c>)
 8042380:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8042384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8042388:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 804238a:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 804238c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 804238e:	bf88      	it	hi
 8042390:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8042394:	6a13      	ldr	r3, [r2, #32]
 8042396:	bf88      	it	hi
 8042398:	4371      	mulhi	r1, r6
 804239a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 804239e:	bf84      	itt	hi
 80423a0:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80423a4:	fbb1 f1f6 	udivhi	r1, r1, r6
 80423a8:	3101      	adds	r1, #1
 80423aa:	4319      	orrs	r1, r3
 80423ac:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80423ae:	69d1      	ldr	r1, [r2, #28]
 80423b0:	1e43      	subs	r3, r0, #1
 80423b2:	482b      	ldr	r0, [pc, #172]	; (8042460 <HAL_I2C_Init+0x140>)
 80423b4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80423b8:	4285      	cmp	r5, r0
 80423ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80423be:	d832      	bhi.n	8042426 <HAL_I2C_Init+0x106>
 80423c0:	006d      	lsls	r5, r5, #1
 80423c2:	f640 70fc 	movw	r0, #4092	; 0xffc
 80423c6:	fbb3 f3f5 	udiv	r3, r3, r5
 80423ca:	3301      	adds	r3, #1
 80423cc:	4203      	tst	r3, r0
 80423ce:	d042      	beq.n	8042456 <HAL_I2C_Init+0x136>
 80423d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80423d4:	430b      	orrs	r3, r1
 80423d6:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80423d8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80423dc:	6811      	ldr	r1, [r2, #0]
 80423de:	4303      	orrs	r3, r0
 80423e0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80423e4:	430b      	orrs	r3, r1
 80423e6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80423e8:	6891      	ldr	r1, [r2, #8]
 80423ea:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80423ee:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80423f2:	4303      	orrs	r3, r0
 80423f4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80423f8:	430b      	orrs	r3, r1
 80423fa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80423fc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8042400:	68d1      	ldr	r1, [r2, #12]
 8042402:	4303      	orrs	r3, r0
 8042404:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8042408:	430b      	orrs	r3, r1
 804240a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 804240c:	6813      	ldr	r3, [r2, #0]
 804240e:	f043 0301 	orr.w	r3, r3, #1
 8042412:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8042414:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8042416:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8042418:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 804241a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 804241e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8042420:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8042424:	e780      	b.n	8042328 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8042426:	68a0      	ldr	r0, [r4, #8]
 8042428:	b950      	cbnz	r0, 8042440 <HAL_I2C_Init+0x120>
 804242a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804242e:	fbb3 f3f5 	udiv	r3, r3, r5
 8042432:	3301      	adds	r3, #1
 8042434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8042438:	b17b      	cbz	r3, 804245a <HAL_I2C_Init+0x13a>
 804243a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804243e:	e7c9      	b.n	80423d4 <HAL_I2C_Init+0xb4>
 8042440:	2019      	movs	r0, #25
 8042442:	4345      	muls	r5, r0
 8042444:	fbb3 f3f5 	udiv	r3, r3, r5
 8042448:	3301      	adds	r3, #1
 804244a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804244e:	b123      	cbz	r3, 804245a <HAL_I2C_Init+0x13a>
 8042450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8042454:	e7be      	b.n	80423d4 <HAL_I2C_Init+0xb4>
 8042456:	2304      	movs	r3, #4
 8042458:	e7bc      	b.n	80423d4 <HAL_I2C_Init+0xb4>
 804245a:	2301      	movs	r3, #1
 804245c:	e7ba      	b.n	80423d4 <HAL_I2C_Init+0xb4>
 804245e:	bf00      	nop
 8042460:	000186a0 	.word	0x000186a0
 8042464:	001e847f 	.word	0x001e847f
 8042468:	003d08ff 	.word	0x003d08ff
 804246c:	000f4240 	.word	0x000f4240

08042470 <HAL_I2C_MspDeInit>:
 8042470:	4770      	bx	lr

08042472 <HAL_I2C_DeInit>:
{
 8042472:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8042474:	4604      	mov	r4, r0
 8042476:	b198      	cbz	r0, 80424a0 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8042478:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 804247a:	2324      	movs	r3, #36	; 0x24
 804247c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8042480:	6813      	ldr	r3, [r2, #0]
 8042482:	f023 0301 	bic.w	r3, r3, #1
 8042486:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8042488:	f7ff fff2 	bl	8042470 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 804248c:	2000      	movs	r0, #0
 804248e:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8042490:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8042494:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8042498:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 804249a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 804249e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80424a0:	2001      	movs	r0, #1
 80424a2:	e7fc      	b.n	804249e <HAL_I2C_DeInit+0x2c>

080424a4 <HAL_I2C_Mem_Write>:
{
 80424a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80424a8:	4604      	mov	r4, r0
 80424aa:	4699      	mov	r9, r3
 80424ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80424ae:	460f      	mov	r7, r1
 80424b0:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80424b2:	f7ff f9db 	bl	804186c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80424b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80424ba:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80424bc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80424be:	d003      	beq.n	80424c8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80424c0:	2002      	movs	r0, #2
}
 80424c2:	b003      	add	sp, #12
 80424c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80424c8:	9000      	str	r0, [sp, #0]
 80424ca:	493c      	ldr	r1, [pc, #240]	; (80425bc <HAL_I2C_Mem_Write+0x118>)
 80424cc:	2319      	movs	r3, #25
 80424ce:	2201      	movs	r2, #1
 80424d0:	4620      	mov	r0, r4
 80424d2:	f7ff fd61 	bl	8041f98 <I2C_WaitOnFlagUntilTimeout>
 80424d6:	2800      	cmp	r0, #0
 80424d8:	d1f2      	bne.n	80424c0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80424da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80424de:	2b01      	cmp	r3, #1
 80424e0:	d0ee      	beq.n	80424c0 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80424e2:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80424e4:	2301      	movs	r3, #1
 80424e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80424ea:	6803      	ldr	r3, [r0, #0]
 80424ec:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80424ee:	bf5e      	ittt	pl
 80424f0:	6803      	ldrpl	r3, [r0, #0]
 80424f2:	f043 0301 	orrpl.w	r3, r3, #1
 80424f6:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80424f8:	6803      	ldr	r3, [r0, #0]
 80424fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80424fe:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8042500:	2321      	movs	r3, #33	; 0x21
 8042502:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8042506:	2340      	movs	r3, #64	; 0x40
 8042508:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 804250c:	2300      	movs	r3, #0
 804250e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8042510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8042512:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8042514:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8042518:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 804251a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804251c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 804251e:	4b28      	ldr	r3, [pc, #160]	; (80425c0 <HAL_I2C_Mem_Write+0x11c>)
 8042520:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8042522:	e9cd 6500 	strd	r6, r5, [sp]
 8042526:	464b      	mov	r3, r9
 8042528:	4642      	mov	r2, r8
 804252a:	4639      	mov	r1, r7
 804252c:	4620      	mov	r0, r4
 804252e:	f7ff fe1b 	bl	8042168 <I2C_RequestMemoryWrite>
 8042532:	2800      	cmp	r0, #0
 8042534:	d02a      	beq.n	804258c <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8042536:	2001      	movs	r0, #1
 8042538:	e7c3      	b.n	80424c2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804253a:	f7ff fdef 	bl	804211c <I2C_WaitOnTXEFlagUntilTimeout>
 804253e:	b140      	cbz	r0, 8042552 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8042540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8042542:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042544:	bf01      	itttt	eq
 8042546:	6822      	ldreq	r2, [r4, #0]
 8042548:	6813      	ldreq	r3, [r2, #0]
 804254a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 804254e:	6013      	streq	r3, [r2, #0]
 8042550:	e7f1      	b.n	8042536 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8042552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8042554:	6827      	ldr	r7, [r4, #0]
 8042556:	461a      	mov	r2, r3
 8042558:	f812 1b01 	ldrb.w	r1, [r2], #1
 804255c:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 804255e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8042560:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8042562:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8042564:	3a01      	subs	r2, #1
 8042566:	b292      	uxth	r2, r2
 8042568:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 804256a:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 804256c:	1e48      	subs	r0, r1, #1
 804256e:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8042570:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8042572:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8042574:	d50a      	bpl.n	804258c <HAL_I2C_Mem_Write+0xe8>
 8042576:	b148      	cbz	r0, 804258c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8042578:	785a      	ldrb	r2, [r3, #1]
 804257a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 804257c:	3302      	adds	r3, #2
 804257e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8042580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8042582:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8042584:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8042586:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8042588:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 804258a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 804258c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804258e:	462a      	mov	r2, r5
 8042590:	4631      	mov	r1, r6
 8042592:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8042594:	2b00      	cmp	r3, #0
 8042596:	d1d0      	bne.n	804253a <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8042598:	f7ff fd9a 	bl	80420d0 <I2C_WaitOnBTFFlagUntilTimeout>
 804259c:	2800      	cmp	r0, #0
 804259e:	d1cf      	bne.n	8042540 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80425a0:	6822      	ldr	r2, [r4, #0]
 80425a2:	6813      	ldr	r3, [r2, #0]
 80425a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80425a8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80425aa:	2320      	movs	r3, #32
 80425ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80425b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80425b4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80425b8:	e783      	b.n	80424c2 <HAL_I2C_Mem_Write+0x1e>
 80425ba:	bf00      	nop
 80425bc:	00100002 	.word	0x00100002
 80425c0:	ffff0000 	.word	0xffff0000

080425c4 <HAL_I2C_Mem_Read>:
{
 80425c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80425c8:	4604      	mov	r4, r0
 80425ca:	b087      	sub	sp, #28
 80425cc:	4699      	mov	r9, r3
 80425ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80425d0:	460d      	mov	r5, r1
 80425d2:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80425d4:	f7ff f94a 	bl	804186c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80425d8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80425dc:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80425de:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80425e0:	d004      	beq.n	80425ec <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80425e2:	2502      	movs	r5, #2
}
 80425e4:	4628      	mov	r0, r5
 80425e6:	b007      	add	sp, #28
 80425e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80425ec:	9000      	str	r0, [sp, #0]
 80425ee:	4976      	ldr	r1, [pc, #472]	; (80427c8 <HAL_I2C_Mem_Read+0x204>)
 80425f0:	2319      	movs	r3, #25
 80425f2:	2201      	movs	r2, #1
 80425f4:	4620      	mov	r0, r4
 80425f6:	f7ff fccf 	bl	8041f98 <I2C_WaitOnFlagUntilTimeout>
 80425fa:	2800      	cmp	r0, #0
 80425fc:	d1f1      	bne.n	80425e2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80425fe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8042602:	2b01      	cmp	r3, #1
 8042604:	d0ed      	beq.n	80425e2 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8042606:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8042608:	2301      	movs	r3, #1
 804260a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 804260e:	6803      	ldr	r3, [r0, #0]
 8042610:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8042612:	bf5e      	ittt	pl
 8042614:	6803      	ldrpl	r3, [r0, #0]
 8042616:	f043 0301 	orrpl.w	r3, r3, #1
 804261a:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 804261c:	6803      	ldr	r3, [r0, #0]
 804261e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8042622:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8042624:	2322      	movs	r3, #34	; 0x22
 8042626:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 804262a:	2340      	movs	r3, #64	; 0x40
 804262c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8042630:	2300      	movs	r3, #0
 8042632:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8042634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8042636:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8042638:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 804263c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 804263e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8042640:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8042642:	4b62      	ldr	r3, [pc, #392]	; (80427cc <HAL_I2C_Mem_Read+0x208>)
 8042644:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8042646:	4629      	mov	r1, r5
 8042648:	e9cd 7600 	strd	r7, r6, [sp]
 804264c:	464b      	mov	r3, r9
 804264e:	4642      	mov	r2, r8
 8042650:	4620      	mov	r0, r4
 8042652:	f7ff fde1 	bl	8042218 <I2C_RequestMemoryRead>
 8042656:	4605      	mov	r5, r0
 8042658:	b108      	cbz	r0, 804265e <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 804265a:	2501      	movs	r5, #1
 804265c:	e7c2      	b.n	80425e4 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 804265e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8042660:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8042662:	b9b2      	cbnz	r2, 8042692 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8042664:	9002      	str	r0, [sp, #8]
 8042666:	695a      	ldr	r2, [r3, #20]
 8042668:	9202      	str	r2, [sp, #8]
 804266a:	699a      	ldr	r2, [r3, #24]
 804266c:	9202      	str	r2, [sp, #8]
 804266e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042670:	681a      	ldr	r2, [r3, #0]
 8042672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042676:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8042678:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80427d0 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 804267c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 804267e:	2b00      	cmp	r3, #0
 8042680:	d12c      	bne.n	80426dc <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8042682:	2220      	movs	r2, #32
 8042684:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8042688:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 804268c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8042690:	e7a8      	b.n	80425e4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8042692:	2a01      	cmp	r2, #1
 8042694:	d10a      	bne.n	80426ac <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8042696:	681a      	ldr	r2, [r3, #0]
 8042698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 804269c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 804269e:	9003      	str	r0, [sp, #12]
 80426a0:	695a      	ldr	r2, [r3, #20]
 80426a2:	9203      	str	r2, [sp, #12]
 80426a4:	699a      	ldr	r2, [r3, #24]
 80426a6:	9203      	str	r2, [sp, #12]
 80426a8:	9a03      	ldr	r2, [sp, #12]
 80426aa:	e7e1      	b.n	8042670 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80426ac:	2a02      	cmp	r2, #2
 80426ae:	d10e      	bne.n	80426ce <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80426b0:	681a      	ldr	r2, [r3, #0]
 80426b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80426b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80426b8:	681a      	ldr	r2, [r3, #0]
 80426ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80426be:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80426c0:	9004      	str	r0, [sp, #16]
 80426c2:	695a      	ldr	r2, [r3, #20]
 80426c4:	9204      	str	r2, [sp, #16]
 80426c6:	699b      	ldr	r3, [r3, #24]
 80426c8:	9304      	str	r3, [sp, #16]
 80426ca:	9b04      	ldr	r3, [sp, #16]
 80426cc:	e7d4      	b.n	8042678 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80426ce:	9005      	str	r0, [sp, #20]
 80426d0:	695a      	ldr	r2, [r3, #20]
 80426d2:	9205      	str	r2, [sp, #20]
 80426d4:	699b      	ldr	r3, [r3, #24]
 80426d6:	9305      	str	r3, [sp, #20]
 80426d8:	9b05      	ldr	r3, [sp, #20]
 80426da:	e7cd      	b.n	8042678 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80426dc:	2b03      	cmp	r3, #3
 80426de:	d856      	bhi.n	804278e <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 80426e0:	2b01      	cmp	r3, #1
 80426e2:	d115      	bne.n	8042710 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80426e4:	4632      	mov	r2, r6
 80426e6:	4639      	mov	r1, r7
 80426e8:	4620      	mov	r0, r4
 80426ea:	f7ff fcc2 	bl	8042072 <I2C_WaitOnRXNEFlagUntilTimeout>
 80426ee:	2800      	cmp	r0, #0
 80426f0:	d1b3      	bne.n	804265a <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80426f2:	6823      	ldr	r3, [r4, #0]
 80426f4:	691a      	ldr	r2, [r3, #16]
 80426f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80426f8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80426fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80426fc:	3301      	adds	r3, #1
 80426fe:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8042700:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8042702:	3b01      	subs	r3, #1
 8042704:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8042706:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8042708:	3b01      	subs	r3, #1
 804270a:	b29b      	uxth	r3, r3
 804270c:	8563      	strh	r3, [r4, #42]	; 0x2a
 804270e:	e7b5      	b.n	804267c <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8042710:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8042712:	9600      	str	r6, [sp, #0]
 8042714:	463b      	mov	r3, r7
 8042716:	f04f 0200 	mov.w	r2, #0
 804271a:	4641      	mov	r1, r8
 804271c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 804271e:	d119      	bne.n	8042754 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8042720:	f7ff fc3a 	bl	8041f98 <I2C_WaitOnFlagUntilTimeout>
 8042724:	2800      	cmp	r0, #0
 8042726:	d198      	bne.n	804265a <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8042728:	6823      	ldr	r3, [r4, #0]
 804272a:	681a      	ldr	r2, [r3, #0]
 804272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8042730:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8042732:	691a      	ldr	r2, [r3, #16]
 8042734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8042736:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8042738:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804273a:	1c53      	adds	r3, r2, #1
 804273c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 804273e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8042740:	3b01      	subs	r3, #1
 8042742:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8042744:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8042746:	3b01      	subs	r3, #1
 8042748:	b29b      	uxth	r3, r3
 804274a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 804274c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 804274e:	691b      	ldr	r3, [r3, #16]
 8042750:	7053      	strb	r3, [r2, #1]
 8042752:	e7d2      	b.n	80426fa <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8042754:	f7ff fc20 	bl	8041f98 <I2C_WaitOnFlagUntilTimeout>
 8042758:	2800      	cmp	r0, #0
 804275a:	f47f af7e 	bne.w	804265a <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 804275e:	6823      	ldr	r3, [r4, #0]
 8042760:	681a      	ldr	r2, [r3, #0]
 8042762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8042766:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8042768:	691a      	ldr	r2, [r3, #16]
 804276a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804276c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 804276e:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8042770:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8042772:	3301      	adds	r3, #1
 8042774:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8042776:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8042778:	3b01      	subs	r3, #1
 804277a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 804277c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804277e:	3b01      	subs	r3, #1
 8042780:	b29b      	uxth	r3, r3
 8042782:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8042784:	4602      	mov	r2, r0
 8042786:	463b      	mov	r3, r7
 8042788:	4641      	mov	r1, r8
 804278a:	4620      	mov	r0, r4
 804278c:	e7c8      	b.n	8042720 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804278e:	4632      	mov	r2, r6
 8042790:	4639      	mov	r1, r7
 8042792:	4620      	mov	r0, r4
 8042794:	f7ff fc6d 	bl	8042072 <I2C_WaitOnRXNEFlagUntilTimeout>
 8042798:	2800      	cmp	r0, #0
 804279a:	f47f af5e 	bne.w	804265a <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 804279e:	6823      	ldr	r3, [r4, #0]
 80427a0:	691a      	ldr	r2, [r3, #16]
 80427a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80427a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80427a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80427a8:	1c53      	adds	r3, r2, #1
 80427aa:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80427ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80427ae:	3b01      	subs	r3, #1
 80427b0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80427b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80427b4:	3b01      	subs	r3, #1
 80427b6:	b29b      	uxth	r3, r3
 80427b8:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80427ba:	6823      	ldr	r3, [r4, #0]
 80427bc:	6959      	ldr	r1, [r3, #20]
 80427be:	0749      	lsls	r1, r1, #29
 80427c0:	f57f af5c 	bpl.w	804267c <HAL_I2C_Mem_Read+0xb8>
 80427c4:	e7c3      	b.n	804274e <HAL_I2C_Mem_Read+0x18a>
 80427c6:	bf00      	nop
 80427c8:	00100002 	.word	0x00100002
 80427cc:	ffff0000 	.word	0xffff0000
 80427d0:	00010004 	.word	0x00010004

080427d4 <HAL_I2C_GetState>:
  return hi2c->State;
 80427d4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80427d8:	4770      	bx	lr

080427da <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80427da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80427de:	4604      	mov	r4, r0
 80427e0:	460f      	mov	r7, r1
 80427e2:	4616      	mov	r6, r2
 80427e4:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80427e6:	f7ff f841 	bl	804186c <HAL_GetTick>
 80427ea:	4680      	mov	r8, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80427ec:	6822      	ldr	r2, [r4, #0]
 80427ee:	6893      	ldr	r3, [r2, #8]
 80427f0:	ea37 0303 	bics.w	r3, r7, r3
 80427f4:	bf0c      	ite	eq
 80427f6:	2301      	moveq	r3, #1
 80427f8:	2300      	movne	r3, #0
 80427fa:	42b3      	cmp	r3, r6
 80427fc:	d101      	bne.n	8042802 <I2S_WaitFlagStateUntilTimeout+0x28>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80427fe:	2000      	movs	r0, #0
 8042800:	e00e      	b.n	8042820 <I2S_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 8042802:	1c6b      	adds	r3, r5, #1
 8042804:	d0f3      	beq.n	80427ee <I2S_WaitFlagStateUntilTimeout+0x14>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8042806:	f7ff f831 	bl	804186c <HAL_GetTick>
 804280a:	eba0 0008 	sub.w	r0, r0, r8
 804280e:	42a8      	cmp	r0, r5
 8042810:	d3ec      	bcc.n	80427ec <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 8042812:	2301      	movs	r3, #1
 8042814:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2s);
 8042818:	2300      	movs	r3, #0
 804281a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 804281e:	2003      	movs	r0, #3
}
 8042820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08042824 <HAL_I2S_MspInit>:
}
 8042824:	4770      	bx	lr
	...

08042828 <HAL_I2S_Init>:
{
 8042828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s == NULL)
 804282a:	4604      	mov	r4, r0
 804282c:	2800      	cmp	r0, #0
 804282e:	f000 8086 	beq.w	804293e <HAL_I2S_Init+0x116>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8042832:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8042836:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 804283a:	b92b      	cbnz	r3, 8042848 <HAL_I2S_Init+0x20>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 804283c:	4b42      	ldr	r3, [pc, #264]	; (8042948 <HAL_I2S_Init+0x120>)
    hi2s->Lock = HAL_UNLOCKED;
 804283e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8042842:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8042844:	f7ff ffee 	bl	8042824 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8042848:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 804284a:	2102      	movs	r1, #2
 804284c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8042850:	69d3      	ldr	r3, [r2, #28]
 8042852:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8042856:	f023 030f 	bic.w	r3, r3, #15
 804285a:	61d3      	str	r3, [r2, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 804285c:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 804285e:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8042860:	428b      	cmp	r3, r1
 8042862:	d06e      	beq.n	8042942 <HAL_I2S_Init+0x11a>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8042864:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 8042866:	2b00      	cmp	r3, #0
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8042868:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 804286a:	bf0c      	ite	eq
 804286c:	2510      	moveq	r5, #16
 804286e:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8042870:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8042872:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8042874:	bf98      	it	ls
 8042876:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8042878:	f000 ffd6 	bl	8043828 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 804287c:	6923      	ldr	r3, [r4, #16]
 804287e:	6962      	ldr	r2, [r4, #20]
 8042880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042884:	d153      	bne.n	804292e <HAL_I2S_Init+0x106>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8042886:	68e1      	ldr	r1, [r4, #12]
 8042888:	230a      	movs	r3, #10
 804288a:	2900      	cmp	r1, #0
 804288c:	d04d      	beq.n	804292a <HAL_I2S_Init+0x102>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 804288e:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8042890:	fbb0 f0f5 	udiv	r0, r0, r5
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8042894:	4343      	muls	r3, r0
 8042896:	fbb3 f3f2 	udiv	r3, r3, r2
    tmp = tmp / 10U;
 804289a:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 804289c:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 804289e:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80428a2:	f003 0201 	and.w	r2, r3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80428a6:	085b      	lsrs	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80428a8:	1e99      	subs	r1, r3, #2
 80428aa:	29fd      	cmp	r1, #253	; 0xfd
 80428ac:	d843      	bhi.n	8042936 <HAL_I2S_Init+0x10e>
    i2sodd = (uint32_t)(i2sodd << 8U);
 80428ae:	0212      	lsls	r2, r2, #8
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80428b0:	4313      	orrs	r3, r2
 80428b2:	6922      	ldr	r2, [r4, #16]
 80428b4:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80428b6:	4f25      	ldr	r7, [pc, #148]	; (804294c <HAL_I2S_Init+0x124>)
 80428b8:	68e5      	ldr	r5, [r4, #12]
 80428ba:	69a0      	ldr	r0, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80428bc:	4313      	orrs	r3, r2
 80428be:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80428c0:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 80428c4:	69ca      	ldr	r2, [r1, #28]
 80428c6:	ea46 0c03 	orr.w	ip, r6, r3
 80428ca:	403a      	ands	r2, r7
 80428cc:	ea42 020c 	orr.w	r2, r2, ip
 80428d0:	432a      	orrs	r2, r5
 80428d2:	4302      	orrs	r2, r0
 80428d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80428d8:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80428da:	6a22      	ldr	r2, [r4, #32]
 80428dc:	2a01      	cmp	r2, #1
 80428de:	d11e      	bne.n	804291e <HAL_I2S_Init+0xf6>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80428e0:	4a1b      	ldr	r2, [pc, #108]	; (8042950 <HAL_I2S_Init+0x128>)
 80428e2:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80428e4:	f8df c070 	ldr.w	ip, [pc, #112]	; 8042958 <HAL_I2S_Init+0x130>
 80428e8:	4a1a      	ldr	r2, [pc, #104]	; (8042954 <HAL_I2S_Init+0x12c>)
 80428ea:	4561      	cmp	r1, ip
 80428ec:	bf18      	it	ne
 80428ee:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 80428f2:	f436 7600 	bics.w	r6, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80428f6:	69d1      	ldr	r1, [r2, #28]
 80428f8:	ea01 0107 	and.w	r1, r1, r7
 80428fc:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80428fe:	f04f 0102 	mov.w	r1, #2
 8042902:	6211      	str	r1, [r2, #32]
      tmp = I2S_MODE_SLAVE_TX;
 8042904:	bf0c      	ite	eq
 8042906:	f44f 7680 	moveq.w	r6, #256	; 0x100
 804290a:	2600      	movne	r6, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 804290c:	432b      	orrs	r3, r5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 804290e:	69d1      	ldr	r1, [r2, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8042910:	4333      	orrs	r3, r6
 8042912:	4303      	orrs	r3, r0
 8042914:	430b      	orrs	r3, r1
 8042916:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8042918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 804291c:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 804291e:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8042920:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8042922:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8042924:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8042928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 804292a:	00ed      	lsls	r5, r5, #3
 804292c:	e7b0      	b.n	8042890 <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 804292e:	fbb0 f3f5 	udiv	r3, r0, r5
 8042932:	200a      	movs	r0, #10
 8042934:	e7ae      	b.n	8042894 <HAL_I2S_Init+0x6c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8042936:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042938:	f043 0310 	orr.w	r3, r3, #16
 804293c:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 804293e:	2001      	movs	r0, #1
 8042940:	e7f2      	b.n	8042928 <HAL_I2S_Init+0x100>
    i2sodd = 0U;
 8042942:	2200      	movs	r2, #0
 8042944:	e7b4      	b.n	80428b0 <HAL_I2S_Init+0x88>
 8042946:	bf00      	nop
 8042948:	08042e41 	.word	0x08042e41
 804294c:	fffff040 	.word	0xfffff040
 8042950:	08042f6d 	.word	0x08042f6d
 8042954:	40003400 	.word	0x40003400
 8042958:	40003800 	.word	0x40003800

0804295c <HAL_I2S_Transmit_DMA>:
{
 804295c:	b570      	push	{r4, r5, r6, lr}
 804295e:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8042960:	2900      	cmp	r1, #0
 8042962:	d056      	beq.n	8042a12 <HAL_I2S_Transmit_DMA+0xb6>
 8042964:	2a00      	cmp	r2, #0
 8042966:	d054      	beq.n	8042a12 <HAL_I2S_Transmit_DMA+0xb6>
  __HAL_LOCK(hi2s);
 8042968:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 804296c:	2b01      	cmp	r3, #1
 804296e:	d00b      	beq.n	8042988 <HAL_I2S_Transmit_DMA+0x2c>
 8042970:	2301      	movs	r3, #1
 8042972:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8042976:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 804297a:	2b01      	cmp	r3, #1
 804297c:	b2dd      	uxtb	r5, r3
 804297e:	f04f 0300 	mov.w	r3, #0
 8042982:	d003      	beq.n	804298c <HAL_I2S_Transmit_DMA+0x30>
    __HAL_UNLOCK(hi2s);
 8042984:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8042988:	2502      	movs	r5, #2
 804298a:	e028      	b.n	80429de <HAL_I2S_Transmit_DMA+0x82>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 804298c:	2003      	movs	r0, #3
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 804298e:	6826      	ldr	r6, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8042990:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8042994:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8042996:	69f3      	ldr	r3, [r6, #28]
  hi2s->pTxBuffPtr = pData;
 8042998:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 804299a:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 804299e:	4283      	cmp	r3, r0
 80429a0:	d001      	beq.n	80429a6 <HAL_I2S_Transmit_DMA+0x4a>
 80429a2:	2b05      	cmp	r3, #5
 80429a4:	d11d      	bne.n	80429e2 <HAL_I2S_Transmit_DMA+0x86>
    hi2s->TxXferSize = (Size << 1U);
 80429a6:	0053      	lsls	r3, r2, #1
 80429a8:	b29b      	uxth	r3, r3
 80429aa:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80429ac:	8563      	strh	r3, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80429ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80429b0:	4b19      	ldr	r3, [pc, #100]	; (8042a18 <HAL_I2S_Transmit_DMA+0xbc>)
 80429b2:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80429b4:	4b19      	ldr	r3, [pc, #100]	; (8042a1c <HAL_I2S_Transmit_DMA+0xc0>)
 80429b6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80429b8:	4b19      	ldr	r3, [pc, #100]	; (8042a20 <HAL_I2S_Transmit_DMA+0xc4>)
 80429ba:	64c3      	str	r3, [r0, #76]	; 0x4c
                                 hi2s->TxXferSize))
 80429bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80429be:	f106 020c 	add.w	r2, r6, #12
 80429c2:	b29b      	uxth	r3, r3
 80429c4:	f7ff f898 	bl	8041af8 <HAL_DMA_Start_IT>
 80429c8:	b170      	cbz	r0, 80429e8 <HAL_I2S_Transmit_DMA+0x8c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80429ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80429cc:	f043 0308 	orr.w	r3, r3, #8
 80429d0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80429d2:	2301      	movs	r3, #1
 80429d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80429d8:	2300      	movs	r3, #0
 80429da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80429de:	4628      	mov	r0, r5
 80429e0:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->TxXferSize = Size;
 80429e2:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80429e4:	8562      	strh	r2, [r4, #42]	; 0x2a
 80429e6:	e7e2      	b.n	80429ae <HAL_I2S_Transmit_DMA+0x52>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80429e8:	6823      	ldr	r3, [r4, #0]
 80429ea:	69da      	ldr	r2, [r3, #28]
 80429ec:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 80429ee:	bf5e      	ittt	pl
 80429f0:	69da      	ldrpl	r2, [r3, #28]
 80429f2:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 80429f6:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80429f8:	685a      	ldr	r2, [r3, #4]
 80429fa:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80429fc:	bf58      	it	pl
 80429fe:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8042a00:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8042a04:	bf5c      	itt	pl
 8042a06:	f042 0202 	orrpl.w	r2, r2, #2
 8042a0a:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8042a0c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8042a10:	e7e5      	b.n	80429de <HAL_I2S_Transmit_DMA+0x82>
    return  HAL_ERROR;
 8042a12:	2501      	movs	r5, #1
 8042a14:	e7e3      	b.n	80429de <HAL_I2S_Transmit_DMA+0x82>
 8042a16:	bf00      	nop
 8042a18:	08042de9 	.word	0x08042de9
 8042a1c:	08042df3 	.word	0x08042df3
 8042a20:	08042f3b 	.word	0x08042f3b

08042a24 <HAL_I2S_Receive_DMA>:
{
 8042a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8042a26:	4613      	mov	r3, r2
 8042a28:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8042a2a:	2900      	cmp	r1, #0
 8042a2c:	d062      	beq.n	8042af4 <HAL_I2S_Receive_DMA+0xd0>
 8042a2e:	2a00      	cmp	r2, #0
 8042a30:	d060      	beq.n	8042af4 <HAL_I2S_Receive_DMA+0xd0>
  __HAL_LOCK(hi2s);
 8042a32:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8042a36:	2a01      	cmp	r2, #1
 8042a38:	d00b      	beq.n	8042a52 <HAL_I2S_Receive_DMA+0x2e>
 8042a3a:	2201      	movs	r2, #1
 8042a3c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8042a40:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8042a44:	2a01      	cmp	r2, #1
 8042a46:	b2d5      	uxtb	r5, r2
 8042a48:	f04f 0200 	mov.w	r2, #0
 8042a4c:	d003      	beq.n	8042a56 <HAL_I2S_Receive_DMA+0x32>
    __HAL_UNLOCK(hi2s);
 8042a4e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8042a52:	2502      	movs	r5, #2
 8042a54:	e036      	b.n	8042ac4 <HAL_I2S_Receive_DMA+0xa0>
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8042a56:	6826      	ldr	r6, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 8042a58:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8042a5a:	2004      	movs	r0, #4
 8042a5c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8042a60:	6462      	str	r2, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8042a62:	69f2      	ldr	r2, [r6, #28]
 8042a64:	f002 0207 	and.w	r2, r2, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8042a68:	2a03      	cmp	r2, #3
 8042a6a:	d001      	beq.n	8042a70 <HAL_I2S_Receive_DMA+0x4c>
 8042a6c:	2a05      	cmp	r2, #5
 8042a6e:	d101      	bne.n	8042a74 <HAL_I2S_Receive_DMA+0x50>
    hi2s->RxXferSize = (Size << 1U);
 8042a70:	005b      	lsls	r3, r3, #1
 8042a72:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8042a74:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->RxXferSize = Size;
 8042a76:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8042a78:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8042a7a:	4b1f      	ldr	r3, [pc, #124]	; (8042af8 <HAL_I2S_Receive_DMA+0xd4>)
 8042a7c:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8042a7e:	4b1f      	ldr	r3, [pc, #124]	; (8042afc <HAL_I2S_Receive_DMA+0xd8>)
 8042a80:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8042a82:	4b1f      	ldr	r3, [pc, #124]	; (8042b00 <HAL_I2S_Receive_DMA+0xdc>)
 8042a84:	64c3      	str	r3, [r0, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8042a86:	69f3      	ldr	r3, [r6, #28]
 8042a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042a90:	d106      	bne.n	8042aa0 <HAL_I2S_Receive_DMA+0x7c>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8042a92:	2300      	movs	r3, #0
 8042a94:	9301      	str	r3, [sp, #4]
 8042a96:	68f3      	ldr	r3, [r6, #12]
 8042a98:	9301      	str	r3, [sp, #4]
 8042a9a:	68b3      	ldr	r3, [r6, #8]
 8042a9c:	9301      	str	r3, [sp, #4]
 8042a9e:	9b01      	ldr	r3, [sp, #4]
                                 hi2s->RxXferSize))
 8042aa0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8042aa2:	460a      	mov	r2, r1
 8042aa4:	b29b      	uxth	r3, r3
 8042aa6:	f106 010c 	add.w	r1, r6, #12
 8042aaa:	f7ff f825 	bl	8041af8 <HAL_DMA_Start_IT>
 8042aae:	b160      	cbz	r0, 8042aca <HAL_I2S_Receive_DMA+0xa6>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8042ab0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042ab2:	f043 0308 	orr.w	r3, r3, #8
 8042ab6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8042ab8:	2301      	movs	r3, #1
 8042aba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8042abe:	2300      	movs	r3, #0
 8042ac0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8042ac4:	4628      	mov	r0, r5
 8042ac6:	b002      	add	sp, #8
 8042ac8:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8042aca:	6823      	ldr	r3, [r4, #0]
 8042acc:	69da      	ldr	r2, [r3, #28]
 8042ace:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8042ad0:	bf5e      	ittt	pl
 8042ad2:	69da      	ldrpl	r2, [r3, #28]
 8042ad4:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8042ad8:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8042ada:	685a      	ldr	r2, [r3, #4]
 8042adc:	07d2      	lsls	r2, r2, #31
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8042ade:	bf58      	it	pl
 8042ae0:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8042ae2:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8042ae6:	bf5c      	itt	pl
 8042ae8:	f042 0201 	orrpl.w	r2, r2, #1
 8042aec:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8042aee:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8042af2:	e7e7      	b.n	8042ac4 <HAL_I2S_Receive_DMA+0xa0>
    return  HAL_ERROR;
 8042af4:	2501      	movs	r5, #1
 8042af6:	e7e5      	b.n	8042ac4 <HAL_I2S_Receive_DMA+0xa0>
 8042af8:	08042e15 	.word	0x08042e15
 8042afc:	08042e1f 	.word	0x08042e1f
 8042b00:	08042f3b 	.word	0x08042f3b

08042b04 <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8042b04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8042b08:	2b01      	cmp	r3, #1
 8042b0a:	d02d      	beq.n	8042b68 <HAL_I2S_DMAPause+0x64>
 8042b0c:	2301      	movs	r3, #1
 8042b0e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8042b12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8042b16:	2b03      	cmp	r3, #3
 8042b18:	d109      	bne.n	8042b2e <HAL_I2S_DMAPause+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8042b1a:	6802      	ldr	r2, [r0, #0]
 8042b1c:	6853      	ldr	r3, [r2, #4]
 8042b1e:	f023 0302 	bic.w	r3, r3, #2
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8042b22:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 8042b24:	2300      	movs	r3, #0
 8042b26:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8042b2a:	4618      	mov	r0, r3
 8042b2c:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8042b2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8042b32:	2b04      	cmp	r3, #4
 8042b34:	d104      	bne.n	8042b40 <HAL_I2S_DMAPause+0x3c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8042b36:	6802      	ldr	r2, [r0, #0]
 8042b38:	6853      	ldr	r3, [r2, #4]
 8042b3a:	f023 0301 	bic.w	r3, r3, #1
 8042b3e:	e7f0      	b.n	8042b22 <HAL_I2S_DMAPause+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8042b40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8042b44:	2b05      	cmp	r3, #5
 8042b46:	d1ed      	bne.n	8042b24 <HAL_I2S_DMAPause+0x20>
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8042b48:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8042b4a:	4908      	ldr	r1, [pc, #32]	; (8042b6c <HAL_I2S_DMAPause+0x68>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8042b4c:	6853      	ldr	r3, [r2, #4]
 8042b4e:	f023 0303 	bic.w	r3, r3, #3
 8042b52:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8042b54:	4b06      	ldr	r3, [pc, #24]	; (8042b70 <HAL_I2S_DMAPause+0x6c>)
 8042b56:	428a      	cmp	r2, r1
 8042b58:	bf18      	it	ne
 8042b5a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8042b5e:	685a      	ldr	r2, [r3, #4]
 8042b60:	f022 0203 	bic.w	r2, r2, #3
 8042b64:	605a      	str	r2, [r3, #4]
 8042b66:	e7dd      	b.n	8042b24 <HAL_I2S_DMAPause+0x20>
  __HAL_LOCK(hi2s);
 8042b68:	2002      	movs	r0, #2
}
 8042b6a:	4770      	bx	lr
 8042b6c:	40003800 	.word	0x40003800
 8042b70:	40003400 	.word	0x40003400

08042b74 <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 8042b74:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8042b78:	2b01      	cmp	r3, #1
 8042b7a:	d039      	beq.n	8042bf0 <HAL_I2S_DMAResume+0x7c>
 8042b7c:	2301      	movs	r3, #1
 8042b7e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8042b82:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8042b86:	6803      	ldr	r3, [r0, #0]
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8042b88:	2a03      	cmp	r2, #3
 8042b8a:	d10f      	bne.n	8042bac <HAL_I2S_DMAResume+0x38>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8042b8c:	685a      	ldr	r2, [r3, #4]
 8042b8e:	f042 0202 	orr.w	r2, r2, #2
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8042b92:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8042b94:	69da      	ldr	r2, [r3, #28]
 8042b96:	0552      	lsls	r2, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8042b98:	bf5e      	ittt	pl
 8042b9a:	69da      	ldrpl	r2, [r3, #28]
 8042b9c:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8042ba0:	61da      	strpl	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 8042ba2:	2300      	movs	r3, #0
 8042ba4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8042ba8:	4618      	mov	r0, r3
 8042baa:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8042bac:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8042bb0:	2a04      	cmp	r2, #4
 8042bb2:	d103      	bne.n	8042bbc <HAL_I2S_DMAResume+0x48>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8042bb4:	685a      	ldr	r2, [r3, #4]
 8042bb6:	f042 0201 	orr.w	r2, r2, #1
 8042bba:	e7ea      	b.n	8042b92 <HAL_I2S_DMAResume+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8042bbc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8042bc0:	2a05      	cmp	r2, #5
 8042bc2:	d1e7      	bne.n	8042b94 <HAL_I2S_DMAResume+0x20>
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8042bc4:	685a      	ldr	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8042bc6:	490b      	ldr	r1, [pc, #44]	; (8042bf4 <HAL_I2S_DMAResume+0x80>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8042bc8:	f042 0203 	orr.w	r2, r2, #3
 8042bcc:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8042bce:	4a0a      	ldr	r2, [pc, #40]	; (8042bf8 <HAL_I2S_DMAResume+0x84>)
 8042bd0:	428b      	cmp	r3, r1
 8042bd2:	bf18      	it	ne
 8042bd4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8042bd8:	6851      	ldr	r1, [r2, #4]
 8042bda:	f041 0103 	orr.w	r1, r1, #3
 8042bde:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8042be0:	69d1      	ldr	r1, [r2, #28]
 8042be2:	0549      	lsls	r1, r1, #21
      __HAL_I2SEXT_ENABLE(hi2s);
 8042be4:	bf5e      	ittt	pl
 8042be6:	69d1      	ldrpl	r1, [r2, #28]
 8042be8:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
 8042bec:	61d1      	strpl	r1, [r2, #28]
 8042bee:	e7d1      	b.n	8042b94 <HAL_I2S_DMAResume+0x20>
  __HAL_LOCK(hi2s);
 8042bf0:	2002      	movs	r0, #2
}
 8042bf2:	4770      	bx	lr
 8042bf4:	40003800 	.word	0x40003800
 8042bf8:	40003400 	.word	0x40003400

08042bfc <HAL_I2S_DMAStop>:
{
 8042bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8042c00:	6843      	ldr	r3, [r0, #4]
 8042c02:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 8042c06:	b085      	sub	sp, #20
 8042c08:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8042c0a:	d16c      	bne.n	8042ce6 <HAL_I2S_DMAStop+0xea>
    if (hi2s->hdmatx != NULL)
 8042c0c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8042c0e:	2800      	cmp	r0, #0
 8042c10:	d15f      	bne.n	8042cd2 <HAL_I2S_DMAStop+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8042c12:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8042c14:	2364      	movs	r3, #100	; 0x64
 8042c16:	2201      	movs	r2, #1
 8042c18:	2102      	movs	r1, #2
 8042c1a:	4620      	mov	r0, r4
 8042c1c:	f7ff fddd 	bl	80427da <I2S_WaitFlagStateUntilTimeout>
 8042c20:	b130      	cbz	r0, 8042c30 <HAL_I2S_DMAStop+0x34>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8042c22:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8042c24:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8042c26:	f043 0301 	orr.w	r3, r3, #1
 8042c2a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8042c2c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8042c30:	2364      	movs	r3, #100	; 0x64
 8042c32:	2200      	movs	r2, #0
 8042c34:	2180      	movs	r1, #128	; 0x80
 8042c36:	4620      	mov	r0, r4
 8042c38:	f7ff fdcf 	bl	80427da <I2S_WaitFlagStateUntilTimeout>
 8042c3c:	b130      	cbz	r0, 8042c4c <HAL_I2S_DMAStop+0x50>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8042c3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8042c40:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8042c42:	f043 0301 	orr.w	r3, r3, #1
 8042c46:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8042c48:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8042c4c:	6823      	ldr	r3, [r4, #0]
 8042c4e:	69da      	ldr	r2, [r3, #28]
 8042c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8042c54:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8042c56:	2200      	movs	r2, #0
 8042c58:	9200      	str	r2, [sp, #0]
 8042c5a:	689a      	ldr	r2, [r3, #8]
 8042c5c:	9200      	str	r2, [sp, #0]
 8042c5e:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8042c60:	685a      	ldr	r2, [r3, #4]
 8042c62:	f022 0202 	bic.w	r2, r2, #2
 8042c66:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8042c68:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8042c6c:	2b05      	cmp	r3, #5
 8042c6e:	d129      	bne.n	8042cc4 <HAL_I2S_DMAStop+0xc8>
      if (hi2s->hdmarx != NULL)
 8042c70:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8042c72:	b138      	cbz	r0, 8042c84 <HAL_I2S_DMAStop+0x88>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8042c74:	f7fe ff7a 	bl	8041b6c <HAL_DMA_Abort>
 8042c78:	b120      	cbz	r0, 8042c84 <HAL_I2S_DMAStop+0x88>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8042c7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042c7c:	f043 0308 	orr.w	r3, r3, #8
 8042c80:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8042c82:	2501      	movs	r5, #1
      __HAL_I2SEXT_DISABLE(hi2s);
 8042c84:	6821      	ldr	r1, [r4, #0]
 8042c86:	4a56      	ldr	r2, [pc, #344]	; (8042de0 <HAL_I2S_DMAStop+0x1e4>)
 8042c88:	4b56      	ldr	r3, [pc, #344]	; (8042de4 <HAL_I2S_DMAStop+0x1e8>)
 8042c8a:	4291      	cmp	r1, r2
 8042c8c:	bf18      	it	ne
 8042c8e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8042c92:	69da      	ldr	r2, [r3, #28]
 8042c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8042c98:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8042c9a:	2200      	movs	r2, #0
 8042c9c:	9201      	str	r2, [sp, #4]
 8042c9e:	68da      	ldr	r2, [r3, #12]
 8042ca0:	9201      	str	r2, [sp, #4]
 8042ca2:	689a      	ldr	r2, [r3, #8]
 8042ca4:	9201      	str	r2, [sp, #4]
 8042ca6:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8042ca8:	685a      	ldr	r2, [r3, #4]
 8042caa:	f022 0201 	bic.w	r2, r2, #1
 8042cae:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8042cb0:	6862      	ldr	r2, [r4, #4]
 8042cb2:	2a00      	cmp	r2, #0
 8042cb4:	d16c      	bne.n	8042d90 <HAL_I2S_DMAStop+0x194>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8042cb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8042cb8:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8042cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042cbe:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8042cc0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->State = HAL_I2S_STATE_READY;
 8042cc4:	2301      	movs	r3, #1
}
 8042cc6:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8042cc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8042ccc:	b005      	add	sp, #20
 8042cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8042cd2:	f7fe ff4b 	bl	8041b6c <HAL_DMA_Abort>
 8042cd6:	2800      	cmp	r0, #0
 8042cd8:	d09b      	beq.n	8042c12 <HAL_I2S_DMAStop+0x16>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8042cda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042cdc:	f043 0308 	orr.w	r3, r3, #8
 8042ce0:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8042ce2:	2501      	movs	r5, #1
 8042ce4:	e796      	b.n	8042c14 <HAL_I2S_DMAStop+0x18>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8042ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042cea:	d177      	bne.n	8042ddc <HAL_I2S_DMAStop+0x1e0>
    if (hi2s->hdmarx != NULL)
 8042cec:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8042cee:	2800      	cmp	r0, #0
 8042cf0:	d150      	bne.n	8042d94 <HAL_I2S_DMAStop+0x198>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8042cf2:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8042cf4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8042cf8:	2b05      	cmp	r3, #5
 8042cfa:	d135      	bne.n	8042d68 <HAL_I2S_DMAStop+0x16c>
      if (hi2s->hdmatx != NULL)
 8042cfc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8042cfe:	b138      	cbz	r0, 8042d10 <HAL_I2S_DMAStop+0x114>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8042d00:	f7fe ff34 	bl	8041b6c <HAL_DMA_Abort>
 8042d04:	b120      	cbz	r0, 8042d10 <HAL_I2S_DMAStop+0x114>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8042d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042d08:	f043 0308 	orr.w	r3, r3, #8
 8042d0c:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8042d0e:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8042d10:	f7fe fdac 	bl	804186c <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8042d14:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8042de0 <HAL_I2S_DMAStop+0x1e4>
 8042d18:	4f32      	ldr	r7, [pc, #200]	; (8042de4 <HAL_I2S_DMAStop+0x1e8>)
      tickstart = HAL_GetTick();
 8042d1a:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 8042d1c:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8042d20:	6822      	ldr	r2, [r4, #0]
 8042d22:	4542      	cmp	r2, r8
 8042d24:	bf0c      	ite	eq
 8042d26:	463b      	moveq	r3, r7
 8042d28:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8042d2c:	689b      	ldr	r3, [r3, #8]
 8042d2e:	079b      	lsls	r3, r3, #30
 8042d30:	d53a      	bpl.n	8042da8 <HAL_I2S_DMAStop+0x1ac>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8042d32:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8042de0 <HAL_I2S_DMAStop+0x1e4>
 8042d36:	4f2b      	ldr	r7, [pc, #172]	; (8042de4 <HAL_I2S_DMAStop+0x1e8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8042d38:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8042d3c:	6822      	ldr	r2, [r4, #0]
 8042d3e:	4542      	cmp	r2, r8
 8042d40:	bf0c      	ite	eq
 8042d42:	463b      	moveq	r3, r7
 8042d44:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8042d48:	689a      	ldr	r2, [r3, #8]
 8042d4a:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8042d4e:	d138      	bne.n	8042dc2 <HAL_I2S_DMAStop+0x1c6>
      __HAL_I2SEXT_DISABLE(hi2s);
 8042d50:	69d9      	ldr	r1, [r3, #28]
 8042d52:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8042d56:	61d9      	str	r1, [r3, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8042d58:	9202      	str	r2, [sp, #8]
 8042d5a:	689a      	ldr	r2, [r3, #8]
 8042d5c:	9202      	str	r2, [sp, #8]
 8042d5e:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8042d60:	685a      	ldr	r2, [r3, #4]
 8042d62:	f022 0202 	bic.w	r2, r2, #2
 8042d66:	605a      	str	r2, [r3, #4]
    __HAL_I2S_DISABLE(hi2s);
 8042d68:	6823      	ldr	r3, [r4, #0]
 8042d6a:	69da      	ldr	r2, [r3, #28]
 8042d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8042d70:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8042d72:	2200      	movs	r2, #0
 8042d74:	9203      	str	r2, [sp, #12]
 8042d76:	68da      	ldr	r2, [r3, #12]
 8042d78:	9203      	str	r2, [sp, #12]
 8042d7a:	689a      	ldr	r2, [r3, #8]
 8042d7c:	9203      	str	r2, [sp, #12]
 8042d7e:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8042d80:	685a      	ldr	r2, [r3, #4]
 8042d82:	f022 0201 	bic.w	r2, r2, #1
 8042d86:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8042d88:	6862      	ldr	r2, [r4, #4]
 8042d8a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8042d8e:	d092      	beq.n	8042cb6 <HAL_I2S_DMAStop+0xba>
      READ_REG((hi2s->Instance)->DR);
 8042d90:	68db      	ldr	r3, [r3, #12]
 8042d92:	e797      	b.n	8042cc4 <HAL_I2S_DMAStop+0xc8>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8042d94:	f7fe feea 	bl	8041b6c <HAL_DMA_Abort>
 8042d98:	2800      	cmp	r0, #0
 8042d9a:	d0aa      	beq.n	8042cf2 <HAL_I2S_DMAStop+0xf6>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8042d9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042d9e:	f043 0308 	orr.w	r3, r3, #8
 8042da2:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8042da4:	2501      	movs	r5, #1
 8042da6:	e7a5      	b.n	8042cf4 <HAL_I2S_DMAStop+0xf8>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8042da8:	f7fe fd60 	bl	804186c <HAL_GetTick>
 8042dac:	1b80      	subs	r0, r0, r6
 8042dae:	2864      	cmp	r0, #100	; 0x64
 8042db0:	d9b6      	bls.n	8042d20 <HAL_I2S_DMAStop+0x124>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8042db2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042db4:	f043 0301 	orr.w	r3, r3, #1
 8042db8:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8042dba:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8042dbc:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8042dc0:	e7ae      	b.n	8042d20 <HAL_I2S_DMAStop+0x124>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8042dc2:	f7fe fd53 	bl	804186c <HAL_GetTick>
 8042dc6:	1b80      	subs	r0, r0, r6
 8042dc8:	2864      	cmp	r0, #100	; 0x64
 8042dca:	d9b7      	bls.n	8042d3c <HAL_I2S_DMAStop+0x140>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8042dcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042dce:	f043 0301 	orr.w	r3, r3, #1
 8042dd2:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8042dd4:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8042dd6:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8042dda:	e7af      	b.n	8042d3c <HAL_I2S_DMAStop+0x140>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8042ddc:	2500      	movs	r5, #0
 8042dde:	e771      	b.n	8042cc4 <HAL_I2S_DMAStop+0xc8>
 8042de0:	40003800 	.word	0x40003800
 8042de4:	40003400 	.word	0x40003400

08042de8 <I2S_DMATxHalfCplt>:
{
 8042de8:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8042dea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8042dec:	f7fe fb66 	bl	80414bc <HAL_I2S_TxHalfCpltCallback>
}
 8042df0:	bd08      	pop	{r3, pc}

08042df2 <I2S_DMATxCplt>:
{
 8042df2:	b508      	push	{r3, lr}
 8042df4:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8042df6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8042df8:	69da      	ldr	r2, [r3, #28]
 8042dfa:	b942      	cbnz	r2, 8042e0e <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8042dfc:	6801      	ldr	r1, [r0, #0]
 8042dfe:	684b      	ldr	r3, [r1, #4]
 8042e00:	f023 0302 	bic.w	r3, r3, #2
 8042e04:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8042e06:	2301      	movs	r3, #1
    hi2s->TxXferCount = 0U;
 8042e08:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8042e0a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8042e0e:	f7fe fb49 	bl	80414a4 <HAL_I2S_TxCpltCallback>
}
 8042e12:	bd08      	pop	{r3, pc}

08042e14 <I2S_DMARxHalfCplt>:
{
 8042e14:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8042e16:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8042e18:	f7fe fca4 	bl	8041764 <HAL_I2S_RxHalfCpltCallback>
}
 8042e1c:	bd08      	pop	{r3, pc}

08042e1e <I2S_DMARxCplt>:
{
 8042e1e:	b508      	push	{r3, lr}
 8042e20:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8042e22:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8042e24:	69da      	ldr	r2, [r3, #28]
 8042e26:	b942      	cbnz	r2, 8042e3a <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8042e28:	6801      	ldr	r1, [r0, #0]
 8042e2a:	684b      	ldr	r3, [r1, #4]
 8042e2c:	f023 0301 	bic.w	r3, r3, #1
 8042e30:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8042e32:	2301      	movs	r3, #1
    hi2s->RxXferCount = 0U;
 8042e34:	8642      	strh	r2, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8042e36:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8042e3a:	f7fe fc8f 	bl	804175c <HAL_I2S_RxCpltCallback>
}
 8042e3e:	bd08      	pop	{r3, pc}

08042e40 <I2S_IRQHandler>:
{
 8042e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8042e42:	6803      	ldr	r3, [r0, #0]
 8042e44:	689a      	ldr	r2, [r3, #8]
 8042e46:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8042e48:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8042e4c:	2a04      	cmp	r2, #4
{
 8042e4e:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8042e50:	d136      	bne.n	8042ec0 <I2S_IRQHandler+0x80>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8042e52:	9a01      	ldr	r2, [sp, #4]
 8042e54:	07d1      	lsls	r1, r2, #31
 8042e56:	d517      	bpl.n	8042e88 <I2S_IRQHandler+0x48>
 8042e58:	685a      	ldr	r2, [r3, #4]
 8042e5a:	0652      	lsls	r2, r2, #25
 8042e5c:	d514      	bpl.n	8042e88 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8042e5e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8042e60:	68d9      	ldr	r1, [r3, #12]
 8042e62:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8042e66:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8042e68:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8042e6a:	3a01      	subs	r2, #1
 8042e6c:	b292      	uxth	r2, r2
 8042e6e:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8042e70:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8042e72:	b292      	uxth	r2, r2
 8042e74:	b942      	cbnz	r2, 8042e88 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8042e76:	685a      	ldr	r2, [r3, #4]
 8042e78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8042e7c:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8042e7e:	2301      	movs	r3, #1
 8042e80:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8042e84:	f7fe fc6a 	bl	804175c <HAL_I2S_RxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8042e88:	9b01      	ldr	r3, [sp, #4]
 8042e8a:	0659      	lsls	r1, r3, #25
 8042e8c:	d518      	bpl.n	8042ec0 <I2S_IRQHandler+0x80>
 8042e8e:	6823      	ldr	r3, [r4, #0]
 8042e90:	685a      	ldr	r2, [r3, #4]
 8042e92:	0692      	lsls	r2, r2, #26
 8042e94:	d514      	bpl.n	8042ec0 <I2S_IRQHandler+0x80>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8042e96:	685a      	ldr	r2, [r3, #4]
 8042e98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8042e9c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8042e9e:	2200      	movs	r2, #0
 8042ea0:	9202      	str	r2, [sp, #8]
 8042ea2:	68da      	ldr	r2, [r3, #12]
 8042ea4:	9202      	str	r2, [sp, #8]
 8042ea6:	689b      	ldr	r3, [r3, #8]
 8042ea8:	9302      	str	r3, [sp, #8]
 8042eaa:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8042eac:	2301      	movs	r3, #1
 8042eae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8042eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042eb4:	f043 0302 	orr.w	r3, r3, #2
 8042eb8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8042eba:	4620      	mov	r0, r4
 8042ebc:	f7fe fc56 	bl	804176c <HAL_I2S_ErrorCallback>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8042ec0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8042ec4:	2b03      	cmp	r3, #3
 8042ec6:	d136      	bne.n	8042f36 <I2S_IRQHandler+0xf6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8042ec8:	9b01      	ldr	r3, [sp, #4]
 8042eca:	079b      	lsls	r3, r3, #30
 8042ecc:	d519      	bpl.n	8042f02 <I2S_IRQHandler+0xc2>
 8042ece:	6822      	ldr	r2, [r4, #0]
 8042ed0:	6853      	ldr	r3, [r2, #4]
 8042ed2:	0618      	lsls	r0, r3, #24
 8042ed4:	d515      	bpl.n	8042f02 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8042ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8042ed8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8042edc:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8042ede:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8042ee0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8042ee2:	3b01      	subs	r3, #1
 8042ee4:	b29b      	uxth	r3, r3
 8042ee6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8042ee8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8042eea:	b29b      	uxth	r3, r3
 8042eec:	b94b      	cbnz	r3, 8042f02 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8042eee:	6853      	ldr	r3, [r2, #4]
 8042ef0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8042ef4:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8042ef6:	2301      	movs	r3, #1
 8042ef8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8042efc:	4620      	mov	r0, r4
 8042efe:	f7fe fad1 	bl	80414a4 <HAL_I2S_TxCpltCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8042f02:	9b01      	ldr	r3, [sp, #4]
 8042f04:	0719      	lsls	r1, r3, #28
 8042f06:	d516      	bpl.n	8042f36 <I2S_IRQHandler+0xf6>
 8042f08:	6823      	ldr	r3, [r4, #0]
 8042f0a:	685a      	ldr	r2, [r3, #4]
 8042f0c:	0692      	lsls	r2, r2, #26
 8042f0e:	d512      	bpl.n	8042f36 <I2S_IRQHandler+0xf6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8042f10:	685a      	ldr	r2, [r3, #4]
 8042f12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8042f16:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8042f18:	2200      	movs	r2, #0
 8042f1a:	9203      	str	r2, [sp, #12]
 8042f1c:	689b      	ldr	r3, [r3, #8]
 8042f1e:	9303      	str	r3, [sp, #12]
 8042f20:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8042f22:	2301      	movs	r3, #1
 8042f24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8042f28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8042f2a:	f043 0304 	orr.w	r3, r3, #4
 8042f2e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8042f30:	4620      	mov	r0, r4
 8042f32:	f7fe fc1b 	bl	804176c <HAL_I2S_ErrorCallback>
}
 8042f36:	b004      	add	sp, #16
 8042f38:	bd10      	pop	{r4, pc}

08042f3a <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8042f3a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8042f3c:	6802      	ldr	r2, [r0, #0]
{
 8042f3e:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8042f40:	6853      	ldr	r3, [r2, #4]
 8042f42:	f023 0303 	bic.w	r3, r3, #3
 8042f46:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8042f48:	2300      	movs	r3, #0
 8042f4a:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8042f4c:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8042f4e:	2301      	movs	r3, #1
 8042f50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8042f54:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8042f56:	f043 0308 	orr.w	r3, r3, #8
 8042f5a:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8042f5c:	f7fe fc06 	bl	804176c <HAL_I2S_ErrorCallback>
}
 8042f60:	bd08      	pop	{r3, pc}

08042f62 <HAL_I2S_GetState>:
  return hi2s->State;
 8042f62:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8042f66:	4770      	bx	lr

08042f68 <HAL_I2SEx_TxRxCpltCallback>:
 8042f68:	4770      	bx	lr
	...

08042f6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8042f6c:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8042f6e:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8042f70:	498e      	ldr	r1, [pc, #568]	; (80431ac <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8042f72:	6893      	ldr	r3, [r2, #8]
{
 8042f74:	b086      	sub	sp, #24
 8042f76:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8042f78:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8042f7a:	4b8d      	ldr	r3, [pc, #564]	; (80431b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8042f7c:	428a      	cmp	r2, r1
 8042f7e:	bf18      	it	ne
 8042f80:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8042f84:	6899      	ldr	r1, [r3, #8]
 8042f86:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8042f88:	6851      	ldr	r1, [r2, #4]
 8042f8a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8042f8c:	6859      	ldr	r1, [r3, #4]
 8042f8e:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8042f90:	6841      	ldr	r1, [r0, #4]
 8042f92:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8042f96:	f040 8093 	bne.w	80430c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8042f9a:	9b00      	ldr	r3, [sp, #0]
 8042f9c:	0799      	lsls	r1, r3, #30
 8042f9e:	d51a      	bpl.n	8042fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8042fa0:	9b02      	ldr	r3, [sp, #8]
 8042fa2:	061b      	lsls	r3, r3, #24
 8042fa4:	d517      	bpl.n	8042fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8042fa6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8042fa8:	1c99      	adds	r1, r3, #2
 8042faa:	881b      	ldrh	r3, [r3, #0]
 8042fac:	6241      	str	r1, [r0, #36]	; 0x24
 8042fae:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8042fb0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8042fb2:	3b01      	subs	r3, #1
 8042fb4:	b29b      	uxth	r3, r3
 8042fb6:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8042fb8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8042fba:	b29b      	uxth	r3, r3
 8042fbc:	b95b      	cbnz	r3, 8042fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8042fbe:	6853      	ldr	r3, [r2, #4]
 8042fc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8042fc4:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8042fc6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8042fc8:	b29b      	uxth	r3, r3
 8042fca:	b923      	cbnz	r3, 8042fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8042fcc:	2301      	movs	r3, #1
 8042fce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8042fd2:	f7ff ffc9 	bl	8042f68 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8042fd6:	9b01      	ldr	r3, [sp, #4]
 8042fd8:	07d8      	lsls	r0, r3, #31
 8042fda:	d522      	bpl.n	8043022 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8042fdc:	9b03      	ldr	r3, [sp, #12]
 8042fde:	0659      	lsls	r1, r3, #25
 8042fe0:	d51f      	bpl.n	8043022 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8042fe2:	6821      	ldr	r1, [r4, #0]
 8042fe4:	4a71      	ldr	r2, [pc, #452]	; (80431ac <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8042fe6:	4b72      	ldr	r3, [pc, #456]	; (80431b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8042fe8:	4291      	cmp	r1, r2
 8042fea:	bf18      	it	ne
 8042fec:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8042ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8042ff2:	68d9      	ldr	r1, [r3, #12]
 8042ff4:	1c90      	adds	r0, r2, #2
 8042ff6:	62e0      	str	r0, [r4, #44]	; 0x2c
 8042ff8:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8042ffa:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8042ffc:	3a01      	subs	r2, #1
 8042ffe:	b292      	uxth	r2, r2
 8043000:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8043002:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8043004:	b292      	uxth	r2, r2
 8043006:	b962      	cbnz	r2, 8043022 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8043008:	685a      	ldr	r2, [r3, #4]
 804300a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 804300e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8043010:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8043012:	b29b      	uxth	r3, r3
 8043014:	b92b      	cbnz	r3, 8043022 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8043016:	2301      	movs	r3, #1
 8043018:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 804301c:	4620      	mov	r0, r4
 804301e:	f7ff ffa3 	bl	8042f68 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8043022:	9b01      	ldr	r3, [sp, #4]
 8043024:	065a      	lsls	r2, r3, #25
 8043026:	d522      	bpl.n	804306e <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8043028:	9b03      	ldr	r3, [sp, #12]
 804302a:	069b      	lsls	r3, r3, #26
 804302c:	d51f      	bpl.n	804306e <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 804302e:	6823      	ldr	r3, [r4, #0]
 8043030:	495e      	ldr	r1, [pc, #376]	; (80431ac <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8043032:	4a5f      	ldr	r2, [pc, #380]	; (80431b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8043034:	428b      	cmp	r3, r1
 8043036:	bf18      	it	ne
 8043038:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 804303c:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 804303e:	6851      	ldr	r1, [r2, #4]
 8043040:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8043044:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8043046:	685a      	ldr	r2, [r3, #4]
 8043048:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 804304c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 804304e:	2200      	movs	r2, #0
 8043050:	9204      	str	r2, [sp, #16]
 8043052:	68da      	ldr	r2, [r3, #12]
 8043054:	9204      	str	r2, [sp, #16]
 8043056:	689b      	ldr	r3, [r3, #8]
 8043058:	9304      	str	r3, [sp, #16]
 804305a:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 804305c:	2301      	movs	r3, #1
 804305e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8043062:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8043064:	f043 0302 	orr.w	r3, r3, #2
 8043068:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 804306a:	f7fe fb7f 	bl	804176c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 804306e:	9b00      	ldr	r3, [sp, #0]
 8043070:	0718      	lsls	r0, r3, #28
 8043072:	f140 8098 	bpl.w	80431a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8043076:	9b02      	ldr	r3, [sp, #8]
 8043078:	0699      	lsls	r1, r3, #26
 804307a:	f140 8094 	bpl.w	80431a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 804307e:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8043080:	494a      	ldr	r1, [pc, #296]	; (80431ac <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8043082:	685a      	ldr	r2, [r3, #4]
 8043084:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8043088:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 804308a:	4a49      	ldr	r2, [pc, #292]	; (80431b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 804308c:	428b      	cmp	r3, r1
 804308e:	bf18      	it	ne
 8043090:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8043094:	6851      	ldr	r1, [r2, #4]
 8043096:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 804309a:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 804309c:	2200      	movs	r2, #0
 804309e:	9205      	str	r2, [sp, #20]
 80430a0:	689b      	ldr	r3, [r3, #8]
 80430a2:	9305      	str	r3, [sp, #20]
 80430a4:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80430a6:	2301      	movs	r3, #1
 80430a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80430ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80430ae:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80430b0:	f043 0304 	orr.w	r3, r3, #4
 80430b4:	6463      	str	r3, [r4, #68]	; 0x44
}
 80430b6:	b006      	add	sp, #24
 80430b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 80430bc:	f7fe bb56 	b.w	804176c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80430c0:	9a01      	ldr	r2, [sp, #4]
 80430c2:	0792      	lsls	r2, r2, #30
 80430c4:	d51a      	bpl.n	80430fc <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 80430c6:	9a03      	ldr	r2, [sp, #12]
 80430c8:	0611      	lsls	r1, r2, #24
 80430ca:	d517      	bpl.n	80430fc <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80430cc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80430ce:	1c91      	adds	r1, r2, #2
 80430d0:	8812      	ldrh	r2, [r2, #0]
 80430d2:	6241      	str	r1, [r0, #36]	; 0x24
 80430d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80430d6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80430d8:	3a01      	subs	r2, #1
 80430da:	b292      	uxth	r2, r2
 80430dc:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80430de:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80430e0:	b292      	uxth	r2, r2
 80430e2:	b95a      	cbnz	r2, 80430fc <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80430e4:	685a      	ldr	r2, [r3, #4]
 80430e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80430ea:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 80430ec:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80430ee:	b29b      	uxth	r3, r3
 80430f0:	b923      	cbnz	r3, 80430fc <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 80430f2:	2301      	movs	r3, #1
 80430f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80430f8:	f7ff ff36 	bl	8042f68 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80430fc:	9b00      	ldr	r3, [sp, #0]
 80430fe:	07da      	lsls	r2, r3, #31
 8043100:	d51c      	bpl.n	804313c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8043102:	9b02      	ldr	r3, [sp, #8]
 8043104:	065b      	lsls	r3, r3, #25
 8043106:	d519      	bpl.n	804313c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8043108:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 804310a:	6822      	ldr	r2, [r4, #0]
 804310c:	1c98      	adds	r0, r3, #2
 804310e:	68d1      	ldr	r1, [r2, #12]
 8043110:	62e0      	str	r0, [r4, #44]	; 0x2c
 8043112:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8043114:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8043116:	3b01      	subs	r3, #1
 8043118:	b29b      	uxth	r3, r3
 804311a:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 804311c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 804311e:	b29b      	uxth	r3, r3
 8043120:	b963      	cbnz	r3, 804313c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8043122:	6853      	ldr	r3, [r2, #4]
 8043124:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8043128:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 804312a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804312c:	b29b      	uxth	r3, r3
 804312e:	b92b      	cbnz	r3, 804313c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8043130:	2301      	movs	r3, #1
 8043132:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8043136:	4620      	mov	r0, r4
 8043138:	f7ff ff16 	bl	8042f68 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 804313c:	9b00      	ldr	r3, [sp, #0]
 804313e:	0658      	lsls	r0, r3, #25
 8043140:	d51b      	bpl.n	804317a <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 8043142:	9b02      	ldr	r3, [sp, #8]
 8043144:	0699      	lsls	r1, r3, #26
 8043146:	d518      	bpl.n	804317a <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8043148:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 804314a:	4918      	ldr	r1, [pc, #96]	; (80431ac <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 804314c:	6853      	ldr	r3, [r2, #4]
 804314e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8043152:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8043154:	4b16      	ldr	r3, [pc, #88]	; (80431b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8043156:	428a      	cmp	r2, r1
 8043158:	bf18      	it	ne
 804315a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 804315e:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8043160:	685a      	ldr	r2, [r3, #4]
 8043162:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8043166:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8043168:	2301      	movs	r3, #1
 804316a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 804316e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8043170:	f043 0302 	orr.w	r3, r3, #2
 8043174:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8043176:	f7fe faf9 	bl	804176c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 804317a:	9b01      	ldr	r3, [sp, #4]
 804317c:	071a      	lsls	r2, r3, #28
 804317e:	d512      	bpl.n	80431a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8043180:	9b03      	ldr	r3, [sp, #12]
 8043182:	069b      	lsls	r3, r3, #26
 8043184:	d50f      	bpl.n	80431a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8043186:	6822      	ldr	r2, [r4, #0]
 8043188:	4908      	ldr	r1, [pc, #32]	; (80431ac <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 804318a:	4b09      	ldr	r3, [pc, #36]	; (80431b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 804318c:	428a      	cmp	r2, r1
 804318e:	bf18      	it	ne
 8043190:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8043194:	6859      	ldr	r1, [r3, #4]
 8043196:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 804319a:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 804319c:	6853      	ldr	r3, [r2, #4]
 804319e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80431a2:	6053      	str	r3, [r2, #4]
 80431a4:	e77f      	b.n	80430a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 80431a6:	b006      	add	sp, #24
 80431a8:	bd10      	pop	{r4, pc}
 80431aa:	bf00      	nop
 80431ac:	40003800 	.word	0x40003800
 80431b0:	40003400 	.word	0x40003400

080431b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80431b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80431b8:	4604      	mov	r4, r0
 80431ba:	b340      	cbz	r0, 804320e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80431bc:	6803      	ldr	r3, [r0, #0]
 80431be:	07dd      	lsls	r5, r3, #31
 80431c0:	d410      	bmi.n	80431e4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80431c2:	6823      	ldr	r3, [r4, #0]
 80431c4:	0798      	lsls	r0, r3, #30
 80431c6:	d45e      	bmi.n	8043286 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80431c8:	6823      	ldr	r3, [r4, #0]
 80431ca:	071a      	lsls	r2, r3, #28
 80431cc:	f100 80a0 	bmi.w	8043310 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80431d0:	6823      	ldr	r3, [r4, #0]
 80431d2:	075b      	lsls	r3, r3, #29
 80431d4:	f100 80c0 	bmi.w	8043358 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80431d8:	69a0      	ldr	r0, [r4, #24]
 80431da:	2800      	cmp	r0, #0
 80431dc:	f040 8128 	bne.w	8043430 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80431e0:	2000      	movs	r0, #0
 80431e2:	e02b      	b.n	804323c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80431e4:	4b8f      	ldr	r3, [pc, #572]	; (8043424 <HAL_RCC_OscConfig+0x270>)
 80431e6:	689a      	ldr	r2, [r3, #8]
 80431e8:	f002 020c 	and.w	r2, r2, #12
 80431ec:	2a04      	cmp	r2, #4
 80431ee:	d007      	beq.n	8043200 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80431f0:	689a      	ldr	r2, [r3, #8]
 80431f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80431f6:	2a08      	cmp	r2, #8
 80431f8:	d10b      	bne.n	8043212 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80431fa:	685a      	ldr	r2, [r3, #4]
 80431fc:	0251      	lsls	r1, r2, #9
 80431fe:	d508      	bpl.n	8043212 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043200:	4b88      	ldr	r3, [pc, #544]	; (8043424 <HAL_RCC_OscConfig+0x270>)
 8043202:	681b      	ldr	r3, [r3, #0]
 8043204:	039a      	lsls	r2, r3, #14
 8043206:	d5dc      	bpl.n	80431c2 <HAL_RCC_OscConfig+0xe>
 8043208:	6863      	ldr	r3, [r4, #4]
 804320a:	2b00      	cmp	r3, #0
 804320c:	d1d9      	bne.n	80431c2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 804320e:	2001      	movs	r0, #1
 8043210:	e014      	b.n	804323c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043212:	6862      	ldr	r2, [r4, #4]
 8043214:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8043218:	d113      	bne.n	8043242 <HAL_RCC_OscConfig+0x8e>
 804321a:	681a      	ldr	r2, [r3, #0]
 804321c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8043220:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8043222:	f7fe fb23 	bl	804186c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043226:	4e7f      	ldr	r6, [pc, #508]	; (8043424 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8043228:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804322a:	6833      	ldr	r3, [r6, #0]
 804322c:	039b      	lsls	r3, r3, #14
 804322e:	d4c8      	bmi.n	80431c2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8043230:	f7fe fb1c 	bl	804186c <HAL_GetTick>
 8043234:	1b40      	subs	r0, r0, r5
 8043236:	2864      	cmp	r0, #100	; 0x64
 8043238:	d9f7      	bls.n	804322a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 804323a:	2003      	movs	r0, #3
}
 804323c:	b002      	add	sp, #8
 804323e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043242:	4d78      	ldr	r5, [pc, #480]	; (8043424 <HAL_RCC_OscConfig+0x270>)
 8043244:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8043248:	682b      	ldr	r3, [r5, #0]
 804324a:	d107      	bne.n	804325c <HAL_RCC_OscConfig+0xa8>
 804324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8043250:	602b      	str	r3, [r5, #0]
 8043252:	682b      	ldr	r3, [r5, #0]
 8043254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8043258:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 804325a:	e7e2      	b.n	8043222 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804325c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8043260:	602b      	str	r3, [r5, #0]
 8043262:	682b      	ldr	r3, [r5, #0]
 8043264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8043268:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 804326a:	2a00      	cmp	r2, #0
 804326c:	d1d9      	bne.n	8043222 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 804326e:	f7fe fafd 	bl	804186c <HAL_GetTick>
 8043272:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8043274:	682b      	ldr	r3, [r5, #0]
 8043276:	039f      	lsls	r7, r3, #14
 8043278:	d5a3      	bpl.n	80431c2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804327a:	f7fe faf7 	bl	804186c <HAL_GetTick>
 804327e:	1b80      	subs	r0, r0, r6
 8043280:	2864      	cmp	r0, #100	; 0x64
 8043282:	d9f7      	bls.n	8043274 <HAL_RCC_OscConfig+0xc0>
 8043284:	e7d9      	b.n	804323a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8043286:	4b67      	ldr	r3, [pc, #412]	; (8043424 <HAL_RCC_OscConfig+0x270>)
 8043288:	689a      	ldr	r2, [r3, #8]
 804328a:	f012 0f0c 	tst.w	r2, #12
 804328e:	d007      	beq.n	80432a0 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043290:	689a      	ldr	r2, [r3, #8]
 8043292:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8043296:	2a08      	cmp	r2, #8
 8043298:	d111      	bne.n	80432be <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804329a:	685b      	ldr	r3, [r3, #4]
 804329c:	025e      	lsls	r6, r3, #9
 804329e:	d40e      	bmi.n	80432be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80432a0:	4a60      	ldr	r2, [pc, #384]	; (8043424 <HAL_RCC_OscConfig+0x270>)
 80432a2:	6813      	ldr	r3, [r2, #0]
 80432a4:	079d      	lsls	r5, r3, #30
 80432a6:	d502      	bpl.n	80432ae <HAL_RCC_OscConfig+0xfa>
 80432a8:	68e3      	ldr	r3, [r4, #12]
 80432aa:	2b01      	cmp	r3, #1
 80432ac:	d1af      	bne.n	804320e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80432ae:	6813      	ldr	r3, [r2, #0]
 80432b0:	6921      	ldr	r1, [r4, #16]
 80432b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80432b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80432ba:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80432bc:	e784      	b.n	80431c8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80432be:	68e2      	ldr	r2, [r4, #12]
 80432c0:	4b59      	ldr	r3, [pc, #356]	; (8043428 <HAL_RCC_OscConfig+0x274>)
 80432c2:	b1b2      	cbz	r2, 80432f2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80432c4:	2201      	movs	r2, #1
 80432c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80432c8:	f7fe fad0 	bl	804186c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80432cc:	4d55      	ldr	r5, [pc, #340]	; (8043424 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80432ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80432d0:	682b      	ldr	r3, [r5, #0]
 80432d2:	0798      	lsls	r0, r3, #30
 80432d4:	d507      	bpl.n	80432e6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80432d6:	682b      	ldr	r3, [r5, #0]
 80432d8:	6922      	ldr	r2, [r4, #16]
 80432da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80432de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80432e2:	602b      	str	r3, [r5, #0]
 80432e4:	e770      	b.n	80431c8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80432e6:	f7fe fac1 	bl	804186c <HAL_GetTick>
 80432ea:	1b80      	subs	r0, r0, r6
 80432ec:	2802      	cmp	r0, #2
 80432ee:	d9ef      	bls.n	80432d0 <HAL_RCC_OscConfig+0x11c>
 80432f0:	e7a3      	b.n	804323a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80432f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80432f4:	f7fe faba 	bl	804186c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80432f8:	4e4a      	ldr	r6, [pc, #296]	; (8043424 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80432fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80432fc:	6833      	ldr	r3, [r6, #0]
 80432fe:	0799      	lsls	r1, r3, #30
 8043300:	f57f af62 	bpl.w	80431c8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8043304:	f7fe fab2 	bl	804186c <HAL_GetTick>
 8043308:	1b40      	subs	r0, r0, r5
 804330a:	2802      	cmp	r0, #2
 804330c:	d9f6      	bls.n	80432fc <HAL_RCC_OscConfig+0x148>
 804330e:	e794      	b.n	804323a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8043310:	6962      	ldr	r2, [r4, #20]
 8043312:	4b45      	ldr	r3, [pc, #276]	; (8043428 <HAL_RCC_OscConfig+0x274>)
 8043314:	b182      	cbz	r2, 8043338 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8043316:	2201      	movs	r2, #1
 8043318:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 804331c:	f7fe faa6 	bl	804186c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043320:	4e40      	ldr	r6, [pc, #256]	; (8043424 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8043322:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043324:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8043326:	079f      	lsls	r7, r3, #30
 8043328:	f53f af52 	bmi.w	80431d0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804332c:	f7fe fa9e 	bl	804186c <HAL_GetTick>
 8043330:	1b40      	subs	r0, r0, r5
 8043332:	2802      	cmp	r0, #2
 8043334:	d9f6      	bls.n	8043324 <HAL_RCC_OscConfig+0x170>
 8043336:	e780      	b.n	804323a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8043338:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 804333c:	f7fe fa96 	bl	804186c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043340:	4e38      	ldr	r6, [pc, #224]	; (8043424 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8043342:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043344:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8043346:	0798      	lsls	r0, r3, #30
 8043348:	f57f af42 	bpl.w	80431d0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804334c:	f7fe fa8e 	bl	804186c <HAL_GetTick>
 8043350:	1b40      	subs	r0, r0, r5
 8043352:	2802      	cmp	r0, #2
 8043354:	d9f6      	bls.n	8043344 <HAL_RCC_OscConfig+0x190>
 8043356:	e770      	b.n	804323a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8043358:	4b32      	ldr	r3, [pc, #200]	; (8043424 <HAL_RCC_OscConfig+0x270>)
 804335a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804335c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8043360:	d128      	bne.n	80433b4 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8043362:	9201      	str	r2, [sp, #4]
 8043364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043366:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 804336a:	641a      	str	r2, [r3, #64]	; 0x40
 804336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043372:	9301      	str	r3, [sp, #4]
 8043374:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8043376:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8043378:	4d2c      	ldr	r5, [pc, #176]	; (804342c <HAL_RCC_OscConfig+0x278>)
 804337a:	682b      	ldr	r3, [r5, #0]
 804337c:	05d9      	lsls	r1, r3, #23
 804337e:	d51b      	bpl.n	80433b8 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8043380:	68a3      	ldr	r3, [r4, #8]
 8043382:	4d28      	ldr	r5, [pc, #160]	; (8043424 <HAL_RCC_OscConfig+0x270>)
 8043384:	2b01      	cmp	r3, #1
 8043386:	d127      	bne.n	80433d8 <HAL_RCC_OscConfig+0x224>
 8043388:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 804338a:	f043 0301 	orr.w	r3, r3, #1
 804338e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8043390:	f7fe fa6c 	bl	804186c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043394:	4e23      	ldr	r6, [pc, #140]	; (8043424 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8043396:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043398:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804339c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 804339e:	079b      	lsls	r3, r3, #30
 80433a0:	d539      	bpl.n	8043416 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80433a2:	2f00      	cmp	r7, #0
 80433a4:	f43f af18 	beq.w	80431d8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80433a8:	4a1e      	ldr	r2, [pc, #120]	; (8043424 <HAL_RCC_OscConfig+0x270>)
 80433aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80433ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80433b0:	6413      	str	r3, [r2, #64]	; 0x40
 80433b2:	e711      	b.n	80431d8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80433b4:	2700      	movs	r7, #0
 80433b6:	e7df      	b.n	8043378 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80433b8:	682b      	ldr	r3, [r5, #0]
 80433ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80433be:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80433c0:	f7fe fa54 	bl	804186c <HAL_GetTick>
 80433c4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80433c6:	682b      	ldr	r3, [r5, #0]
 80433c8:	05da      	lsls	r2, r3, #23
 80433ca:	d4d9      	bmi.n	8043380 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80433cc:	f7fe fa4e 	bl	804186c <HAL_GetTick>
 80433d0:	1b80      	subs	r0, r0, r6
 80433d2:	2802      	cmp	r0, #2
 80433d4:	d9f7      	bls.n	80433c6 <HAL_RCC_OscConfig+0x212>
 80433d6:	e730      	b.n	804323a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80433d8:	2b05      	cmp	r3, #5
 80433da:	d104      	bne.n	80433e6 <HAL_RCC_OscConfig+0x232>
 80433dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80433de:	f043 0304 	orr.w	r3, r3, #4
 80433e2:	672b      	str	r3, [r5, #112]	; 0x70
 80433e4:	e7d0      	b.n	8043388 <HAL_RCC_OscConfig+0x1d4>
 80433e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80433e8:	f022 0201 	bic.w	r2, r2, #1
 80433ec:	672a      	str	r2, [r5, #112]	; 0x70
 80433ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80433f0:	f022 0204 	bic.w	r2, r2, #4
 80433f4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80433f6:	2b00      	cmp	r3, #0
 80433f8:	d1ca      	bne.n	8043390 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80433fa:	f7fe fa37 	bl	804186c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80433fe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8043402:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8043404:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8043406:	0798      	lsls	r0, r3, #30
 8043408:	d5cb      	bpl.n	80433a2 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804340a:	f7fe fa2f 	bl	804186c <HAL_GetTick>
 804340e:	1b80      	subs	r0, r0, r6
 8043410:	4540      	cmp	r0, r8
 8043412:	d9f7      	bls.n	8043404 <HAL_RCC_OscConfig+0x250>
 8043414:	e711      	b.n	804323a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043416:	f7fe fa29 	bl	804186c <HAL_GetTick>
 804341a:	1b40      	subs	r0, r0, r5
 804341c:	4540      	cmp	r0, r8
 804341e:	d9bd      	bls.n	804339c <HAL_RCC_OscConfig+0x1e8>
 8043420:	e70b      	b.n	804323a <HAL_RCC_OscConfig+0x86>
 8043422:	bf00      	nop
 8043424:	40023800 	.word	0x40023800
 8043428:	42470000 	.word	0x42470000
 804342c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8043430:	4d36      	ldr	r5, [pc, #216]	; (804350c <HAL_RCC_OscConfig+0x358>)
 8043432:	68ab      	ldr	r3, [r5, #8]
 8043434:	f003 030c 	and.w	r3, r3, #12
 8043438:	2b08      	cmp	r3, #8
 804343a:	d03d      	beq.n	80434b8 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 804343c:	4b34      	ldr	r3, [pc, #208]	; (8043510 <HAL_RCC_OscConfig+0x35c>)
 804343e:	2200      	movs	r2, #0
 8043440:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8043442:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043444:	d12b      	bne.n	804349e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8043446:	f7fe fa11 	bl	804186c <HAL_GetTick>
 804344a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804344c:	682b      	ldr	r3, [r5, #0]
 804344e:	0199      	lsls	r1, r3, #6
 8043450:	d41f      	bmi.n	8043492 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8043452:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8043456:	4313      	orrs	r3, r2
 8043458:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804345a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 804345e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8043460:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8043464:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8043466:	0852      	lsrs	r2, r2, #1
 8043468:	3a01      	subs	r2, #1
 804346a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 804346e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8043470:	4b27      	ldr	r3, [pc, #156]	; (8043510 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043472:	4d26      	ldr	r5, [pc, #152]	; (804350c <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8043474:	2201      	movs	r2, #1
 8043476:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8043478:	f7fe f9f8 	bl	804186c <HAL_GetTick>
 804347c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804347e:	682b      	ldr	r3, [r5, #0]
 8043480:	019a      	lsls	r2, r3, #6
 8043482:	f53f aead 	bmi.w	80431e0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043486:	f7fe f9f1 	bl	804186c <HAL_GetTick>
 804348a:	1b00      	subs	r0, r0, r4
 804348c:	2802      	cmp	r0, #2
 804348e:	d9f6      	bls.n	804347e <HAL_RCC_OscConfig+0x2ca>
 8043490:	e6d3      	b.n	804323a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8043492:	f7fe f9eb 	bl	804186c <HAL_GetTick>
 8043496:	1b80      	subs	r0, r0, r6
 8043498:	2802      	cmp	r0, #2
 804349a:	d9d7      	bls.n	804344c <HAL_RCC_OscConfig+0x298>
 804349c:	e6cd      	b.n	804323a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 804349e:	f7fe f9e5 	bl	804186c <HAL_GetTick>
 80434a2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80434a4:	682b      	ldr	r3, [r5, #0]
 80434a6:	019b      	lsls	r3, r3, #6
 80434a8:	f57f ae9a 	bpl.w	80431e0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80434ac:	f7fe f9de 	bl	804186c <HAL_GetTick>
 80434b0:	1b00      	subs	r0, r0, r4
 80434b2:	2802      	cmp	r0, #2
 80434b4:	d9f6      	bls.n	80434a4 <HAL_RCC_OscConfig+0x2f0>
 80434b6:	e6c0      	b.n	804323a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80434b8:	2801      	cmp	r0, #1
 80434ba:	f43f aebf 	beq.w	804323c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80434be:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80434c0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80434c2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80434c6:	4291      	cmp	r1, r2
 80434c8:	f47f aea1 	bne.w	804320e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80434cc:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80434ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80434d2:	428a      	cmp	r2, r1
 80434d4:	f47f ae9b 	bne.w	804320e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80434d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80434da:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80434de:	401a      	ands	r2, r3
 80434e0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80434e4:	f47f ae93 	bne.w	804320e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80434e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80434ea:	0852      	lsrs	r2, r2, #1
 80434ec:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80434f0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80434f2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80434f6:	f47f ae8a 	bne.w	804320e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80434fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80434fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8043500:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8043504:	f43f ae6c 	beq.w	80431e0 <HAL_RCC_OscConfig+0x2c>
 8043508:	e681      	b.n	804320e <HAL_RCC_OscConfig+0x5a>
 804350a:	bf00      	nop
 804350c:	40023800 	.word	0x40023800
 8043510:	42470000 	.word	0x42470000

08043514 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043514:	4913      	ldr	r1, [pc, #76]	; (8043564 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8043516:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043518:	688b      	ldr	r3, [r1, #8]
 804351a:	f003 030c 	and.w	r3, r3, #12
 804351e:	2b04      	cmp	r3, #4
 8043520:	d01c      	beq.n	804355c <HAL_RCC_GetSysClockFreq+0x48>
 8043522:	2b08      	cmp	r3, #8
 8043524:	d11c      	bne.n	8043560 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8043526:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8043528:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804352a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 804352c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043530:	bf14      	ite	ne
 8043532:	480d      	ldrne	r0, [pc, #52]	; (8043568 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043534:	480d      	ldreq	r0, [pc, #52]	; (804356c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043536:	f3c1 1188 	ubfx	r1, r1, #6, #9
 804353a:	bf18      	it	ne
 804353c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 804353e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8043542:	fba1 0100 	umull	r0, r1, r1, r0
 8043546:	f7fc fe3f 	bl	80401c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 804354a:	4b06      	ldr	r3, [pc, #24]	; (8043564 <HAL_RCC_GetSysClockFreq+0x50>)
 804354c:	685b      	ldr	r3, [r3, #4]
 804354e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8043552:	3301      	adds	r3, #1
 8043554:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8043556:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 804355a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 804355c:	4802      	ldr	r0, [pc, #8]	; (8043568 <HAL_RCC_GetSysClockFreq+0x54>)
 804355e:	e7fc      	b.n	804355a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8043560:	4802      	ldr	r0, [pc, #8]	; (804356c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8043562:	e7fa      	b.n	804355a <HAL_RCC_GetSysClockFreq+0x46>
 8043564:	40023800 	.word	0x40023800
 8043568:	007a1200 	.word	0x007a1200
 804356c:	00f42400 	.word	0x00f42400

08043570 <HAL_RCC_ClockConfig>:
{
 8043570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8043574:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8043576:	4604      	mov	r4, r0
 8043578:	b910      	cbnz	r0, 8043580 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 804357a:	2001      	movs	r0, #1
}
 804357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8043580:	4b44      	ldr	r3, [pc, #272]	; (8043694 <HAL_RCC_ClockConfig+0x124>)
 8043582:	681a      	ldr	r2, [r3, #0]
 8043584:	f002 0207 	and.w	r2, r2, #7
 8043588:	428a      	cmp	r2, r1
 804358a:	d328      	bcc.n	80435de <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804358c:	6822      	ldr	r2, [r4, #0]
 804358e:	0797      	lsls	r7, r2, #30
 8043590:	d42d      	bmi.n	80435ee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8043592:	07d0      	lsls	r0, r2, #31
 8043594:	d441      	bmi.n	804361a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8043596:	4b3f      	ldr	r3, [pc, #252]	; (8043694 <HAL_RCC_ClockConfig+0x124>)
 8043598:	681a      	ldr	r2, [r3, #0]
 804359a:	f002 0207 	and.w	r2, r2, #7
 804359e:	42aa      	cmp	r2, r5
 80435a0:	d866      	bhi.n	8043670 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80435a2:	6822      	ldr	r2, [r4, #0]
 80435a4:	0751      	lsls	r1, r2, #29
 80435a6:	d46c      	bmi.n	8043682 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80435a8:	0713      	lsls	r3, r2, #28
 80435aa:	d507      	bpl.n	80435bc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80435ac:	4a3a      	ldr	r2, [pc, #232]	; (8043698 <HAL_RCC_ClockConfig+0x128>)
 80435ae:	6921      	ldr	r1, [r4, #16]
 80435b0:	6893      	ldr	r3, [r2, #8]
 80435b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80435b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80435ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80435bc:	f7ff ffaa 	bl	8043514 <HAL_RCC_GetSysClockFreq>
 80435c0:	4b35      	ldr	r3, [pc, #212]	; (8043698 <HAL_RCC_ClockConfig+0x128>)
 80435c2:	4a36      	ldr	r2, [pc, #216]	; (804369c <HAL_RCC_ClockConfig+0x12c>)
 80435c4:	689b      	ldr	r3, [r3, #8]
 80435c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80435ca:	5cd3      	ldrb	r3, [r2, r3]
 80435cc:	40d8      	lsrs	r0, r3
 80435ce:	4b34      	ldr	r3, [pc, #208]	; (80436a0 <HAL_RCC_ClockConfig+0x130>)
 80435d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80435d2:	4b34      	ldr	r3, [pc, #208]	; (80436a4 <HAL_RCC_ClockConfig+0x134>)
 80435d4:	6818      	ldr	r0, [r3, #0]
 80435d6:	f7fe f905 	bl	80417e4 <HAL_InitTick>
  return HAL_OK;
 80435da:	2000      	movs	r0, #0
 80435dc:	e7ce      	b.n	804357c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80435de:	b2ca      	uxtb	r2, r1
 80435e0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80435e2:	681b      	ldr	r3, [r3, #0]
 80435e4:	f003 0307 	and.w	r3, r3, #7
 80435e8:	428b      	cmp	r3, r1
 80435ea:	d1c6      	bne.n	804357a <HAL_RCC_ClockConfig+0xa>
 80435ec:	e7ce      	b.n	804358c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80435ee:	4b2a      	ldr	r3, [pc, #168]	; (8043698 <HAL_RCC_ClockConfig+0x128>)
 80435f0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80435f4:	bf1e      	ittt	ne
 80435f6:	6899      	ldrne	r1, [r3, #8]
 80435f8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80435fc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80435fe:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8043600:	bf42      	ittt	mi
 8043602:	6899      	ldrmi	r1, [r3, #8]
 8043604:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8043608:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804360a:	4923      	ldr	r1, [pc, #140]	; (8043698 <HAL_RCC_ClockConfig+0x128>)
 804360c:	68a0      	ldr	r0, [r4, #8]
 804360e:	688b      	ldr	r3, [r1, #8]
 8043610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8043614:	4303      	orrs	r3, r0
 8043616:	608b      	str	r3, [r1, #8]
 8043618:	e7bb      	b.n	8043592 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804361a:	6862      	ldr	r2, [r4, #4]
 804361c:	4b1e      	ldr	r3, [pc, #120]	; (8043698 <HAL_RCC_ClockConfig+0x128>)
 804361e:	2a01      	cmp	r2, #1
 8043620:	d11c      	bne.n	804365c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043622:	681b      	ldr	r3, [r3, #0]
 8043624:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043628:	d0a7      	beq.n	804357a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804362a:	4e1b      	ldr	r6, [pc, #108]	; (8043698 <HAL_RCC_ClockConfig+0x128>)
 804362c:	68b3      	ldr	r3, [r6, #8]
 804362e:	f023 0303 	bic.w	r3, r3, #3
 8043632:	4313      	orrs	r3, r2
 8043634:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8043636:	f7fe f919 	bl	804186c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804363a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 804363e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043640:	68b3      	ldr	r3, [r6, #8]
 8043642:	6862      	ldr	r2, [r4, #4]
 8043644:	f003 030c 	and.w	r3, r3, #12
 8043648:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 804364c:	d0a3      	beq.n	8043596 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804364e:	f7fe f90d 	bl	804186c <HAL_GetTick>
 8043652:	1bc0      	subs	r0, r0, r7
 8043654:	4540      	cmp	r0, r8
 8043656:	d9f3      	bls.n	8043640 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8043658:	2003      	movs	r0, #3
 804365a:	e78f      	b.n	804357c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804365c:	1e91      	subs	r1, r2, #2
 804365e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043660:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8043662:	d802      	bhi.n	804366a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043664:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8043668:	e7de      	b.n	8043628 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804366a:	f013 0f02 	tst.w	r3, #2
 804366e:	e7db      	b.n	8043628 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043670:	b2ea      	uxtb	r2, r5
 8043672:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8043674:	681b      	ldr	r3, [r3, #0]
 8043676:	f003 0307 	and.w	r3, r3, #7
 804367a:	42ab      	cmp	r3, r5
 804367c:	f47f af7d 	bne.w	804357a <HAL_RCC_ClockConfig+0xa>
 8043680:	e78f      	b.n	80435a2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8043682:	4905      	ldr	r1, [pc, #20]	; (8043698 <HAL_RCC_ClockConfig+0x128>)
 8043684:	68e0      	ldr	r0, [r4, #12]
 8043686:	688b      	ldr	r3, [r1, #8]
 8043688:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 804368c:	4303      	orrs	r3, r0
 804368e:	608b      	str	r3, [r1, #8]
 8043690:	e78a      	b.n	80435a8 <HAL_RCC_ClockConfig+0x38>
 8043692:	bf00      	nop
 8043694:	40023c00 	.word	0x40023c00
 8043698:	40023800 	.word	0x40023800
 804369c:	08046acc 	.word	0x08046acc
 80436a0:	200000b8 	.word	0x200000b8
 80436a4:	200000c0 	.word	0x200000c0

080436a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80436a8:	4b04      	ldr	r3, [pc, #16]	; (80436bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80436aa:	4a05      	ldr	r2, [pc, #20]	; (80436c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80436ac:	689b      	ldr	r3, [r3, #8]
 80436ae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80436b2:	5cd3      	ldrb	r3, [r2, r3]
 80436b4:	4a03      	ldr	r2, [pc, #12]	; (80436c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80436b6:	6810      	ldr	r0, [r2, #0]
}
 80436b8:	40d8      	lsrs	r0, r3
 80436ba:	4770      	bx	lr
 80436bc:	40023800 	.word	0x40023800
 80436c0:	08046adc 	.word	0x08046adc
 80436c4:	200000b8 	.word	0x200000b8

080436c8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80436c8:	6803      	ldr	r3, [r0, #0]
 80436ca:	f013 0f05 	tst.w	r3, #5
{
 80436ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80436d0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80436d2:	d105      	bne.n	80436e0 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80436d4:	6823      	ldr	r3, [r4, #0]
 80436d6:	f013 0302 	ands.w	r3, r3, #2
 80436da:	d12a      	bne.n	8043732 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80436dc:	2000      	movs	r0, #0
 80436de:	e026      	b.n	804372e <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 80436e0:	4b42      	ldr	r3, [pc, #264]	; (80437ec <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80436e2:	4e43      	ldr	r6, [pc, #268]	; (80437f0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 80436e4:	2200      	movs	r2, #0
 80436e6:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80436e8:	f7fe f8c0 	bl	804186c <HAL_GetTick>
 80436ec:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80436ee:	6833      	ldr	r3, [r6, #0]
 80436f0:	011f      	lsls	r7, r3, #4
 80436f2:	d416      	bmi.n	8043722 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80436f4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80436f8:	071b      	lsls	r3, r3, #28
 80436fa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80436fe:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8043702:	4b3a      	ldr	r3, [pc, #232]	; (80437ec <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8043704:	4e3a      	ldr	r6, [pc, #232]	; (80437f0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 8043706:	2201      	movs	r2, #1
 8043708:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 804370a:	f7fe f8af 	bl	804186c <HAL_GetTick>
 804370e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8043710:	6833      	ldr	r3, [r6, #0]
 8043712:	0118      	lsls	r0, r3, #4
 8043714:	d4de      	bmi.n	80436d4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8043716:	f7fe f8a9 	bl	804186c <HAL_GetTick>
 804371a:	1b40      	subs	r0, r0, r5
 804371c:	2802      	cmp	r0, #2
 804371e:	d9f7      	bls.n	8043710 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8043720:	e004      	b.n	804372c <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8043722:	f7fe f8a3 	bl	804186c <HAL_GetTick>
 8043726:	1b40      	subs	r0, r0, r5
 8043728:	2802      	cmp	r0, #2
 804372a:	d9e0      	bls.n	80436ee <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 804372c:	2003      	movs	r0, #3
}
 804372e:	b003      	add	sp, #12
 8043730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8043732:	2300      	movs	r3, #0
 8043734:	9301      	str	r3, [sp, #4]
 8043736:	4b2e      	ldr	r3, [pc, #184]	; (80437f0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 8043738:	4d2e      	ldr	r5, [pc, #184]	; (80437f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 804373a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804373c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8043740:	641a      	str	r2, [r3, #64]	; 0x40
 8043742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043748:	9301      	str	r3, [sp, #4]
 804374a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 804374c:	682b      	ldr	r3, [r5, #0]
 804374e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043752:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8043754:	f7fe f88a 	bl	804186c <HAL_GetTick>
 8043758:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 804375a:	682b      	ldr	r3, [r5, #0]
 804375c:	05d9      	lsls	r1, r3, #23
 804375e:	d51a      	bpl.n	8043796 <HAL_RCCEx_PeriphCLKConfig+0xce>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8043760:	4d23      	ldr	r5, [pc, #140]	; (80437f0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8043762:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8043764:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8043768:	d11b      	bne.n	80437a2 <HAL_RCCEx_PeriphCLKConfig+0xda>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804376a:	68e3      	ldr	r3, [r4, #12]
 804376c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8043770:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8043774:	4a1e      	ldr	r2, [pc, #120]	; (80437f0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8043776:	d135      	bne.n	80437e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8043778:	6891      	ldr	r1, [r2, #8]
 804377a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 804377e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8043782:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8043786:	4301      	orrs	r1, r0
 8043788:	6091      	str	r1, [r2, #8]
 804378a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 804378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043790:	430b      	orrs	r3, r1
 8043792:	6713      	str	r3, [r2, #112]	; 0x70
 8043794:	e7a2      	b.n	80436dc <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8043796:	f7fe f869 	bl	804186c <HAL_GetTick>
 804379a:	1b80      	subs	r0, r0, r6
 804379c:	2802      	cmp	r0, #2
 804379e:	d9dc      	bls.n	804375a <HAL_RCCEx_PeriphCLKConfig+0x92>
 80437a0:	e7c4      	b.n	804372c <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80437a2:	68e2      	ldr	r2, [r4, #12]
 80437a4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80437a8:	4293      	cmp	r3, r2
 80437aa:	d0de      	beq.n	804376a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80437ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80437ae:	4a0f      	ldr	r2, [pc, #60]	; (80437ec <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80437b0:	2101      	movs	r1, #1
 80437b2:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80437b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80437ba:	2100      	movs	r1, #0
 80437bc:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80437c0:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80437c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80437c4:	07da      	lsls	r2, r3, #31
 80437c6:	d5d0      	bpl.n	804376a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 80437c8:	f7fe f850 	bl	804186c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80437cc:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80437d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80437d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80437d4:	079b      	lsls	r3, r3, #30
 80437d6:	d4c8      	bmi.n	804376a <HAL_RCCEx_PeriphCLKConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80437d8:	f7fe f848 	bl	804186c <HAL_GetTick>
 80437dc:	1b80      	subs	r0, r0, r6
 80437de:	42b8      	cmp	r0, r7
 80437e0:	d9f7      	bls.n	80437d2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80437e2:	e7a3      	b.n	804372c <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80437e4:	6891      	ldr	r1, [r2, #8]
 80437e6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80437ea:	e7cd      	b.n	8043788 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80437ec:	42470000 	.word	0x42470000
 80437f0:	40023800 	.word	0x40023800
 80437f4:	40007000 	.word	0x40007000

080437f8 <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80437f8:	4a0a      	ldr	r2, [pc, #40]	; (8043824 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80437fa:	2303      	movs	r3, #3
 80437fc:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80437fe:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8043802:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8043806:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8043808:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 804380c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8043810:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8043812:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8043814:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8043816:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 804381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804381e:	4313      	orrs	r3, r2
 8043820:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8043822:	4770      	bx	lr
 8043824:	40023800 	.word	0x40023800

08043828 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8043828:	2801      	cmp	r0, #1
 804382a:	d11a      	bne.n	8043862 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 804382c:	4b0e      	ldr	r3, [pc, #56]	; (8043868 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 804382e:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8043830:	0211      	lsls	r1, r2, #8
 8043832:	d416      	bmi.n	8043862 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8043834:	685a      	ldr	r2, [r3, #4]
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8043836:	685b      	ldr	r3, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8043838:	0252      	lsls	r2, r2, #9
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 804383a:	4a0b      	ldr	r2, [pc, #44]	; (8043868 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 804383c:	bf4c      	ite	mi
 804383e:	480b      	ldrmi	r0, [pc, #44]	; (804386c <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8043840:	480b      	ldrpl	r0, [pc, #44]	; (8043870 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8043842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8043846:	fbb0 f3f3 	udiv	r3, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 804384a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 804384e:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8043852:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8043856:	4358      	muls	r0, r3
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8043858:	f3c2 7302 	ubfx	r3, r2, #28, #3
 804385c:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8043860:	4770      	bx	lr
 8043862:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8043864:	4770      	bx	lr
 8043866:	bf00      	nop
 8043868:	40023800 	.word	0x40023800
 804386c:	007a1200 	.word	0x007a1200
 8043870:	00f42400 	.word	0x00f42400

08043874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8043874:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8043878:	461f      	mov	r7, r3
 804387a:	4689      	mov	r9, r1
 804387c:	4690      	mov	r8, r2
 804387e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8043880:	f7fd fff4 	bl	804186c <HAL_GetTick>
 8043884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8043886:	443b      	add	r3, r7
 8043888:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 804388a:	f7fd ffef 	bl	804186c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 804388e:	4b26      	ldr	r3, [pc, #152]	; (8043928 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8043890:	681e      	ldr	r6, [r3, #0]
 8043892:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8043896:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8043898:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 804389a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804389c:	6822      	ldr	r2, [r4, #0]
 804389e:	6893      	ldr	r3, [r2, #8]
 80438a0:	ea39 0303 	bics.w	r3, r9, r3
 80438a4:	bf0c      	ite	eq
 80438a6:	2301      	moveq	r3, #1
 80438a8:	2300      	movne	r3, #0
 80438aa:	4543      	cmp	r3, r8
 80438ac:	d101      	bne.n	80438b2 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 80438ae:	2000      	movs	r0, #0
 80438b0:	e02e      	b.n	8043910 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 80438b2:	1c7b      	adds	r3, r7, #1
 80438b4:	d0f3      	beq.n	804389e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80438b6:	f7fd ffd9 	bl	804186c <HAL_GetTick>
 80438ba:	eba0 000a 	sub.w	r0, r0, sl
 80438be:	42a8      	cmp	r0, r5
 80438c0:	d329      	bcc.n	8043916 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80438c2:	6823      	ldr	r3, [r4, #0]
 80438c4:	685a      	ldr	r2, [r3, #4]
 80438c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80438ca:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80438cc:	6862      	ldr	r2, [r4, #4]
 80438ce:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80438d2:	d10a      	bne.n	80438ea <SPI_WaitFlagStateUntilTimeout+0x76>
 80438d4:	68a2      	ldr	r2, [r4, #8]
 80438d6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80438da:	d002      	beq.n	80438e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80438dc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80438e0:	d103      	bne.n	80438ea <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80438e2:	681a      	ldr	r2, [r3, #0]
 80438e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80438e8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80438ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80438ec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80438f0:	d107      	bne.n	8043902 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80438f2:	681a      	ldr	r2, [r3, #0]
 80438f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80438f8:	601a      	str	r2, [r3, #0]
 80438fa:	681a      	ldr	r2, [r3, #0]
 80438fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8043900:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8043902:	2301      	movs	r3, #1
 8043904:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8043908:	2300      	movs	r3, #0
 804390a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 804390e:	2003      	movs	r0, #3
}
 8043910:	b002      	add	sp, #8
 8043912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8043916:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8043918:	2b00      	cmp	r3, #0
      count--;
 804391a:	9b01      	ldr	r3, [sp, #4]
 804391c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8043920:	bf08      	it	eq
 8043922:	2500      	moveq	r5, #0
      count--;
 8043924:	9301      	str	r3, [sp, #4]
 8043926:	e7b9      	b.n	804389c <SPI_WaitFlagStateUntilTimeout+0x28>
 8043928:	200000b8 	.word	0x200000b8

0804392c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 804392c:	b530      	push	{r4, r5, lr}
 804392e:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8043930:	4913      	ldr	r1, [pc, #76]	; (8043980 <SPI_EndRxTxTransaction+0x54>)
 8043932:	680d      	ldr	r5, [r1, #0]
 8043934:	4913      	ldr	r1, [pc, #76]	; (8043984 <SPI_EndRxTxTransaction+0x58>)
 8043936:	fbb5 f5f1 	udiv	r5, r5, r1
 804393a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 804393e:	434d      	muls	r5, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8043940:	6841      	ldr	r1, [r0, #4]
{
 8043942:	b085      	sub	sp, #20
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8043944:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8043948:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 804394a:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804394c:	d10c      	bne.n	8043968 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804394e:	9200      	str	r2, [sp, #0]
 8043950:	2180      	movs	r1, #128	; 0x80
 8043952:	2200      	movs	r2, #0
 8043954:	f7ff ff8e 	bl	8043874 <SPI_WaitFlagStateUntilTimeout>
 8043958:	b178      	cbz	r0, 804397a <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804395a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804395c:	f043 0320 	orr.w	r3, r3, #32
 8043960:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8043962:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8043964:	b005      	add	sp, #20
 8043966:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8043968:	9b03      	ldr	r3, [sp, #12]
 804396a:	b133      	cbz	r3, 804397a <SPI_EndRxTxTransaction+0x4e>
      count--;
 804396c:	9b03      	ldr	r3, [sp, #12]
 804396e:	3b01      	subs	r3, #1
 8043970:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8043972:	6823      	ldr	r3, [r4, #0]
 8043974:	689b      	ldr	r3, [r3, #8]
 8043976:	061b      	lsls	r3, r3, #24
 8043978:	d4f6      	bmi.n	8043968 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 804397a:	2000      	movs	r0, #0
 804397c:	e7f2      	b.n	8043964 <SPI_EndRxTxTransaction+0x38>
 804397e:	bf00      	nop
 8043980:	200000b8 	.word	0x200000b8
 8043984:	016e3600 	.word	0x016e3600

08043988 <HAL_SPI_MspInit>:
}
 8043988:	4770      	bx	lr

0804398a <HAL_SPI_Init>:
{
 804398a:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 804398c:	4604      	mov	r4, r0
 804398e:	2800      	cmp	r0, #0
 8043990:	d05a      	beq.n	8043a48 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8043992:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8043994:	2b00      	cmp	r3, #0
 8043996:	d153      	bne.n	8043a40 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8043998:	6842      	ldr	r2, [r0, #4]
 804399a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 804399e:	d000      	beq.n	80439a2 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80439a0:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80439a2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80439a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80439aa:	b923      	cbnz	r3, 80439b6 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 80439ac:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80439b0:	4620      	mov	r0, r4
 80439b2:	f7ff ffe9 	bl	8043988 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80439b6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80439b8:	68a5      	ldr	r5, [r4, #8]
 80439ba:	69a2      	ldr	r2, [r4, #24]
 80439bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 80439be:	2302      	movs	r3, #2
 80439c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80439c4:	680b      	ldr	r3, [r1, #0]
 80439c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80439ca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80439cc:	6863      	ldr	r3, [r4, #4]
 80439ce:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 80439d2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80439d6:	432b      	orrs	r3, r5
 80439d8:	68e5      	ldr	r5, [r4, #12]
 80439da:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 80439de:	432b      	orrs	r3, r5
 80439e0:	6925      	ldr	r5, [r4, #16]
 80439e2:	f005 0502 	and.w	r5, r5, #2
 80439e6:	432b      	orrs	r3, r5
 80439e8:	6965      	ldr	r5, [r4, #20]
 80439ea:	f005 0501 	and.w	r5, r5, #1
 80439ee:	432b      	orrs	r3, r5
 80439f0:	f402 7500 	and.w	r5, r2, #512	; 0x200
 80439f4:	432b      	orrs	r3, r5
 80439f6:	69e5      	ldr	r5, [r4, #28]
 80439f8:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80439fc:	432b      	orrs	r3, r5
 80439fe:	6a25      	ldr	r5, [r4, #32]
 8043a00:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8043a04:	432b      	orrs	r3, r5
 8043a06:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 8043a0a:	432b      	orrs	r3, r5
 8043a0c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8043a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8043a10:	0c12      	lsrs	r2, r2, #16
 8043a12:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8043a16:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8043a1a:	f002 0204 	and.w	r2, r2, #4
 8043a1e:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8043a22:	bf08      	it	eq
 8043a24:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8043a26:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8043a28:	bf08      	it	eq
 8043a2a:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8043a2c:	69cb      	ldr	r3, [r1, #28]
 8043a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8043a32:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8043a34:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8043a36:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8043a38:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8043a3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8043a3e:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8043a40:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8043a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8043a46:	e7ac      	b.n	80439a2 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8043a48:	2001      	movs	r0, #1
 8043a4a:	e7f8      	b.n	8043a3e <HAL_SPI_Init+0xb4>

08043a4c <HAL_SPI_MspDeInit>:
 8043a4c:	4770      	bx	lr

08043a4e <HAL_SPI_DeInit>:
{
 8043a4e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8043a50:	4604      	mov	r4, r0
 8043a52:	b180      	cbz	r0, 8043a76 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8043a54:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8043a56:	2302      	movs	r3, #2
 8043a58:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8043a5c:	6813      	ldr	r3, [r2, #0]
 8043a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8043a62:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8043a64:	f7ff fff2 	bl	8043a4c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8043a68:	2000      	movs	r0, #0
 8043a6a:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8043a6c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8043a70:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8043a74:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8043a76:	2001      	movs	r0, #1
 8043a78:	e7fc      	b.n	8043a74 <HAL_SPI_DeInit+0x26>

08043a7a <HAL_SPI_TransmitReceive>:
{
 8043a7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8043a7e:	b085      	sub	sp, #20
 8043a80:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 8043a82:	2300      	movs	r3, #0
 8043a84:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8043a86:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8043a8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8043a8c:	2b01      	cmp	r3, #1
{
 8043a8e:	4604      	mov	r4, r0
 8043a90:	4688      	mov	r8, r1
 8043a92:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 8043a94:	f000 813a 	beq.w	8043d0c <HAL_SPI_TransmitReceive+0x292>
 8043a98:	2301      	movs	r3, #1
 8043a9a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8043a9e:	f7fd fee5 	bl	804186c <HAL_GetTick>
  tmp_state           = hspi->State;
 8043aa2:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8043aa6:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8043aa8:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8043aaa:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8043aac:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8043aae:	d00a      	beq.n	8043ac6 <HAL_SPI_TransmitReceive+0x4c>
 8043ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8043ab4:	f040 8128 	bne.w	8043d08 <HAL_SPI_TransmitReceive+0x28e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8043ab8:	68a2      	ldr	r2, [r4, #8]
 8043aba:	2a00      	cmp	r2, #0
 8043abc:	f040 8124 	bne.w	8043d08 <HAL_SPI_TransmitReceive+0x28e>
 8043ac0:	2904      	cmp	r1, #4
 8043ac2:	f040 8121 	bne.w	8043d08 <HAL_SPI_TransmitReceive+0x28e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8043ac6:	f1b8 0f00 	cmp.w	r8, #0
 8043aca:	f000 810f 	beq.w	8043cec <HAL_SPI_TransmitReceive+0x272>
 8043ace:	2d00      	cmp	r5, #0
 8043ad0:	f000 810c 	beq.w	8043cec <HAL_SPI_TransmitReceive+0x272>
 8043ad4:	f1b9 0f00 	cmp.w	r9, #0
 8043ad8:	f000 8108 	beq.w	8043cec <HAL_SPI_TransmitReceive+0x272>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8043adc:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8043ae0:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8043ae2:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8043ae4:	bf1c      	itt	ne
 8043ae6:	2205      	movne	r2, #5
 8043ae8:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8043aec:	2200      	movs	r2, #0
 8043aee:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8043af0:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8043af4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8043af6:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8043afa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    SPI_RESET_CRC(hspi);
 8043afe:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferSize  = Size;
 8043b00:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8043b04:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8043b08:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8043b0c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8043b10:	d107      	bne.n	8043b22 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 8043b12:	682a      	ldr	r2, [r5, #0]
 8043b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8043b18:	602a      	str	r2, [r5, #0]
 8043b1a:	682a      	ldr	r2, [r5, #0]
 8043b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8043b20:	602a      	str	r2, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8043b22:	682a      	ldr	r2, [r5, #0]
 8043b24:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8043b26:	bf5e      	ittt	pl
 8043b28:	682a      	ldrpl	r2, [r5, #0]
 8043b2a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8043b2e:	602a      	strpl	r2, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8043b30:	68e2      	ldr	r2, [r4, #12]
 8043b32:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8043b36:	d169      	bne.n	8043c0c <HAL_SPI_TransmitReceive+0x192>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8043b38:	b113      	cbz	r3, 8043b40 <HAL_SPI_TransmitReceive+0xc6>
 8043b3a:	f1b9 0f01 	cmp.w	r9, #1
 8043b3e:	d108      	bne.n	8043b52 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8043b40:	4641      	mov	r1, r8
 8043b42:	f831 3b02 	ldrh.w	r3, [r1], #2
 8043b46:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8043b48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8043b4a:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8043b4c:	3b01      	subs	r3, #1
 8043b4e:	b29b      	uxth	r3, r3
 8043b50:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8043b52:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8043b54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8043b56:	b29b      	uxth	r3, r3
 8043b58:	b9b3      	cbnz	r3, 8043b88 <HAL_SPI_TransmitReceive+0x10e>
 8043b5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8043b5c:	b29b      	uxth	r3, r3
 8043b5e:	b99b      	cbnz	r3, 8043b88 <HAL_SPI_TransmitReceive+0x10e>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8043b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8043b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043b66:	f040 80ac 	bne.w	8043cc2 <HAL_SPI_TransmitReceive+0x248>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8043b6a:	2201      	movs	r2, #1
 8043b6c:	9700      	str	r7, [sp, #0]
 8043b6e:	4633      	mov	r3, r6
 8043b70:	4611      	mov	r1, r2
 8043b72:	4620      	mov	r0, r4
 8043b74:	f7ff fe7e 	bl	8043874 <SPI_WaitFlagStateUntilTimeout>
 8043b78:	2800      	cmp	r0, #0
 8043b7a:	f000 809e 	beq.w	8043cba <HAL_SPI_TransmitReceive+0x240>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8043b7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8043b80:	f043 0302 	orr.w	r3, r3, #2
 8043b84:	6563      	str	r3, [r4, #84]	; 0x54
 8043b86:	e020      	b.n	8043bca <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8043b88:	6822      	ldr	r2, [r4, #0]
 8043b8a:	6893      	ldr	r3, [r2, #8]
 8043b8c:	079b      	lsls	r3, r3, #30
 8043b8e:	d504      	bpl.n	8043b9a <HAL_SPI_TransmitReceive+0x120>
 8043b90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8043b92:	b29b      	uxth	r3, r3
 8043b94:	b10b      	cbz	r3, 8043b9a <HAL_SPI_TransmitReceive+0x120>
 8043b96:	bb1d      	cbnz	r5, 8043be0 <HAL_SPI_TransmitReceive+0x166>
{
 8043b98:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8043b9a:	6891      	ldr	r1, [r2, #8]
 8043b9c:	f011 0101 	ands.w	r1, r1, #1
 8043ba0:	d00c      	beq.n	8043bbc <HAL_SPI_TransmitReceive+0x142>
 8043ba2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8043ba4:	b29b      	uxth	r3, r3
 8043ba6:	b14b      	cbz	r3, 8043bbc <HAL_SPI_TransmitReceive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8043ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8043baa:	68d2      	ldr	r2, [r2, #12]
 8043bac:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8043bb0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8043bb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8043bb4:	3b01      	subs	r3, #1
 8043bb6:	b29b      	uxth	r3, r3
 8043bb8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8043bba:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8043bbc:	f7fd fe56 	bl	804186c <HAL_GetTick>
 8043bc0:	1bc0      	subs	r0, r0, r7
 8043bc2:	42b0      	cmp	r0, r6
 8043bc4:	d3c6      	bcc.n	8043b54 <HAL_SPI_TransmitReceive+0xda>
 8043bc6:	1c70      	adds	r0, r6, #1
 8043bc8:	d0c4      	beq.n	8043b54 <HAL_SPI_TransmitReceive+0xda>
      errorcode = HAL_TIMEOUT;
 8043bca:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8043bcc:	2301      	movs	r3, #1
 8043bce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8043bd2:	2300      	movs	r3, #0
 8043bd4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8043bd8:	4628      	mov	r0, r5
 8043bda:	b005      	add	sp, #20
 8043bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8043be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8043be2:	f833 1b02 	ldrh.w	r1, [r3], #2
 8043be6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8043be8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8043bea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8043bec:	3b01      	subs	r3, #1
 8043bee:	b29b      	uxth	r3, r3
 8043bf0:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8043bf2:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8043bf4:	b2ad      	uxth	r5, r5
 8043bf6:	2d00      	cmp	r5, #0
 8043bf8:	d1ce      	bne.n	8043b98 <HAL_SPI_TransmitReceive+0x11e>
 8043bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8043bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043c00:	d1ca      	bne.n	8043b98 <HAL_SPI_TransmitReceive+0x11e>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8043c02:	6813      	ldr	r3, [r2, #0]
 8043c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8043c08:	6013      	str	r3, [r2, #0]
 8043c0a:	e7c6      	b.n	8043b9a <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8043c0c:	b113      	cbz	r3, 8043c14 <HAL_SPI_TransmitReceive+0x19a>
 8043c0e:	f1b9 0f01 	cmp.w	r9, #1
 8043c12:	d109      	bne.n	8043c28 <HAL_SPI_TransmitReceive+0x1ae>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8043c14:	f898 3000 	ldrb.w	r3, [r8]
 8043c18:	732b      	strb	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8043c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8043c1c:	3301      	adds	r3, #1
 8043c1e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8043c20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8043c22:	3b01      	subs	r3, #1
 8043c24:	b29b      	uxth	r3, r3
 8043c26:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8043c28:	2501      	movs	r5, #1
 8043c2a:	e022      	b.n	8043c72 <HAL_SPI_TransmitReceive+0x1f8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8043c2c:	6822      	ldr	r2, [r4, #0]
 8043c2e:	6893      	ldr	r3, [r2, #8]
 8043c30:	0799      	lsls	r1, r3, #30
 8043c32:	d504      	bpl.n	8043c3e <HAL_SPI_TransmitReceive+0x1c4>
 8043c34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8043c36:	b29b      	uxth	r3, r3
 8043c38:	b10b      	cbz	r3, 8043c3e <HAL_SPI_TransmitReceive+0x1c4>
 8043c3a:	bb1d      	cbnz	r5, 8043c84 <HAL_SPI_TransmitReceive+0x20a>
        txallowed = 1U;
 8043c3c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8043c3e:	6822      	ldr	r2, [r4, #0]
 8043c40:	6891      	ldr	r1, [r2, #8]
 8043c42:	f011 0101 	ands.w	r1, r1, #1
 8043c46:	d00d      	beq.n	8043c64 <HAL_SPI_TransmitReceive+0x1ea>
 8043c48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8043c4a:	b29b      	uxth	r3, r3
 8043c4c:	b153      	cbz	r3, 8043c64 <HAL_SPI_TransmitReceive+0x1ea>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8043c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8043c50:	68d2      	ldr	r2, [r2, #12]
 8043c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8043c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8043c56:	3301      	adds	r3, #1
 8043c58:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8043c5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8043c5c:	3b01      	subs	r3, #1
 8043c5e:	b29b      	uxth	r3, r3
 8043c60:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8043c62:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8043c64:	f7fd fe02 	bl	804186c <HAL_GetTick>
 8043c68:	1bc0      	subs	r0, r0, r7
 8043c6a:	42b0      	cmp	r0, r6
 8043c6c:	d322      	bcc.n	8043cb4 <HAL_SPI_TransmitReceive+0x23a>
 8043c6e:	1c73      	adds	r3, r6, #1
 8043c70:	d1ab      	bne.n	8043bca <HAL_SPI_TransmitReceive+0x150>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8043c72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8043c74:	b29b      	uxth	r3, r3
 8043c76:	2b00      	cmp	r3, #0
 8043c78:	d1d8      	bne.n	8043c2c <HAL_SPI_TransmitReceive+0x1b2>
 8043c7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8043c7c:	b29b      	uxth	r3, r3
 8043c7e:	2b00      	cmp	r3, #0
 8043c80:	d1d4      	bne.n	8043c2c <HAL_SPI_TransmitReceive+0x1b2>
 8043c82:	e76d      	b.n	8043b60 <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8043c84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8043c86:	781b      	ldrb	r3, [r3, #0]
 8043c88:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8043c8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8043c8c:	3301      	adds	r3, #1
 8043c8e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8043c90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8043c92:	3b01      	subs	r3, #1
 8043c94:	b29b      	uxth	r3, r3
 8043c96:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8043c98:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8043c9a:	b2ad      	uxth	r5, r5
 8043c9c:	2d00      	cmp	r5, #0
 8043c9e:	d1cd      	bne.n	8043c3c <HAL_SPI_TransmitReceive+0x1c2>
 8043ca0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8043ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043ca6:	d1c9      	bne.n	8043c3c <HAL_SPI_TransmitReceive+0x1c2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8043ca8:	6822      	ldr	r2, [r4, #0]
 8043caa:	6813      	ldr	r3, [r2, #0]
 8043cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8043cb0:	6013      	str	r3, [r2, #0]
 8043cb2:	e7c4      	b.n	8043c3e <HAL_SPI_TransmitReceive+0x1c4>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8043cb4:	2e00      	cmp	r6, #0
 8043cb6:	d1dc      	bne.n	8043c72 <HAL_SPI_TransmitReceive+0x1f8>
 8043cb8:	e787      	b.n	8043bca <HAL_SPI_TransmitReceive+0x150>
    tmpreg = READ_REG(hspi->Instance->DR);
 8043cba:	6823      	ldr	r3, [r4, #0]
 8043cbc:	68db      	ldr	r3, [r3, #12]
 8043cbe:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8043cc0:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8043cc2:	6822      	ldr	r2, [r4, #0]
 8043cc4:	6895      	ldr	r5, [r2, #8]
 8043cc6:	f015 0510 	ands.w	r5, r5, #16
 8043cca:	d007      	beq.n	8043cdc <HAL_SPI_TransmitReceive+0x262>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8043ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8043cce:	f043 0302 	orr.w	r3, r3, #2
 8043cd2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8043cd4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8043cd8:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8043cda:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8043cdc:	463a      	mov	r2, r7
 8043cde:	4631      	mov	r1, r6
 8043ce0:	4620      	mov	r0, r4
 8043ce2:	f7ff fe23 	bl	804392c <SPI_EndRxTxTransaction>
 8043ce6:	b118      	cbz	r0, 8043cf0 <HAL_SPI_TransmitReceive+0x276>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8043ce8:	2320      	movs	r3, #32
 8043cea:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8043cec:	2501      	movs	r5, #1
 8043cee:	e76d      	b.n	8043bcc <HAL_SPI_TransmitReceive+0x152>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8043cf0:	68a3      	ldr	r3, [r4, #8]
 8043cf2:	2b00      	cmp	r3, #0
 8043cf4:	f47f af6a 	bne.w	8043bcc <HAL_SPI_TransmitReceive+0x152>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8043cf8:	9303      	str	r3, [sp, #12]
 8043cfa:	6823      	ldr	r3, [r4, #0]
 8043cfc:	68da      	ldr	r2, [r3, #12]
 8043cfe:	9203      	str	r2, [sp, #12]
 8043d00:	689b      	ldr	r3, [r3, #8]
 8043d02:	9303      	str	r3, [sp, #12]
 8043d04:	9b03      	ldr	r3, [sp, #12]
 8043d06:	e761      	b.n	8043bcc <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_BUSY;
 8043d08:	2502      	movs	r5, #2
 8043d0a:	e75f      	b.n	8043bcc <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8043d0c:	2502      	movs	r5, #2
 8043d0e:	e763      	b.n	8043bd8 <HAL_SPI_TransmitReceive+0x15e>

08043d10 <HAL_SPI_GetState>:
  return hspi->State;
 8043d10:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8043d14:	4770      	bx	lr
	...

08043d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8043d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8043d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8043d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8043d1e:	e003      	b.n	8043d28 <LoopCopyDataInit>

08043d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8043d20:	4b0c      	ldr	r3, [pc, #48]	; (8043d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8043d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8043d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8043d26:	3104      	adds	r1, #4

08043d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8043d28:	480b      	ldr	r0, [pc, #44]	; (8043d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8043d2a:	4b0c      	ldr	r3, [pc, #48]	; (8043d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8043d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8043d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8043d30:	d3f6      	bcc.n	8043d20 <CopyDataInit>
  ldr  r2, =_sbss
 8043d32:	4a0b      	ldr	r2, [pc, #44]	; (8043d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8043d34:	e002      	b.n	8043d3c <LoopFillZerobss>

08043d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8043d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8043d38:	f842 3b04 	str.w	r3, [r2], #4

08043d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8043d3c:	4b09      	ldr	r3, [pc, #36]	; (8043d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8043d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8043d40:	d3f9      	bcc.n	8043d36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8043d42:	f7fd fd27 	bl	8041794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8043d46:	f002 fa2b 	bl	80461a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8043d4a:	f000 f9ef 	bl	804412c <main>
  bx  lr    
 8043d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8043d50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8043d54:	08046b4c 	.word	0x08046b4c
  ldr  r0, =_sdata
 8043d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8043d5c:	200005ec 	.word	0x200005ec
  ldr  r2, =_sbss
 8043d60:	200005ec 	.word	0x200005ec
  ldr  r3, = _ebss
 8043d64:	2000ea50 	.word	0x2000ea50

08043d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8043d68:	e7fe      	b.n	8043d68 <ADC_IRQHandler>
	...

08043d6c <AudioPlay_Test>:
  *   Audio peripheral.
  * @param  None
  * @retval None
  */
void AudioPlay_Test(void)
{  
 8043d6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Initial volume level (from 0 (Mute) to 100 (Max)) */
  __IO uint8_t volume = 70;
 8043d6e:	2346      	movs	r3, #70	; 0x46
 8043d70:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Initialize MEMS Accelerometer mounted on STM32F4-Discovery board */
  if(BSP_ACCELERO_Init() != ACCELERO_OK)
 8043d74:	f7fd f9ce 	bl	8041114 <BSP_ACCELERO_Init>
 8043d78:	b108      	cbz	r0, 8043d7e <AudioPlay_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler();
 8043d7a:	f000 fa6f 	bl	804425c <Error_Handler>
  }
  
  /* Enable MEMS click feature only for STM32F4-DISCO rev B board */
  if (BSP_ACCELERO_ReadID() == I_AM_LIS302DL)
 8043d7e:	f7fd f9ed 	bl	804115c <BSP_ACCELERO_ReadID>
 8043d82:	283b      	cmp	r0, #59	; 0x3b
 8043d84:	d103      	bne.n	8043d8e <AudioPlay_Test+0x22>
  {
    /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
    BSP_ACCELERO_Click_ITConfig();
 8043d86:	f7fd f9f1 	bl	804116c <BSP_ACCELERO_Click_ITConfig>
    
    /* Clear MEMS click interruption */
    BSP_ACCELERO_Click_ITClear();
 8043d8a:	f7fd f9f7 	bl	804117c <BSP_ACCELERO_Click_ITClear>
  }
  
  /* Turn ON LED6: start of Audio file play */
  BSP_LED_On(LED6);
 8043d8e:	2003      	movs	r0, #3
 8043d90:	f7fd f848 	bl	8040e24 <BSP_LED_On>
  
  /* Retrieve Wave Sample rate */
  waveformat = (WAVE_FormatTypeDef*) AUDIO_FILE_ADDRESS;
 8043d94:	4b25      	ldr	r3, [pc, #148]	; (8043e2c <AudioPlay_Test+0xc0>)
 8043d96:	4c26      	ldr	r4, [pc, #152]	; (8043e30 <AudioPlay_Test+0xc4>)

  /* Initialize Audio Device */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, volume, waveformat->SampleRate) != 0)
 8043d98:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8043d9c:	699a      	ldr	r2, [r3, #24]
  waveformat = (WAVE_FormatTypeDef*) AUDIO_FILE_ADDRESS;
 8043d9e:	6023      	str	r3, [r4, #0]
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, volume, waveformat->SampleRate) != 0)
 8043da0:	2004      	movs	r0, #4
 8043da2:	f7fd fb47 	bl	8041434 <BSP_AUDIO_OUT_Init>
 8043da6:	b108      	cbz	r0, 8043dac <AudioPlay_Test+0x40>
  {
    Error_Handler();
 8043da8:	f000 fa58 	bl	804425c <Error_Handler>
  /* Set variable used to stop player before starting */
  UserPressButton = 0;
  AudioTest = 0;
  
  /* Set the total number of data to be played */
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8043dac:	4e21      	ldr	r6, [pc, #132]	; (8043e34 <AudioPlay_Test+0xc8>)
  UserPressButton = 0;
 8043dae:	4d22      	ldr	r5, [pc, #136]	; (8043e38 <AudioPlay_Test+0xcc>)
  /* Set the current audio pointer position */
  CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8043db0:	481e      	ldr	r0, [pc, #120]	; (8043e2c <AudioPlay_Test+0xc0>)
 8043db2:	60a0      	str	r0, [r4, #8]
  UserPressButton = 0;
 8043db4:	2300      	movs	r3, #0
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8043db6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
  UserPressButton = 0;
 8043dba:	702b      	strb	r3, [r5, #0]
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8043dbc:	6031      	str	r1, [r6, #0]
  AudioTest = 0;
 8043dbe:	6063      	str	r3, [r4, #4]
  /* Start the audio player */
  BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);  
 8043dc0:	f7fd fa18 	bl	80411f4 <BSP_AUDIO_OUT_Play>
  /* Update the remaining number of data to be played */
  AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8043dc4:	6833      	ldr	r3, [r6, #0]
 8043dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043dca:	429a      	cmp	r2, r3
 8043dcc:	bf28      	it	cs
 8043dce:	461a      	movcs	r2, r3
 8043dd0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  /* Update the current audio pointer position */
  CurrentPos += DMA_MAX(AudioTotalSize);
 8043dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8043dd8:	6072      	str	r2, [r6, #4]
  CurrentPos += DMA_MAX(AudioTotalSize);
 8043dda:	bf28      	it	cs
 8043ddc:	4b17      	ldrcs	r3, [pc, #92]	; (8043e3c <AudioPlay_Test+0xd0>)
 8043dde:	68a2      	ldr	r2, [r4, #8]
 8043de0:	bf38      	it	cc
 8043de2:	005b      	lslcc	r3, r3, #1
 8043de4:	4413      	add	r3, r2
 8043de6:	60a3      	str	r3, [r4, #8]
  
  /* Infinite loop */
  while(!UserPressButton)
  { 
    if (PauseResumeStatus == PAUSE_STATUS)
 8043de8:	4c15      	ldr	r4, [pc, #84]	; (8043e40 <AudioPlay_Test+0xd4>)
      /* Turn OFF LED4: Audio play running */
      BSP_LED_Off(LED4);
      
      /* Resume playing */
      BSP_AUDIO_OUT_Resume();
      PauseResumeStatus = IDLE_STATUS;
 8043dea:	2602      	movs	r6, #2
  while(!UserPressButton)
 8043dec:	782b      	ldrb	r3, [r5, #0]
 8043dee:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8043df2:	b143      	cbz	r3, 8043e06 <AudioPlay_Test+0x9a>
    }
  }
  
  /* Stop Player before close Test */
  if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW) != AUDIO_OK)
 8043df4:	2001      	movs	r0, #1
 8043df6:	f7fd fa45 	bl	8041284 <BSP_AUDIO_OUT_Stop>
 8043dfa:	b1a8      	cbz	r0, 8043e28 <AudioPlay_Test+0xbc>
  {
    /* Audio Stop error */
    Error_Handler();
  }
}
 8043dfc:	b002      	add	sp, #8
 8043dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8043e02:	f000 ba2b 	b.w	804425c <Error_Handler>
    if (PauseResumeStatus == PAUSE_STATUS)
 8043e06:	6823      	ldr	r3, [r4, #0]
 8043e08:	b933      	cbnz	r3, 8043e18 <AudioPlay_Test+0xac>
      BSP_LED_On(LED4);
 8043e0a:	4618      	mov	r0, r3
 8043e0c:	f7fd f80a 	bl	8040e24 <BSP_LED_On>
      BSP_AUDIO_OUT_Pause();
 8043e10:	f7fd fa14 	bl	804123c <BSP_AUDIO_OUT_Pause>
      PauseResumeStatus = IDLE_STATUS;
 8043e14:	6026      	str	r6, [r4, #0]
 8043e16:	e7e9      	b.n	8043dec <AudioPlay_Test+0x80>
    else if (PauseResumeStatus == RESUME_STATUS)
 8043e18:	6823      	ldr	r3, [r4, #0]
 8043e1a:	2b01      	cmp	r3, #1
 8043e1c:	d1e6      	bne.n	8043dec <AudioPlay_Test+0x80>
      BSP_LED_Off(LED4);
 8043e1e:	f7fd f80f 	bl	8040e40 <BSP_LED_Off>
      BSP_AUDIO_OUT_Resume();
 8043e22:	f7fd fa1d 	bl	8041260 <BSP_AUDIO_OUT_Resume>
 8043e26:	e7f5      	b.n	8043e14 <AudioPlay_Test+0xa8>
}
 8043e28:	b002      	add	sp, #8
 8043e2a:	bd70      	pop	{r4, r5, r6, pc}
 8043e2c:	08080000 	.word	0x08080000
 8043e30:	200008b8 	.word	0x200008b8
 8043e34:	200000c4 	.word	0x200000c4
 8043e38:	2000ea44 	.word	0x2000ea44
 8043e3c:	0001fffe 	.word	0x0001fffe
 8043e40:	200000cc 	.word	0x200000cc

08043e44 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @brief  Calculates the remaining file size and new position of the pointer.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack()
{
 8043e44:	b570      	push	{r4, r5, r6, lr}
  uint32_t replay = 0;
  
  if (AudioRemSize > 0)
 8043e46:	4d24      	ldr	r5, [pc, #144]	; (8043ed8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>)
 8043e48:	4c24      	ldr	r4, [pc, #144]	; (8043edc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x98>)
 8043e4a:	6869      	ldr	r1, [r5, #4]
 8043e4c:	2900      	cmp	r1, #0
 8043e4e:	d03f      	beq.n	8043ed0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8c>
  {
    /* Replay from the current position */
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)CurrentPos, DMA_MAX(AudioRemSize/AUDIODATA_SIZE));
 8043e50:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8043e54:	bf34      	ite	cc
 8043e56:	f3c1 014f 	ubfxcc	r1, r1, #1, #16
 8043e5a:	f64f 71ff 	movwcs	r1, #65535	; 0xffff
 8043e5e:	68a0      	ldr	r0, [r4, #8]
 8043e60:	f7fd f9e4 	bl	804122c <BSP_AUDIO_OUT_ChangeBuffer>
    
    /* Update the current pointer position */
    CurrentPos += DMA_MAX(AudioRemSize);        
 8043e64:	686b      	ldr	r3, [r5, #4]
 8043e66:	68a2      	ldr	r2, [r4, #8]
 8043e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043e6c:	bf2c      	ite	cs
 8043e6e:	491c      	ldrcs	r1, [pc, #112]	; (8043ee0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8043e70:	0059      	lslcc	r1, r3, #1
 8043e72:	440a      	add	r2, r1
    
    /* Update the remaining number of data to be played */
    AudioRemSize -= AUDIODATA_SIZE * DMA_MAX(AudioRemSize/AUDIODATA_SIZE);  
 8043e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    CurrentPos += DMA_MAX(AudioRemSize);        
 8043e78:	60a2      	str	r2, [r4, #8]
    AudioRemSize -= AUDIODATA_SIZE * DMA_MAX(AudioRemSize/AUDIODATA_SIZE);  
 8043e7a:	bf2c      	ite	cs
 8043e7c:	4a18      	ldrcs	r2, [pc, #96]	; (8043ee0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8043e7e:	f023 0201 	biccc.w	r2, r3, #1
 8043e82:	1a9b      	subs	r3, r3, r2
 8043e84:	606b      	str	r3, [r5, #4]
  uint32_t replay = 0;
 8043e86:	2600      	movs	r6, #0
    /* Request to replay audio file from beginning */
    replay = 1;
  }
  
  /* Audio sample used for play */
  if((AudioTest == 0) && (replay == 1))
 8043e88:	6863      	ldr	r3, [r4, #4]
 8043e8a:	b9bb      	cbnz	r3, 8043ebc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x78>
 8043e8c:	b1b6      	cbz	r6, 8043ebc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x78>
  {
    /* Replay from the beginning */
    /* Set the current audio pointer position */
    CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8043e8e:	4815      	ldr	r0, [pc, #84]	; (8043ee4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa0>)
    /* Replay from the beginning */
    BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);
 8043e90:	6829      	ldr	r1, [r5, #0]
    CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8043e92:	60a0      	str	r0, [r4, #8]
    BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);
 8043e94:	f7fd f9ae 	bl	80411f4 <BSP_AUDIO_OUT_Play>
    /* Update the remaining number of data to be played */
    AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8043e98:	682b      	ldr	r3, [r5, #0]
 8043e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043e9e:	429a      	cmp	r2, r3
 8043ea0:	bf28      	it	cs
 8043ea2:	461a      	movcs	r2, r3
 8043ea4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    /* Update the current audio pointer position */
    CurrentPos += DMA_MAX(AudioTotalSize);
 8043ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043eac:	bf28      	it	cs
 8043eae:	4b0c      	ldrcs	r3, [pc, #48]	; (8043ee0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
    AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8043eb0:	606a      	str	r2, [r5, #4]
    CurrentPos += DMA_MAX(AudioTotalSize);
 8043eb2:	68a2      	ldr	r2, [r4, #8]
 8043eb4:	bf38      	it	cc
 8043eb6:	005b      	lslcc	r3, r3, #1
 8043eb8:	4413      	add	r3, r2
 8043eba:	60a3      	str	r3, [r4, #8]
  }
  
  /* Audio sample saved during record */
  if((AudioTest == 1) && (replay == 1))
 8043ebc:	6863      	ldr	r3, [r4, #4]
 8043ebe:	2b01      	cmp	r3, #1
 8043ec0:	d108      	bne.n	8043ed4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>
 8043ec2:	b13e      	cbz	r6, 8043ed4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>
  {
    /* Replay from the beginning */
    BSP_AUDIO_OUT_Play(WrBuffer, AudioTotalSize);
 8043ec4:	6829      	ldr	r1, [r5, #0]
 8043ec6:	4808      	ldr	r0, [pc, #32]	; (8043ee8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa4>)
  }
}
 8043ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_AUDIO_OUT_Play(WrBuffer, AudioTotalSize);
 8043ecc:	f7fd b992 	b.w	80411f4 <BSP_AUDIO_OUT_Play>
    replay = 1;
 8043ed0:	2601      	movs	r6, #1
 8043ed2:	e7d9      	b.n	8043e88 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x44>
}
 8043ed4:	bd70      	pop	{r4, r5, r6, pc}
 8043ed6:	bf00      	nop
 8043ed8:	200000c4 	.word	0x200000c4
 8043edc:	200008b8 	.word	0x200008b8
 8043ee0:	0001fffe 	.word	0x0001fffe
 8043ee4:	08080000 	.word	0x08080000
 8043ee8:	20000a18 	.word	0x20000a18

08043eec <BSP_AUDIO_OUT_Error_CallBack>:
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
  /* Stop the program with an infinite loop */
  Error_Handler();
 8043eec:	f000 b9b6 	b.w	804425c <Error_Handler>

08043ef0 <AudioRecord_Test>:
  *   Audio peripheral.
  * @param  None
  * @retval None
  */
void AudioRecord_Test(void)
{
 8043ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8043ef2:	4c5f      	ldr	r4, [pc, #380]	; (8044070 <AudioRecord_Test+0x180>)
 8043ef4:	2300      	movs	r3, #0
  if(BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 8043ef6:	2201      	movs	r2, #1
 8043ef8:	2110      	movs	r1, #16
 8043efa:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8043efe:	6023      	str	r3, [r4, #0]
  if(BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 8043f00:	f7fd fbb8 	bl	8041674 <BSP_AUDIO_IN_Init>
 8043f04:	b108      	cbz	r0, 8043f0a <AudioRecord_Test+0x1a>
  {
    /* Record Error */
    Error_Handler();
 8043f06:	f000 f9a9 	bl	804425c <Error_Handler>
  }  

  /* Turn ON LED3: start record */
  BSP_LED_On(LED3);
 8043f0a:	2001      	movs	r0, #1
 8043f0c:	f7fc ff8a 	bl	8040e24 <BSP_LED_On>
  
  /* Start the record */
  if (BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE) != AUDIO_OK)
 8043f10:	4858      	ldr	r0, [pc, #352]	; (8044074 <AudioRecord_Test+0x184>)
 8043f12:	2180      	movs	r1, #128	; 0x80
 8043f14:	f7fd fadc 	bl	80414d0 <BSP_AUDIO_IN_Record>
 8043f18:	b108      	cbz	r0, 8043f1e <AudioRecord_Test+0x2e>
  {
    /* Record Error */
    Error_Handler();
 8043f1a:	f000 f99f 	bl	804425c <Error_Handler>
  }
  BufferCtl.fptr = 0;
 8043f1e:	2300      	movs	r3, #0
  while (AUDIODataReady != 2) 
  {
    if(BufferCtl.offset == BUFFER_OFFSET_HALF)
    {
      /* PDM to PCM data convert */
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8043f20:	4f55      	ldr	r7, [pc, #340]	; (8044078 <AudioRecord_Test+0x188>)
      
      /* Copy PCM data in internal buffer */
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8043f22:	4e56      	ldr	r6, [pc, #344]	; (804407c <AudioRecord_Test+0x18c>)
  BufferCtl.fptr = 0;
 8043f24:	6063      	str	r3, [r4, #4]
  AUDIODataReady = 0; 
 8043f26:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
      
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8043f2a:	2500      	movs	r5, #0
 8043f2c:	e034      	b.n	8043f98 <AudioRecord_Test+0xa8>
    if(BufferCtl.offset == BUFFER_OFFSET_HALF)
 8043f2e:	6823      	ldr	r3, [r4, #0]
 8043f30:	2b01      	cmp	r3, #1
 8043f32:	d163      	bne.n	8043ffc <AudioRecord_Test+0x10c>
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8043f34:	4639      	mov	r1, r7
 8043f36:	484f      	ldr	r0, [pc, #316]	; (8044074 <AudioRecord_Test+0x184>)
 8043f38:	f7fd fadc 	bl	80414f4 <BSP_AUDIO_IN_PDMToPCM>
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8043f3c:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8043f40:	4b4d      	ldr	r3, [pc, #308]	; (8044078 <AudioRecord_Test+0x188>)
 8043f42:	eb06 1282 	add.w	r2, r6, r2, lsl #6
 8043f46:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8043f4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8043f4e:	f842 0b04 	str.w	r0, [r2], #4
 8043f52:	428b      	cmp	r3, r1
 8043f54:	d1f9      	bne.n	8043f4a <AudioRecord_Test+0x5a>
      
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8043f56:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8043f5a:	6025      	str	r5, [r4, #0]
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8043f5c:	f240 13bf 	movw	r3, #447	; 0x1bf
 8043f60:	429a      	cmp	r2, r3
 8043f62:	d10a      	bne.n	8043f7a <AudioRecord_Test+0x8a>
      {
        AUDIODataReady = 1;
 8043f64:	2301      	movs	r3, #1
 8043f66:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        AUDIOBuffOffset = 0;
 8043f6a:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
        ITCounter = 0;
      }
      else
      {
        ITCounter++;
 8043f6e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8043f72:	3301      	adds	r3, #1
 8043f74:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
 8043f78:	e00e      	b.n	8043f98 <AudioRecord_Test+0xa8>
      else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8043f7a:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8043f7e:	f240 337f 	movw	r3, #895	; 0x37f
 8043f82:	429a      	cmp	r2, r3
 8043f84:	d1f3      	bne.n	8043f6e <AudioRecord_Test+0x7e>
        AUDIODataReady = 2;
 8043f86:	2302      	movs	r3, #2
 8043f88:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8043f8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8043f90:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        ITCounter = 0;
 8043f94:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
  while (AUDIODataReady != 2) 
 8043f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8043f9c:	2b02      	cmp	r3, #2
 8043f9e:	d1c6      	bne.n	8043f2e <AudioRecord_Test+0x3e>
      }  
    }   
  };
  
  /* Stop audio record */
  if (BSP_AUDIO_IN_Stop() != AUDIO_OK)
 8043fa0:	f7fd faa0 	bl	80414e4 <BSP_AUDIO_IN_Stop>
 8043fa4:	b108      	cbz	r0, 8043faa <AudioRecord_Test+0xba>
  {
    /* Record Error */
    Error_Handler();
 8043fa6:	f000 f959 	bl	804425c <Error_Handler>
  }

  /* Turn OFF LED3: record stopped */
  BSP_LED_Off(LED3);
 8043faa:	2001      	movs	r0, #1
 8043fac:	f7fc ff48 	bl	8040e40 <BSP_LED_Off>
  /* Turn ON LED6: play recorded file */
  BSP_LED_On(LED6);
 8043fb0:	2003      	movs	r0, #3
 8043fb2:	f7fc ff37 	bl	8040e24 <BSP_LED_On>
  
  /* Play in the loop the recorded file */

  /* Set variable to indicate play from record buffer */ 
  AudioTest = 1;
 8043fb6:	4b32      	ldr	r3, [pc, #200]	; (8044080 <AudioRecord_Test+0x190>)
  
  /*Set variable used to stop player before starting */
  UserPressButton = 0;
 8043fb8:	4c32      	ldr	r4, [pc, #200]	; (8044084 <AudioRecord_Test+0x194>)
  AudioTest = 1;
 8043fba:	2201      	movs	r2, #1
 8043fbc:	601a      	str	r2, [r3, #0]
  UserPressButton = 0;
 8043fbe:	2500      	movs	r5, #0

  /* Initialize audio IN at REC_FREQ */ 
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, DEFAULT_AUDIO_IN_FREQ);  
 8043fc0:	2146      	movs	r1, #70	; 0x46
 8043fc2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8043fc6:	2004      	movs	r0, #4
  UserPressButton = 0;
 8043fc8:	7025      	strb	r5, [r4, #0]
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, DEFAULT_AUDIO_IN_FREQ);  
 8043fca:	f7fd fa33 	bl	8041434 <BSP_AUDIO_OUT_Init>
  
  /* Set the total number of data to be played */
  AudioTotalSize = AUDIODATA_SIZE * WR_BUFFER_SIZE;  
 8043fce:	4b2e      	ldr	r3, [pc, #184]	; (8044088 <AudioRecord_Test+0x198>)
  /* Update the remaining number of data to be played */
  AudioRemSize = 0;  
  /* Update the WrBuffer audio pointer position */
  CurrentPos = (uint16_t *)(WrBuffer);
 8043fd0:	482a      	ldr	r0, [pc, #168]	; (804407c <AudioRecord_Test+0x18c>)
  AudioTotalSize = AUDIODATA_SIZE * WR_BUFFER_SIZE;  
 8043fd2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8043fd6:	6019      	str	r1, [r3, #0]
  AudioRemSize = 0;  
 8043fd8:	4b2c      	ldr	r3, [pc, #176]	; (804408c <AudioRecord_Test+0x19c>)
 8043fda:	601d      	str	r5, [r3, #0]
  CurrentPos = (uint16_t *)(WrBuffer);
 8043fdc:	4b2c      	ldr	r3, [pc, #176]	; (8044090 <AudioRecord_Test+0x1a0>)
 8043fde:	6018      	str	r0, [r3, #0]
  
  /* Play the recorded buffer */
  BSP_AUDIO_OUT_Play(WrBuffer , AudioTotalSize);
 8043fe0:	f7fd f908 	bl	80411f4 <BSP_AUDIO_OUT_Play>
  
  while(!UserPressButton)
 8043fe4:	7823      	ldrb	r3, [r4, #0]
 8043fe6:	2b00      	cmp	r3, #0
 8043fe8:	d0fc      	beq.n	8043fe4 <AudioRecord_Test+0xf4>
  { 
  }
  
  /* Stop Player before close Test */
  if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW) != AUDIO_OK)
 8043fea:	2002      	movs	r0, #2
 8043fec:	f7fd f94a 	bl	8041284 <BSP_AUDIO_OUT_Stop>
 8043ff0:	2800      	cmp	r0, #0
 8043ff2:	d03c      	beq.n	804406e <AudioRecord_Test+0x17e>
  {
    /* Audio Stop error */
    Error_Handler();
  }
}
 8043ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8043ff8:	f000 b930 	b.w	804425c <Error_Handler>
    if(BufferCtl.offset == BUFFER_OFFSET_FULL)
 8043ffc:	2b02      	cmp	r3, #2
 8043ffe:	d1cb      	bne.n	8043f98 <AudioRecord_Test+0xa8>
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 8044000:	4639      	mov	r1, r7
 8044002:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8044006:	f7fd fa75 	bl	80414f4 <BSP_AUDIO_IN_PDMToPCM>
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 804400a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 804400e:	4a1a      	ldr	r2, [pc, #104]	; (8044078 <AudioRecord_Test+0x188>)
 8044010:	eb06 1383 	add.w	r3, r6, r3, lsl #6
 8044014:	f504 71a6 	add.w	r1, r4, #332	; 0x14c
 8044018:	f852 0b04 	ldr.w	r0, [r2], #4
 804401c:	f843 0b04 	str.w	r0, [r3], #4
 8044020:	428a      	cmp	r2, r1
 8044022:	d1f9      	bne.n	8044018 <AudioRecord_Test+0x128>
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8044024:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 8044028:	f240 12bf 	movw	r2, #447	; 0x1bf
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 804402c:	2300      	movs	r3, #0
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 804402e:	4291      	cmp	r1, r2
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8044030:	6023      	str	r3, [r4, #0]
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8044032:	d10a      	bne.n	804404a <AudioRecord_Test+0x15a>
        AUDIODataReady = 1;
 8044034:	2201      	movs	r2, #1
 8044036:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
        AUDIOBuffOffset = 0;
 804403a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        ITCounter++;
 804403e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8044042:	4413      	add	r3, r2
        ITCounter++;
 8044044:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
 8044048:	e76f      	b.n	8043f2a <AudioRecord_Test+0x3a>
      else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 804404a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 804404e:	f240 327f 	movw	r2, #895	; 0x37f
 8044052:	4291      	cmp	r1, r2
        AUDIODataReady = 2;
 8044054:	bf09      	itett	eq
 8044056:	2202      	moveq	r2, #2
        ITCounter++;
 8044058:	f8d4 314c 	ldrne.w	r3, [r4, #332]	; 0x14c
        AUDIODataReady = 2;
 804405c:	f8c4 2108 	streq.w	r2, [r4, #264]	; 0x108
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8044060:	f44f 5260 	moveq.w	r2, #14336	; 0x3800
 8044064:	bf0c      	ite	eq
 8044066:	f8c4 2150 	streq.w	r2, [r4, #336]	; 0x150
        ITCounter++;
 804406a:	3301      	addne	r3, #1
 804406c:	e7ea      	b.n	8044044 <AudioRecord_Test+0x154>
}
 804406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8044070:	200008c4 	.word	0x200008c4
 8044074:	200008cc 	.word	0x200008cc
 8044078:	200009d0 	.word	0x200009d0
 804407c:	20000a18 	.word	0x20000a18
 8044080:	200008bc 	.word	0x200008bc
 8044084:	2000ea44 	.word	0x2000ea44
 8044088:	200000c4 	.word	0x200000c4
 804408c:	200000c8 	.word	0x200000c8
 8044090:	200008c0 	.word	0x200008c0

08044094 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  BufferCtl.offset = BUFFER_OFFSET_FULL;
 8044094:	4b01      	ldr	r3, [pc, #4]	; (804409c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8044096:	2202      	movs	r2, #2
 8044098:	601a      	str	r2, [r3, #0]
}
 804409a:	4770      	bx	lr
 804409c:	200008c4 	.word	0x200008c4

080440a0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  BufferCtl.offset = BUFFER_OFFSET_HALF;
 80440a0:	4b01      	ldr	r3, [pc, #4]	; (80440a8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 80440a2:	2201      	movs	r2, #1
 80440a4:	601a      	str	r2, [r3, #0]
}
 80440a6:	4770      	bx	lr
 80440a8:	200008c4 	.word	0x200008c4

080440ac <BSP_AUDIO_IN_Error_Callback>:
  * @retval None
  */
void BSP_AUDIO_IN_Error_Callback(void)
{
  /* Stop the program with an infinite loop */
  Error_Handler();
 80440ac:	f000 b8d6 	b.w	804425c <Error_Handler>

080440b0 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (KEY_BUTTON_PIN == GPIO_Pin)
 80440b0:	2801      	cmp	r0, #1
{
 80440b2:	b508      	push	{r3, lr}
  if (KEY_BUTTON_PIN == GPIO_Pin)
 80440b4:	d108      	bne.n	80440c8 <HAL_GPIO_EXTI_Callback+0x18>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 80440b6:	2000      	movs	r0, #0
 80440b8:	f7fc ff1a 	bl	8040ef0 <BSP_PB_GetState>
 80440bc:	2800      	cmp	r0, #0
 80440be:	d1fa      	bne.n	80440b6 <HAL_GPIO_EXTI_Callback+0x6>
    UserPressButton = 1;
 80440c0:	4b0a      	ldr	r3, [pc, #40]	; (80440ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80440c2:	2201      	movs	r2, #1
 80440c4:	701a      	strb	r2, [r3, #0]
      /* Pause playing Wave status */
      PauseResumeStatus = PAUSE_STATUS;
      PressCount = 1;
    }
  }
}
 80440c6:	bd08      	pop	{r3, pc}
  if(ACCELERO_INT2_PIN == GPIO_Pin) 
 80440c8:	2802      	cmp	r0, #2
 80440ca:	d1fc      	bne.n	80440c6 <HAL_GPIO_EXTI_Callback+0x16>
    BSP_ACCELERO_Click_ITClear();
 80440cc:	f7fd f856 	bl	804117c <BSP_ACCELERO_Click_ITClear>
    if (PressCount == 1)
 80440d0:	4b06      	ldr	r3, [pc, #24]	; (80440ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80440d2:	4a07      	ldr	r2, [pc, #28]	; (80440f0 <HAL_GPIO_EXTI_Callback+0x40>)
 80440d4:	6858      	ldr	r0, [r3, #4]
 80440d6:	2100      	movs	r1, #0
 80440d8:	2801      	cmp	r0, #1
      PauseResumeStatus = PAUSE_STATUS;
 80440da:	bf1b      	ittet	ne
 80440dc:	6011      	strne	r1, [r2, #0]
      PressCount = 1;
 80440de:	2201      	movne	r2, #1
      PauseResumeStatus = RESUME_STATUS;
 80440e0:	6010      	streq	r0, [r2, #0]
      PressCount = 1;
 80440e2:	605a      	strne	r2, [r3, #4]
      PressCount = 0;
 80440e4:	bf08      	it	eq
 80440e6:	6059      	streq	r1, [r3, #4]
}
 80440e8:	e7ed      	b.n	80440c6 <HAL_GPIO_EXTI_Callback+0x16>
 80440ea:	bf00      	nop
 80440ec:	2000ea44 	.word	0x2000ea44
 80440f0:	200000cc 	.word	0x200000cc

080440f4 <Toggle_Leds>:
  * @brief  Toggle LEDs
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 80440f4:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED3);
 80440f6:	2001      	movs	r0, #1
 80440f8:	f7fc feb0 	bl	8040e5c <BSP_LED_Toggle>
  HAL_Delay(100);
 80440fc:	2064      	movs	r0, #100	; 0x64
 80440fe:	f7fd fbbb 	bl	8041878 <HAL_Delay>
  BSP_LED_Toggle(LED4);
 8044102:	2000      	movs	r0, #0
 8044104:	f7fc feaa 	bl	8040e5c <BSP_LED_Toggle>
  HAL_Delay(100);
 8044108:	2064      	movs	r0, #100	; 0x64
 804410a:	f7fd fbb5 	bl	8041878 <HAL_Delay>
  BSP_LED_Toggle(LED5);
 804410e:	2002      	movs	r0, #2
 8044110:	f7fc fea4 	bl	8040e5c <BSP_LED_Toggle>
  HAL_Delay(100);
 8044114:	2064      	movs	r0, #100	; 0x64
 8044116:	f7fd fbaf 	bl	8041878 <HAL_Delay>
  BSP_LED_Toggle(LED6);
 804411a:	2003      	movs	r0, #3
 804411c:	f7fc fe9e 	bl	8040e5c <BSP_LED_Toggle>
  HAL_Delay(100);
}
 8044120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(100);
 8044124:	2064      	movs	r0, #100	; 0x64
 8044126:	f7fd bba7 	b.w	8041878 <HAL_Delay>
	...

0804412c <main>:
{ 
 804412c:	b500      	push	{lr}
 804412e:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8044130:	f7fd fb7a 	bl	8041828 <HAL_Init>
  BSP_LED_Init(LED3);
 8044134:	2001      	movs	r0, #1
 8044136:	f7fc fe1d 	bl	8040d74 <BSP_LED_Init>
  BSP_LED_Init(LED4); 
 804413a:	2000      	movs	r0, #0
 804413c:	f7fc fe1a 	bl	8040d74 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8044140:	2002      	movs	r0, #2
 8044142:	f7fc fe17 	bl	8040d74 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8044146:	2003      	movs	r0, #3
 8044148:	f7fc fe14 	bl	8040d74 <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 804414c:	2400      	movs	r4, #0
 804414e:	4b3e      	ldr	r3, [pc, #248]	; (8044248 <main+0x11c>)
 8044150:	9401      	str	r4, [sp, #4]
 8044152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8044154:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8044158:	641a      	str	r2, [r3, #64]	; 0x40
 804415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044160:	9301      	str	r3, [sp, #4]
 8044162:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8044164:	4b39      	ldr	r3, [pc, #228]	; (804424c <main+0x120>)
 8044166:	9402      	str	r4, [sp, #8]
 8044168:	681a      	ldr	r2, [r3, #0]
 804416a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804416e:	601a      	str	r2, [r3, #0]
 8044170:	681b      	ldr	r3, [r3, #0]
 8044172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8044176:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8044178:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804417a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804417c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8044180:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8044184:	2502      	movs	r5, #2
 8044186:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 336;
 804418a:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 804418c:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8044190:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8044194:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8044198:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 804419a:	2307      	movs	r3, #7
 804419c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 804419e:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80441a0:	f7ff f808 	bl	80431b4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80441a4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80441a6:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80441aa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80441ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80441b2:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80441b6:	2105      	movs	r1, #5
 80441b8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80441ba:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80441bc:	f7ff f9d8 	bl	8043570 <HAL_RCC_ClockConfig>
  if (HAL_GetREVID() == 0x1001)
 80441c0:	f7fd fb6e 	bl	80418a0 <HAL_GetREVID>
 80441c4:	f241 0301 	movw	r3, #4097	; 0x1001
 80441c8:	4298      	cmp	r0, r3
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80441ca:	bf08      	it	eq
 80441cc:	4a20      	ldreq	r2, [pc, #128]	; (8044250 <main+0x124>)
  while (!UserPressButton)
 80441ce:	4c21      	ldr	r4, [pc, #132]	; (8044254 <main+0x128>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80441d0:	bf02      	ittt	eq
 80441d2:	6813      	ldreq	r3, [r2, #0]
 80441d4:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 80441d8:	6013      	streq	r3, [r2, #0]
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80441da:	2101      	movs	r1, #1
 80441dc:	2000      	movs	r0, #0
 80441de:	f7fc fe4b 	bl	8040e78 <BSP_PB_Init>
  while (!UserPressButton)
 80441e2:	7823      	ldrb	r3, [r4, #0]
 80441e4:	b353      	cbz	r3, 804423c <main+0x110>
  BSP_LED_Off(LED3);
 80441e6:	2001      	movs	r0, #1
 80441e8:	f7fc fe2a 	bl	8040e40 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 80441ec:	2000      	movs	r0, #0
 80441ee:	f7fc fe27 	bl	8040e40 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 80441f2:	2002      	movs	r0, #2
 80441f4:	f7fc fe24 	bl	8040e40 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 80441f8:	2003      	movs	r0, #3
 80441fa:	f7fc fe21 	bl	8040e40 <BSP_LED_Off>
    BSP_examples[DemoIndex++].DemoFunc();
 80441fe:	4e16      	ldr	r6, [pc, #88]	; (8044258 <main+0x12c>)
    UserPressButton = 0;
 8044200:	2500      	movs	r5, #0
    BSP_examples[DemoIndex++].DemoFunc();
 8044202:	7a23      	ldrb	r3, [r4, #8]
    UserPressButton = 0;
 8044204:	7025      	strb	r5, [r4, #0]
    BSP_examples[DemoIndex++].DemoFunc();
 8044206:	1c5a      	adds	r2, r3, #1
 8044208:	7222      	strb	r2, [r4, #8]
 804420a:	223c      	movs	r2, #60	; 0x3c
 804420c:	fb02 6303 	mla	r3, r2, r3, r6
 8044210:	685b      	ldr	r3, [r3, #4]
 8044212:	4798      	blx	r3
    if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8044214:	7a23      	ldrb	r3, [r4, #8]
    UserPressButton = 0;
 8044216:	7025      	strb	r5, [r4, #0]
    if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8044218:	2b02      	cmp	r3, #2
      DemoIndex = 0;
 804421a:	bf88      	it	hi
 804421c:	7225      	strbhi	r5, [r4, #8]
    while (!UserPressButton) Toggle_Leds();
 804421e:	7823      	ldrb	r3, [r4, #0]
 8044220:	b17b      	cbz	r3, 8044242 <main+0x116>
    BSP_LED_Off(LED3);
 8044222:	2001      	movs	r0, #1
 8044224:	f7fc fe0c 	bl	8040e40 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8044228:	2000      	movs	r0, #0
 804422a:	f7fc fe09 	bl	8040e40 <BSP_LED_Off>
    BSP_LED_Off(LED5);
 804422e:	2002      	movs	r0, #2
 8044230:	f7fc fe06 	bl	8040e40 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8044234:	2003      	movs	r0, #3
 8044236:	f7fc fe03 	bl	8040e40 <BSP_LED_Off>
    UserPressButton = 0;
 804423a:	e7e2      	b.n	8044202 <main+0xd6>
    Toggle_Leds();
 804423c:	f7ff ff5a 	bl	80440f4 <Toggle_Leds>
 8044240:	e7cf      	b.n	80441e2 <main+0xb6>
    while (!UserPressButton) Toggle_Leds();
 8044242:	f7ff ff57 	bl	80440f4 <Toggle_Leds>
 8044246:	e7ea      	b.n	804421e <main+0xf2>
 8044248:	40023800 	.word	0x40023800
 804424c:	40007000 	.word	0x40007000
 8044250:	40023c00 	.word	0x40023c00
 8044254:	2000ea44 	.word	0x2000ea44
 8044258:	200000cc 	.word	0x200000cc

0804425c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 804425c:	b508      	push	{r3, lr}
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 804425e:	2002      	movs	r0, #2
 8044260:	f7fc fde0 	bl	8040e24 <BSP_LED_On>
  while(1)
 8044264:	e7fe      	b.n	8044264 <Error_Handler+0x8>
	...

08044268 <ACCELERO_MEMS_Test>:
  *         The main objective of this test is to check acceleration on 2 axes X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
{
 8044268:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Init Accelerometer MEMS */
  if(BSP_ACCELERO_Init() != HAL_OK)
 804426a:	f7fc ff53 	bl	8041114 <BSP_ACCELERO_Init>
 804426e:	b108      	cbz	r0, 8044274 <ACCELERO_MEMS_Test+0xc>
  {
    /* Initialization Error */
    Error_Handler(); 
 8044270:	f7ff fff4 	bl	804425c <Error_Handler>
  }
  
  UserPressButton = 0;
 8044274:	4e24      	ldr	r6, [pc, #144]	; (8044308 <ACCELERO_MEMS_Test+0xa0>)
 8044276:	4c25      	ldr	r4, [pc, #148]	; (804430c <ACCELERO_MEMS_Test+0xa4>)
 8044278:	2300      	movs	r3, #0
 804427a:	7033      	strb	r3, [r6, #0]
  while(!UserPressButton)
 804427c:	7833      	ldrb	r3, [r6, #0]
 804427e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8044282:	b10b      	cbz	r3, 8044288 <ACCELERO_MEMS_Test+0x20>
  {
    ACCELERO_ReadAcc();
  }
}
 8044284:	b002      	add	sp, #8
 8044286:	bd70      	pop	{r4, r5, r6, pc}
  /* Accelerometer variables */
  int16_t buffer[3] = {0};
  int16_t xval, yval = 0x00;
  
  /* Read Acceleration */
  BSP_ACCELERO_GetXYZ(buffer);
 8044288:	4668      	mov	r0, sp
  int16_t buffer[3] = {0};
 804428a:	9500      	str	r5, [sp, #0]
 804428c:	f8ad 5004 	strh.w	r5, [sp, #4]
  BSP_ACCELERO_GetXYZ(buffer);
 8044290:	f7fc ff7c 	bl	804118c <BSP_ACCELERO_GetXYZ>
  
  xval = buffer[0];
 8044294:	f9bd 2000 	ldrsh.w	r2, [sp]
  yval = buffer[1];
 8044298:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  
  if((ABS(xval))>(ABS(yval)))
 804429c:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 80442a0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80442a4:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 80442a8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80442ac:	b280      	uxth	r0, r0
 80442ae:	b289      	uxth	r1, r1
 80442b0:	4288      	cmp	r0, r1
 80442b2:	d91c      	bls.n	80442ee <ACCELERO_MEMS_Test+0x86>
  {
    if(xval > ThresholdHigh)
 80442b4:	f9b4 3000 	ldrsh.w	r3, [r4]
 80442b8:	4293      	cmp	r3, r2
 80442ba:	da12      	bge.n	80442e2 <ACCELERO_MEMS_Test+0x7a>
    { 
      /* LED5 On */
      BSP_LED_On(LED5);
 80442bc:	2002      	movs	r0, #2
      HAL_Delay(10);
    }
    else if(yval > ThresholdHigh)
    {
      /* LED3 On */
      BSP_LED_On(LED3);
 80442be:	f7fc fdb1 	bl	8040e24 <BSP_LED_On>
      HAL_Delay(10);
 80442c2:	200a      	movs	r0, #10
 80442c4:	f7fd fad8 	bl	8041878 <HAL_Delay>
    { 
      HAL_Delay(10);
    }
  } 
  
  BSP_LED_Off(LED3);
 80442c8:	2001      	movs	r0, #1
 80442ca:	f7fc fdb9 	bl	8040e40 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 80442ce:	2000      	movs	r0, #0
 80442d0:	f7fc fdb6 	bl	8040e40 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 80442d4:	2002      	movs	r0, #2
 80442d6:	f7fc fdb3 	bl	8040e40 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 80442da:	2003      	movs	r0, #3
 80442dc:	f7fc fdb0 	bl	8040e40 <BSP_LED_Off>
}
 80442e0:	e7cc      	b.n	804427c <ACCELERO_MEMS_Test+0x14>
    else if(xval < ThresholdLow)
 80442e2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80442e6:	4293      	cmp	r3, r2
 80442e8:	ddeb      	ble.n	80442c2 <ACCELERO_MEMS_Test+0x5a>
      BSP_LED_On(LED4);      
 80442ea:	4628      	mov	r0, r5
 80442ec:	e7e7      	b.n	80442be <ACCELERO_MEMS_Test+0x56>
    if(yval < ThresholdLow)
 80442ee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80442f2:	429a      	cmp	r2, r3
 80442f4:	dd01      	ble.n	80442fa <ACCELERO_MEMS_Test+0x92>
      BSP_LED_On(LED6);
 80442f6:	2003      	movs	r0, #3
 80442f8:	e7e1      	b.n	80442be <ACCELERO_MEMS_Test+0x56>
    else if(yval > ThresholdHigh)
 80442fa:	f9b4 2000 	ldrsh.w	r2, [r4]
 80442fe:	429a      	cmp	r2, r3
 8044300:	dadf      	bge.n	80442c2 <ACCELERO_MEMS_Test+0x5a>
      BSP_LED_On(LED3);
 8044302:	2001      	movs	r0, #1
 8044304:	e7db      	b.n	80442be <ACCELERO_MEMS_Test+0x56>
 8044306:	bf00      	nop
 8044308:	2000ea44 	.word	0x2000ea44
 804430c:	20000184 	.word	0x20000184

08044310 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8044310:	4770      	bx	lr

08044312 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8044312:	e7fe      	b.n	8044312 <HardFault_Handler>

08044314 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8044314:	e7fe      	b.n	8044314 <MemManage_Handler>

08044316 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8044316:	e7fe      	b.n	8044316 <BusFault_Handler>

08044318 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8044318:	e7fe      	b.n	8044318 <UsageFault_Handler>

0804431a <SVC_Handler>:
 804431a:	4770      	bx	lr

0804431c <DebugMon_Handler>:
 804431c:	4770      	bx	lr

0804431e <PendSV_Handler>:
 804431e:	4770      	bx	lr

08044320 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8044320:	f7fd ba98 	b.w	8041854 <HAL_IncTick>

08044324 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8044324:	2001      	movs	r0, #1
 8044326:	f7fd be11 	b.w	8041f4c <HAL_GPIO_EXTI_IRQHandler>

0804432a <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT2_PIN);
 804432a:	2002      	movs	r0, #2
 804432c:	f7fd be0e 	b.w	8041f4c <HAL_GPIO_EXTI_IRQHandler>

08044330 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8044330:	4b01      	ldr	r3, [pc, #4]	; (8044338 <DMA1_Stream7_IRQHandler+0x8>)
 8044332:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8044334:	f7fd bc5e 	b.w	8041bf4 <HAL_DMA_IRQHandler>
 8044338:	200006bc 	.word	0x200006bc

0804433c <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 804433c:	4b01      	ldr	r3, [pc, #4]	; (8044344 <DMA1_Stream3_IRQHandler+0x8>)
 804433e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8044340:	f7fd bc58 	b.w	8041bf4 <HAL_DMA_IRQHandler>
 8044344:	20000768 	.word	0x20000768

08044348 <D16_GENERIC>:
 8044348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804434c:	b089      	sub	sp, #36	; 0x24
 804434e:	68d4      	ldr	r4, [r2, #12]
 8044350:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8044352:	6993      	ldr	r3, [r2, #24]
 8044354:	9407      	str	r4, [sp, #28]
 8044356:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8044358:	9306      	str	r3, [sp, #24]
 804435a:	9402      	str	r4, [sp, #8]
 804435c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8044360:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8044364:	69d3      	ldr	r3, [r2, #28]
 8044366:	6896      	ldr	r6, [r2, #8]
 8044368:	6b54      	ldr	r4, [r2, #52]	; 0x34
 804436a:	9103      	str	r1, [sp, #12]
 804436c:	2d00      	cmp	r5, #0
 804436e:	d066      	beq.n	804443e <D16_GENERIC+0xf6>
 8044370:	f004 0510 	and.w	r5, r4, #16
 8044374:	f004 0420 	and.w	r4, r4, #32
 8044378:	9504      	str	r5, [sp, #16]
 804437a:	4938      	ldr	r1, [pc, #224]	; (804445c <D16_GENERIC+0x114>)
 804437c:	9405      	str	r4, [sp, #20]
 804437e:	f04f 0e00 	mov.w	lr, #0
 8044382:	4635      	mov	r5, r6
 8044384:	e04f      	b.n	8044426 <D16_GENERIC+0xde>
 8044386:	5d87      	ldrb	r7, [r0, r6]
 8044388:	7804      	ldrb	r4, [r0, #0]
 804438a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 804438e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8044392:	b2e6      	uxtb	r6, r4
 8044394:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8044398:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 804439c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80443a0:	4433      	add	r3, r6
 80443a2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80443a6:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80443aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80443ae:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80443b2:	0aa3      	lsrs	r3, r4, #10
 80443b4:	4c2a      	ldr	r4, [pc, #168]	; (8044460 <D16_GENERIC+0x118>)
 80443b6:	fb26 5404 	smlad	r4, r6, r4, r5
 80443ba:	4d2a      	ldr	r5, [pc, #168]	; (8044464 <D16_GENERIC+0x11c>)
 80443bc:	fb26 f505 	smuad	r5, r6, r5
 80443c0:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80443c4:	eb04 080a 	add.w	r8, r4, sl
 80443c8:	eba8 080b 	sub.w	r8, r8, fp
 80443cc:	4646      	mov	r6, r8
 80443ce:	17f7      	asrs	r7, r6, #31
 80443d0:	e9cd 6700 	strd	r6, r7, [sp]
 80443d4:	9e04      	ldr	r6, [sp, #16]
 80443d6:	f10e 0c01 	add.w	ip, lr, #1
 80443da:	b16e      	cbz	r6, 80443f8 <D16_GENERIC+0xb0>
 80443dc:	6a16      	ldr	r6, [r2, #32]
 80443de:	9f01      	ldr	r7, [sp, #4]
 80443e0:	fba8 8906 	umull	r8, r9, r8, r6
 80443e4:	fb06 9907 	mla	r9, r6, r7, r9
 80443e8:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80443ec:	f149 0900 	adc.w	r9, r9, #0
 80443f0:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80443f4:	46a3      	mov	fp, r4
 80443f6:	4654      	mov	r4, sl
 80443f8:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80443fa:	9f02      	ldr	r7, [sp, #8]
 80443fc:	0424      	lsls	r4, r4, #16
 80443fe:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8044402:	f04f 0900 	mov.w	r9, #0
 8044406:	fb0e fe06 	mul.w	lr, lr, r6
 804440a:	fbc7 8904 	smlal	r8, r9, r7, r4
 804440e:	9e03      	ldr	r6, [sp, #12]
 8044410:	464f      	mov	r7, r9
 8044412:	10bc      	asrs	r4, r7, #2
 8044414:	f304 040f 	ssat	r4, #16, r4
 8044418:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 804441c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 804441e:	fa1f fe8c 	uxth.w	lr, ip
 8044422:	4574      	cmp	r4, lr
 8044424:	d90a      	bls.n	804443c <D16_GENERIC+0xf4>
 8044426:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8044428:	2c01      	cmp	r4, #1
 804442a:	b2e6      	uxtb	r6, r4
 804442c:	d1ab      	bne.n	8044386 <D16_GENERIC+0x3e>
 804442e:	9e05      	ldr	r6, [sp, #20]
 8044430:	f850 4b02 	ldr.w	r4, [r0], #2
 8044434:	2e00      	cmp	r6, #0
 8044436:	d0ac      	beq.n	8044392 <D16_GENERIC+0x4a>
 8044438:	ba64      	rev16	r4, r4
 804443a:	e7aa      	b.n	8044392 <D16_GENERIC+0x4a>
 804443c:	462e      	mov	r6, r5
 804443e:	9907      	ldr	r1, [sp, #28]
 8044440:	61d3      	str	r3, [r2, #28]
 8044442:	9b06      	ldr	r3, [sp, #24]
 8044444:	6096      	str	r6, [r2, #8]
 8044446:	2000      	movs	r0, #0
 8044448:	60d1      	str	r1, [r2, #12]
 804444a:	f8c2 a010 	str.w	sl, [r2, #16]
 804444e:	f8c2 b014 	str.w	fp, [r2, #20]
 8044452:	6193      	str	r3, [r2, #24]
 8044454:	b009      	add	sp, #36	; 0x24
 8044456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804445a:	bf00      	nop
 804445c:	20000188 	.word	0x20000188
 8044460:	00030001 	.word	0x00030001
 8044464:	00010003 	.word	0x00010003

08044468 <D24_GENERIC>:
 8044468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804446c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 804446e:	6993      	ldr	r3, [r2, #24]
 8044470:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8044472:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8044476:	f8d2 9014 	ldr.w	r9, [r2, #20]
 804447a:	6894      	ldr	r4, [r2, #8]
 804447c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8044480:	b089      	sub	sp, #36	; 0x24
 8044482:	9307      	str	r3, [sp, #28]
 8044484:	9503      	str	r5, [sp, #12]
 8044486:	69d3      	ldr	r3, [r2, #28]
 8044488:	6b55      	ldr	r5, [r2, #52]	; 0x34
 804448a:	9104      	str	r1, [sp, #16]
 804448c:	2e00      	cmp	r6, #0
 804448e:	f000 8096 	beq.w	80445be <D24_GENERIC+0x156>
 8044492:	f005 0610 	and.w	r6, r5, #16
 8044496:	f005 0520 	and.w	r5, r5, #32
 804449a:	4954      	ldr	r1, [pc, #336]	; (80445ec <D24_GENERIC+0x184>)
 804449c:	9605      	str	r6, [sp, #20]
 804449e:	9506      	str	r5, [sp, #24]
 80444a0:	f04f 0e00 	mov.w	lr, #0
 80444a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80444a8:	e06a      	b.n	8044580 <D24_GENERIC+0x118>
 80444aa:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80444ae:	f810 8007 	ldrb.w	r8, [r0, r7]
 80444b2:	f890 c000 	ldrb.w	ip, [r0]
 80444b6:	042d      	lsls	r5, r5, #16
 80444b8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80444bc:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80444c0:	44ac      	add	ip, r5
 80444c2:	4438      	add	r0, r7
 80444c4:	fa5f f68c 	uxtb.w	r6, ip
 80444c8:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80444cc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80444d0:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80444d4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80444d8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80444dc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80444e0:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80444e4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80444e8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80444ec:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80444f0:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80444f4:	4d3e      	ldr	r5, [pc, #248]	; (80445f0 <D24_GENERIC+0x188>)
 80444f6:	fb26 b705 	smlad	r7, r6, r5, fp
 80444fa:	4d3e      	ldr	r5, [pc, #248]	; (80445f4 <D24_GENERIC+0x18c>)
 80444fc:	fb26 4b05 	smlad	fp, r6, r5, r4
 8044500:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8044504:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8044508:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 804450c:	2401      	movs	r4, #1
 804450e:	fb26 f604 	smuad	r6, r6, r4
 8044512:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8044516:	9f02      	ldr	r7, [sp, #8]
 8044518:	eb0e 0c04 	add.w	ip, lr, r4
 804451c:	eb08 0406 	add.w	r4, r8, r6
 8044520:	eb05 060a 	add.w	r6, r5, sl
 8044524:	1bf6      	subs	r6, r6, r7
 8044526:	4637      	mov	r7, r6
 8044528:	ea4f 78e6 	mov.w	r8, r6, asr #31
 804452c:	e9cd 7800 	strd	r7, r8, [sp]
 8044530:	9f05      	ldr	r7, [sp, #20]
 8044532:	b177      	cbz	r7, 8044552 <D24_GENERIC+0xea>
 8044534:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8044538:	9502      	str	r5, [sp, #8]
 804453a:	fba6 9a08 	umull	r9, sl, r6, r8
 804453e:	9e01      	ldr	r6, [sp, #4]
 8044540:	fb08 aa06 	mla	sl, r8, r6, sl
 8044544:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8044548:	f14a 0700 	adc.w	r7, sl, #0
 804454c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8044550:	4655      	mov	r5, sl
 8044552:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8044554:	9f03      	ldr	r7, [sp, #12]
 8044556:	03ad      	lsls	r5, r5, #14
 8044558:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 804455c:	f04f 0900 	mov.w	r9, #0
 8044560:	fb0e fe06 	mul.w	lr, lr, r6
 8044564:	fbc7 8905 	smlal	r8, r9, r7, r5
 8044568:	9e04      	ldr	r6, [sp, #16]
 804456a:	464f      	mov	r7, r9
 804456c:	10bd      	asrs	r5, r7, #2
 804456e:	f305 050f 	ssat	r5, #16, r5
 8044572:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8044576:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8044578:	fa1f fe8c 	uxth.w	lr, ip
 804457c:	4575      	cmp	r5, lr
 804457e:	d91c      	bls.n	80445ba <D24_GENERIC+0x152>
 8044580:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8044582:	b2ef      	uxtb	r7, r5
 8044584:	2d01      	cmp	r5, #1
 8044586:	b23e      	sxth	r6, r7
 8044588:	d18f      	bne.n	80444aa <D24_GENERIC+0x42>
 804458a:	9d06      	ldr	r5, [sp, #24]
 804458c:	b15d      	cbz	r5, 80445a6 <D24_GENERIC+0x13e>
 804458e:	f01e 0f01 	tst.w	lr, #1
 8044592:	d122      	bne.n	80445da <D24_GENERIC+0x172>
 8044594:	7805      	ldrb	r5, [r0, #0]
 8044596:	78c7      	ldrb	r7, [r0, #3]
 8044598:	7846      	ldrb	r6, [r0, #1]
 804459a:	022d      	lsls	r5, r5, #8
 804459c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80445a0:	44b4      	add	ip, r6
 80445a2:	3002      	adds	r0, #2
 80445a4:	e78e      	b.n	80444c4 <D24_GENERIC+0x5c>
 80445a6:	7846      	ldrb	r6, [r0, #1]
 80445a8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80445ac:	f810 5b03 	ldrb.w	r5, [r0], #3
 80445b0:	0236      	lsls	r6, r6, #8
 80445b2:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80445b6:	44ac      	add	ip, r5
 80445b8:	e784      	b.n	80444c4 <D24_GENERIC+0x5c>
 80445ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80445be:	61d3      	str	r3, [r2, #28]
 80445c0:	9b07      	ldr	r3, [sp, #28]
 80445c2:	6094      	str	r4, [r2, #8]
 80445c4:	2000      	movs	r0, #0
 80445c6:	f8c2 b00c 	str.w	fp, [r2, #12]
 80445ca:	f8c2 a010 	str.w	sl, [r2, #16]
 80445ce:	f8c2 9014 	str.w	r9, [r2, #20]
 80445d2:	6193      	str	r3, [r2, #24]
 80445d4:	b009      	add	sp, #36	; 0x24
 80445d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80445da:	78c5      	ldrb	r5, [r0, #3]
 80445dc:	7887      	ldrb	r7, [r0, #2]
 80445de:	f810 6b04 	ldrb.w	r6, [r0], #4
 80445e2:	022d      	lsls	r5, r5, #8
 80445e4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80445e8:	44b4      	add	ip, r6
 80445ea:	e76b      	b.n	80444c4 <D24_GENERIC+0x5c>
 80445ec:	20000188 	.word	0x20000188
 80445f0:	00030001 	.word	0x00030001
 80445f4:	00060007 	.word	0x00060007

080445f8 <D32_GENERIC>:
 80445f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80445fc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80445fe:	6993      	ldr	r3, [r2, #24]
 8044600:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8044602:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8044606:	f8d2 9014 	ldr.w	r9, [r2, #20]
 804460a:	69d6      	ldr	r6, [r2, #28]
 804460c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8044610:	b089      	sub	sp, #36	; 0x24
 8044612:	9307      	str	r3, [sp, #28]
 8044614:	9403      	str	r4, [sp, #12]
 8044616:	6893      	ldr	r3, [r2, #8]
 8044618:	6b54      	ldr	r4, [r2, #52]	; 0x34
 804461a:	9104      	str	r1, [sp, #16]
 804461c:	2d00      	cmp	r5, #0
 804461e:	f000 809f 	beq.w	8044760 <D32_GENERIC+0x168>
 8044622:	f004 0510 	and.w	r5, r4, #16
 8044626:	f004 0420 	and.w	r4, r4, #32
 804462a:	9505      	str	r5, [sp, #20]
 804462c:	4953      	ldr	r1, [pc, #332]	; (804477c <D32_GENERIC+0x184>)
 804462e:	9406      	str	r4, [sp, #24]
 8044630:	f04f 0c00 	mov.w	ip, #0
 8044634:	f8cd 9008 	str.w	r9, [sp, #8]
 8044638:	461d      	mov	r5, r3
 804463a:	4617      	mov	r7, r2
 804463c:	e077      	b.n	804472e <D32_GENERIC+0x136>
 804463e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8044642:	f810 800e 	ldrb.w	r8, [r0, lr]
 8044646:	f810 e002 	ldrb.w	lr, [r0, r2]
 804464a:	7800      	ldrb	r0, [r0, #0]
 804464c:	041b      	lsls	r3, r3, #16
 804464e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8044652:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8044656:	4403      	add	r3, r0
 8044658:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 804465c:	b2dc      	uxtb	r4, r3
 804465e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8044662:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8044666:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 804466a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 804466e:	0e1b      	lsrs	r3, r3, #24
 8044670:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8044674:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8044678:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 804467c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8044680:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8044684:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8044688:	f3c6 0309 	ubfx	r3, r6, #0, #10
 804468c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8044690:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8044694:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8044698:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 804469c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80446a0:	4b37      	ldr	r3, [pc, #220]	; (8044780 <D32_GENERIC+0x188>)
 80446a2:	fb22 b403 	smlad	r4, r2, r3, fp
 80446a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80446aa:	fb2e 4803 	smlad	r8, lr, r3, r4
 80446ae:	4b35      	ldr	r3, [pc, #212]	; (8044784 <D32_GENERIC+0x18c>)
 80446b0:	fb22 5503 	smlad	r5, r2, r3, r5
 80446b4:	4b34      	ldr	r3, [pc, #208]	; (8044788 <D32_GENERIC+0x190>)
 80446b6:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80446ba:	2301      	movs	r3, #1
 80446bc:	fb22 f203 	smuad	r2, r2, r3
 80446c0:	4b32      	ldr	r3, [pc, #200]	; (804478c <D32_GENERIC+0x194>)
 80446c2:	fb2e 2503 	smlad	r5, lr, r3, r2
 80446c6:	9b02      	ldr	r3, [sp, #8]
 80446c8:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80446cc:	eb04 080a 	add.w	r8, r4, sl
 80446d0:	eba8 0803 	sub.w	r8, r8, r3
 80446d4:	4642      	mov	r2, r8
 80446d6:	17d3      	asrs	r3, r2, #31
 80446d8:	e9cd 2300 	strd	r2, r3, [sp]
 80446dc:	9b05      	ldr	r3, [sp, #20]
 80446de:	f10c 0e01 	add.w	lr, ip, #1
 80446e2:	b16b      	cbz	r3, 8044700 <D32_GENERIC+0x108>
 80446e4:	6a3a      	ldr	r2, [r7, #32]
 80446e6:	9b01      	ldr	r3, [sp, #4]
 80446e8:	9402      	str	r4, [sp, #8]
 80446ea:	fba8 8902 	umull	r8, r9, r8, r2
 80446ee:	fb02 9903 	mla	r9, r2, r3, r9
 80446f2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80446f6:	f149 0900 	adc.w	r9, r9, #0
 80446fa:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80446fe:	4654      	mov	r4, sl
 8044700:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044702:	9a04      	ldr	r2, [sp, #16]
 8044704:	fb0c fc03 	mul.w	ip, ip, r3
 8044708:	9b03      	ldr	r3, [sp, #12]
 804470a:	0364      	lsls	r4, r4, #13
 804470c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8044710:	f04f 0900 	mov.w	r9, #0
 8044714:	fbc3 8904 	smlal	r8, r9, r3, r4
 8044718:	464b      	mov	r3, r9
 804471a:	109b      	asrs	r3, r3, #2
 804471c:	f303 030f 	ssat	r3, #16, r3
 8044720:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8044724:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8044726:	fa1f fc8e 	uxth.w	ip, lr
 804472a:	4563      	cmp	r3, ip
 804472c:	d914      	bls.n	8044758 <D32_GENERIC+0x160>
 804472e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8044730:	b2e2      	uxtb	r2, r4
 8044732:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8044736:	eb00 080e 	add.w	r8, r0, lr
 804473a:	4253      	negs	r3, r2
 804473c:	2c01      	cmp	r4, #1
 804473e:	eb08 0403 	add.w	r4, r8, r3
 8044742:	f47f af7c 	bne.w	804463e <D32_GENERIC+0x46>
 8044746:	1d02      	adds	r2, r0, #4
 8044748:	6803      	ldr	r3, [r0, #0]
 804474a:	9806      	ldr	r0, [sp, #24]
 804474c:	b110      	cbz	r0, 8044754 <D32_GENERIC+0x15c>
 804474e:	ba5b      	rev16	r3, r3
 8044750:	4610      	mov	r0, r2
 8044752:	e783      	b.n	804465c <D32_GENERIC+0x64>
 8044754:	4610      	mov	r0, r2
 8044756:	e781      	b.n	804465c <D32_GENERIC+0x64>
 8044758:	f8dd 9008 	ldr.w	r9, [sp, #8]
 804475c:	462b      	mov	r3, r5
 804475e:	463a      	mov	r2, r7
 8044760:	6093      	str	r3, [r2, #8]
 8044762:	9b07      	ldr	r3, [sp, #28]
 8044764:	f8c2 b00c 	str.w	fp, [r2, #12]
 8044768:	2000      	movs	r0, #0
 804476a:	61d6      	str	r6, [r2, #28]
 804476c:	f8c2 a010 	str.w	sl, [r2, #16]
 8044770:	f8c2 9014 	str.w	r9, [r2, #20]
 8044774:	6193      	str	r3, [r2, #24]
 8044776:	b009      	add	sp, #36	; 0x24
 8044778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804477c:	20000188 	.word	0x20000188
 8044780:	00060003 	.word	0x00060003
 8044784:	000a000c 	.word	0x000a000c
 8044788:	000c000a 	.word	0x000c000a
 804478c:	00030006 	.word	0x00030006

08044790 <D48_GENERIC>:
 8044790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044794:	b089      	sub	sp, #36	; 0x24
 8044796:	6953      	ldr	r3, [r2, #20]
 8044798:	68d4      	ldr	r4, [r2, #12]
 804479a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 804479c:	9302      	str	r3, [sp, #8]
 804479e:	9400      	str	r4, [sp, #0]
 80447a0:	6993      	ldr	r3, [r2, #24]
 80447a2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80447a4:	9307      	str	r3, [sp, #28]
 80447a6:	9403      	str	r4, [sp, #12]
 80447a8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80447ac:	69d6      	ldr	r6, [r2, #28]
 80447ae:	6893      	ldr	r3, [r2, #8]
 80447b0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80447b2:	9104      	str	r1, [sp, #16]
 80447b4:	2d00      	cmp	r5, #0
 80447b6:	f000 80c5 	beq.w	8044944 <D48_GENERIC+0x1b4>
 80447ba:	f004 0510 	and.w	r5, r4, #16
 80447be:	f004 0420 	and.w	r4, r4, #32
 80447c2:	4967      	ldr	r1, [pc, #412]	; (8044960 <D48_GENERIC+0x1d0>)
 80447c4:	9505      	str	r5, [sp, #20]
 80447c6:	9406      	str	r4, [sp, #24]
 80447c8:	f04f 0c00 	mov.w	ip, #0
 80447cc:	4657      	mov	r7, sl
 80447ce:	9301      	str	r3, [sp, #4]
 80447d0:	e09c      	b.n	804490c <D48_GENERIC+0x17c>
 80447d2:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80447d6:	f810 b009 	ldrb.w	fp, [r0, r9]
 80447da:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80447de:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80447e2:	7800      	ldrb	r0, [r0, #0]
 80447e4:	0424      	lsls	r4, r4, #16
 80447e6:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80447ea:	f818 4005 	ldrb.w	r4, [r8, r5]
 80447ee:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80447f2:	44a8      	add	r8, r5
 80447f4:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80447f8:	eb0b 0500 	add.w	r5, fp, r0
 80447fc:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8044800:	fa5f f885 	uxtb.w	r8, r5
 8044804:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8044808:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 804480c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8044810:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8044814:	0e2d      	lsrs	r5, r5, #24
 8044816:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 804481a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 804481e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8044822:	b2e6      	uxtb	r6, r4
 8044824:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8044828:	f3c4 2407 	ubfx	r4, r4, #8, #8
 804482c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8044830:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8044834:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8044838:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 804483c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8044840:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8044844:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8044848:	f3c4 0409 	ubfx	r4, r4, #0, #10
 804484c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8044850:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8044854:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8044858:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 804485c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8044860:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8044864:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8044868:	4c3e      	ldr	r4, [pc, #248]	; (8044964 <D48_GENERIC+0x1d4>)
 804486a:	9d00      	ldr	r5, [sp, #0]
 804486c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8044870:	4d3d      	ldr	r5, [pc, #244]	; (8044968 <D48_GENERIC+0x1d8>)
 8044872:	fb28 4405 	smlad	r4, r8, r5, r4
 8044876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 804487a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 804487e:	4c3b      	ldr	r4, [pc, #236]	; (804496c <D48_GENERIC+0x1dc>)
 8044880:	9b01      	ldr	r3, [sp, #4]
 8044882:	fb2a 3304 	smlad	r3, sl, r4, r3
 8044886:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 804488a:	fb28 3304 	smlad	r3, r8, r4, r3
 804488e:	4c38      	ldr	r4, [pc, #224]	; (8044970 <D48_GENERIC+0x1e0>)
 8044890:	fb2e 3304 	smlad	r3, lr, r4, r3
 8044894:	2501      	movs	r5, #1
 8044896:	9300      	str	r3, [sp, #0]
 8044898:	fb2a fa05 	smuad	sl, sl, r5
 804489c:	4b35      	ldr	r3, [pc, #212]	; (8044974 <D48_GENERIC+0x1e4>)
 804489e:	fb28 a803 	smlad	r8, r8, r3, sl
 80448a2:	4b35      	ldr	r3, [pc, #212]	; (8044978 <D48_GENERIC+0x1e8>)
 80448a4:	fb2e 8303 	smlad	r3, lr, r3, r8
 80448a8:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80448ac:	9301      	str	r3, [sp, #4]
 80448ae:	9b02      	ldr	r3, [sp, #8]
 80448b0:	eb04 0807 	add.w	r8, r4, r7
 80448b4:	eba8 0803 	sub.w	r8, r8, r3
 80448b8:	9b05      	ldr	r3, [sp, #20]
 80448ba:	4465      	add	r5, ip
 80448bc:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80448c0:	b163      	cbz	r3, 80448dc <D48_GENERIC+0x14c>
 80448c2:	6a17      	ldr	r7, [r2, #32]
 80448c4:	9402      	str	r4, [sp, #8]
 80448c6:	fba8 8907 	umull	r8, r9, r8, r7
 80448ca:	fb07 990b 	mla	r9, r7, fp, r9
 80448ce:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80448d2:	f149 0900 	adc.w	r9, r9, #0
 80448d6:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80448da:	463c      	mov	r4, r7
 80448dc:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80448e0:	9b03      	ldr	r3, [sp, #12]
 80448e2:	02e4      	lsls	r4, r4, #11
 80448e4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80448e8:	f04f 0900 	mov.w	r9, #0
 80448ec:	fb0c fc0e 	mul.w	ip, ip, lr
 80448f0:	fbc3 8904 	smlal	r8, r9, r3, r4
 80448f4:	9b04      	ldr	r3, [sp, #16]
 80448f6:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80448fa:	f304 040f 	ssat	r4, #16, r4
 80448fe:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8044902:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8044904:	fa1f fc85 	uxth.w	ip, r5
 8044908:	4564      	cmp	r4, ip
 804490a:	d919      	bls.n	8044940 <D48_GENERIC+0x1b0>
 804490c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 804490e:	fa5f fe84 	uxtb.w	lr, r4
 8044912:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8044916:	f1ce 0500 	rsb	r5, lr, #0
 804491a:	eb00 0b09 	add.w	fp, r0, r9
 804491e:	eb0b 0a05 	add.w	sl, fp, r5
 8044922:	2c01      	cmp	r4, #1
 8044924:	eb0a 0809 	add.w	r8, sl, r9
 8044928:	f47f af53 	bne.w	80447d2 <D48_GENERIC+0x42>
 804492c:	9b06      	ldr	r3, [sp, #24]
 804492e:	6805      	ldr	r5, [r0, #0]
 8044930:	6844      	ldr	r4, [r0, #4]
 8044932:	3006      	adds	r0, #6
 8044934:	2b00      	cmp	r3, #0
 8044936:	f43f af63 	beq.w	8044800 <D48_GENERIC+0x70>
 804493a:	ba6d      	rev16	r5, r5
 804493c:	ba64      	rev16	r4, r4
 804493e:	e75f      	b.n	8044800 <D48_GENERIC+0x70>
 8044940:	9b01      	ldr	r3, [sp, #4]
 8044942:	46ba      	mov	sl, r7
 8044944:	6093      	str	r3, [r2, #8]
 8044946:	9b00      	ldr	r3, [sp, #0]
 8044948:	60d3      	str	r3, [r2, #12]
 804494a:	9b02      	ldr	r3, [sp, #8]
 804494c:	6153      	str	r3, [r2, #20]
 804494e:	9b07      	ldr	r3, [sp, #28]
 8044950:	61d6      	str	r6, [r2, #28]
 8044952:	2000      	movs	r0, #0
 8044954:	f8c2 a010 	str.w	sl, [r2, #16]
 8044958:	6193      	str	r3, [r2, #24]
 804495a:	b009      	add	sp, #36	; 0x24
 804495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044960:	20000188 	.word	0x20000188
 8044964:	000f000a 	.word	0x000f000a
 8044968:	00060003 	.word	0x00060003
 804496c:	00150019 	.word	0x00150019
 8044970:	00190015 	.word	0x00190015
 8044974:	00030006 	.word	0x00030006
 8044978:	000a000f 	.word	0x000a000f

0804497c <D64_GENERIC>:
 804497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044980:	b089      	sub	sp, #36	; 0x24
 8044982:	6913      	ldr	r3, [r2, #16]
 8044984:	6895      	ldr	r5, [r2, #8]
 8044986:	9303      	str	r3, [sp, #12]
 8044988:	9501      	str	r5, [sp, #4]
 804498a:	6953      	ldr	r3, [r2, #20]
 804498c:	68d5      	ldr	r5, [r2, #12]
 804498e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8044990:	9304      	str	r3, [sp, #16]
 8044992:	9500      	str	r5, [sp, #0]
 8044994:	6993      	ldr	r3, [r2, #24]
 8044996:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8044998:	9307      	str	r3, [sp, #28]
 804499a:	9505      	str	r5, [sp, #20]
 804499c:	69d3      	ldr	r3, [r2, #28]
 804499e:	9106      	str	r1, [sp, #24]
 80449a0:	2c00      	cmp	r4, #0
 80449a2:	f000 80d9 	beq.w	8044b58 <D64_GENERIC+0x1dc>
 80449a6:	6a11      	ldr	r1, [r2, #32]
 80449a8:	9102      	str	r1, [sp, #8]
 80449aa:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8044b98 <D64_GENERIC+0x21c>
 80449ae:	f04f 0c00 	mov.w	ip, #0
 80449b2:	4681      	mov	r9, r0
 80449b4:	e0c1      	b.n	8044b3a <D64_GENERIC+0x1be>
 80449b6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80449ba:	4274      	negs	r4, r6
 80449bc:	eb09 0708 	add.w	r7, r9, r8
 80449c0:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80449c4:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80449c8:	5d38      	ldrb	r0, [r7, r4]
 80449ca:	5d29      	ldrb	r1, [r5, r4]
 80449cc:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80449d0:	f819 a008 	ldrb.w	sl, [r9, r8]
 80449d4:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80449d8:	f899 7000 	ldrb.w	r7, [r9]
 80449dc:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80449e0:	4425      	add	r5, r4
 80449e2:	0409      	lsls	r1, r1, #16
 80449e4:	0400      	lsls	r0, r0, #16
 80449e6:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80449ea:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80449ee:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80449f2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80449f6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80449fa:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80449fe:	4459      	add	r1, fp
 8044a00:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8044a04:	4438      	add	r0, r7
 8044a06:	b2c5      	uxtb	r5, r0
 8044a08:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8044a0c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8044a10:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8044a14:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8044a18:	0e00      	lsrs	r0, r0, #24
 8044a1a:	eb03 0806 	add.w	r8, r3, r6
 8044a1e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8044a22:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8044a26:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8044a2a:	b2c8      	uxtb	r0, r1
 8044a2c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8044a30:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8044a34:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8044a38:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8044a3c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8044a40:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8044a44:	0e09      	lsrs	r1, r1, #24
 8044a46:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8044a4a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8044a4e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8044a52:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8044a56:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8044a5a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8044a5e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8044a62:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8044a66:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8044a6a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8044a6e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8044a72:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8044a76:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8044a7a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8044a7e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8044a82:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8044a86:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8044a8a:	0a8b      	lsrs	r3, r1, #10
 8044a8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8044a90:	4939      	ldr	r1, [pc, #228]	; (8044b78 <D64_GENERIC+0x1fc>)
 8044a92:	9c00      	ldr	r4, [sp, #0]
 8044a94:	fb28 4101 	smlad	r1, r8, r1, r4
 8044a98:	4c38      	ldr	r4, [pc, #224]	; (8044b7c <D64_GENERIC+0x200>)
 8044a9a:	fb27 1104 	smlad	r1, r7, r4, r1
 8044a9e:	4c38      	ldr	r4, [pc, #224]	; (8044b80 <D64_GENERIC+0x204>)
 8044aa0:	fb20 1104 	smlad	r1, r0, r4, r1
 8044aa4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8044aa8:	fb2a 1106 	smlad	r1, sl, r6, r1
 8044aac:	4c35      	ldr	r4, [pc, #212]	; (8044b84 <D64_GENERIC+0x208>)
 8044aae:	9d01      	ldr	r5, [sp, #4]
 8044ab0:	fb28 5404 	smlad	r4, r8, r4, r5
 8044ab4:	4d33      	ldr	r5, [pc, #204]	; (8044b84 <D64_GENERIC+0x208>)
 8044ab6:	fb2a 4415 	smladx	r4, sl, r5, r4
 8044aba:	4d33      	ldr	r5, [pc, #204]	; (8044b88 <D64_GENERIC+0x20c>)
 8044abc:	fb27 4405 	smlad	r4, r7, r5, r4
 8044ac0:	fb20 4415 	smladx	r4, r0, r5, r4
 8044ac4:	2501      	movs	r5, #1
 8044ac6:	9400      	str	r4, [sp, #0]
 8044ac8:	fb28 f805 	smuad	r8, r8, r5
 8044acc:	4c2f      	ldr	r4, [pc, #188]	; (8044b8c <D64_GENERIC+0x210>)
 8044ace:	fb27 8704 	smlad	r7, r7, r4, r8
 8044ad2:	4c2f      	ldr	r4, [pc, #188]	; (8044b90 <D64_GENERIC+0x214>)
 8044ad4:	fb20 7004 	smlad	r0, r0, r4, r7
 8044ad8:	4c2e      	ldr	r4, [pc, #184]	; (8044b94 <D64_GENERIC+0x218>)
 8044ada:	fb2a 0004 	smlad	r0, sl, r4, r0
 8044ade:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8044ae2:	9902      	ldr	r1, [sp, #8]
 8044ae4:	9001      	str	r0, [sp, #4]
 8044ae6:	b189      	cbz	r1, 8044b0c <D64_GENERIC+0x190>
 8044ae8:	9803      	ldr	r0, [sp, #12]
 8044aea:	9c04      	ldr	r4, [sp, #16]
 8044aec:	9604      	str	r6, [sp, #16]
 8044aee:	4430      	add	r0, r6
 8044af0:	1b00      	subs	r0, r0, r4
 8044af2:	17c5      	asrs	r5, r0, #31
 8044af4:	460f      	mov	r7, r1
 8044af6:	fba0 0101 	umull	r0, r1, r0, r1
 8044afa:	fb07 1105 	mla	r1, r7, r5, r1
 8044afe:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8044b02:	f141 0100 	adc.w	r1, r1, #0
 8044b06:	0049      	lsls	r1, r1, #1
 8044b08:	9103      	str	r1, [sp, #12]
 8044b0a:	460e      	mov	r6, r1
 8044b0c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8044b0e:	9905      	ldr	r1, [sp, #20]
 8044b10:	9806      	ldr	r0, [sp, #24]
 8044b12:	02b6      	lsls	r6, r6, #10
 8044b14:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8044b18:	f04f 0800 	mov.w	r8, #0
 8044b1c:	fb0c f404 	mul.w	r4, ip, r4
 8044b20:	fbc1 7806 	smlal	r7, r8, r1, r6
 8044b24:	4641      	mov	r1, r8
 8044b26:	1089      	asrs	r1, r1, #2
 8044b28:	f301 010f 	ssat	r1, #16, r1
 8044b2c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8044b30:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8044b32:	f10c 0c01 	add.w	ip, ip, #1
 8044b36:	4561      	cmp	r1, ip
 8044b38:	dd0e      	ble.n	8044b58 <D64_GENERIC+0x1dc>
 8044b3a:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8044b3c:	2e01      	cmp	r6, #1
 8044b3e:	f47f af3a 	bne.w	80449b6 <D64_GENERIC+0x3a>
 8044b42:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8044b44:	06b4      	lsls	r4, r6, #26
 8044b46:	e899 0003 	ldmia.w	r9, {r0, r1}
 8044b4a:	f109 0908 	add.w	r9, r9, #8
 8044b4e:	f57f af5a 	bpl.w	8044a06 <D64_GENERIC+0x8a>
 8044b52:	ba40      	rev16	r0, r0
 8044b54:	ba49      	rev16	r1, r1
 8044b56:	e756      	b.n	8044a06 <D64_GENERIC+0x8a>
 8044b58:	61d3      	str	r3, [r2, #28]
 8044b5a:	9b03      	ldr	r3, [sp, #12]
 8044b5c:	9901      	ldr	r1, [sp, #4]
 8044b5e:	6113      	str	r3, [r2, #16]
 8044b60:	9b04      	ldr	r3, [sp, #16]
 8044b62:	6091      	str	r1, [r2, #8]
 8044b64:	6153      	str	r3, [r2, #20]
 8044b66:	9900      	ldr	r1, [sp, #0]
 8044b68:	9b07      	ldr	r3, [sp, #28]
 8044b6a:	60d1      	str	r1, [r2, #12]
 8044b6c:	2000      	movs	r0, #0
 8044b6e:	6193      	str	r3, [r2, #24]
 8044b70:	b009      	add	sp, #36	; 0x24
 8044b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044b76:	bf00      	nop
 8044b78:	001c0015 	.word	0x001c0015
 8044b7c:	000f000a 	.word	0x000f000a
 8044b80:	00060003 	.word	0x00060003
 8044b84:	0024002a 	.word	0x0024002a
 8044b88:	002e0030 	.word	0x002e0030
 8044b8c:	00030006 	.word	0x00030006
 8044b90:	000a000f 	.word	0x000a000f
 8044b94:	0015001c 	.word	0x0015001c
 8044b98:	20000188 	.word	0x20000188

08044b9c <D80_GENERIC>:
 8044b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044ba0:	b08b      	sub	sp, #44	; 0x2c
 8044ba2:	6914      	ldr	r4, [r2, #16]
 8044ba4:	9404      	str	r4, [sp, #16]
 8044ba6:	6954      	ldr	r4, [r2, #20]
 8044ba8:	9405      	str	r4, [sp, #20]
 8044baa:	6994      	ldr	r4, [r2, #24]
 8044bac:	9409      	str	r4, [sp, #36]	; 0x24
 8044bae:	6894      	ldr	r4, [r2, #8]
 8044bb0:	9402      	str	r4, [sp, #8]
 8044bb2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8044bb4:	68d4      	ldr	r4, [r2, #12]
 8044bb6:	9401      	str	r4, [sp, #4]
 8044bb8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8044bba:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8044bbe:	9406      	str	r4, [sp, #24]
 8044bc0:	9107      	str	r1, [sp, #28]
 8044bc2:	2b00      	cmp	r3, #0
 8044bc4:	f000 810f 	beq.w	8044de6 <D80_GENERIC+0x24a>
 8044bc8:	6a13      	ldr	r3, [r2, #32]
 8044bca:	9308      	str	r3, [sp, #32]
 8044bcc:	2300      	movs	r3, #0
 8044bce:	9200      	str	r2, [sp, #0]
 8044bd0:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8044e38 <D80_GENERIC+0x29c>
 8044bd4:	f8cd b00c 	str.w	fp, [sp, #12]
 8044bd8:	461a      	mov	r2, r3
 8044bda:	e0ed      	b.n	8044db8 <D80_GENERIC+0x21c>
 8044bdc:	fa5f fc8c 	uxtb.w	ip, ip
 8044be0:	fa0f f48c 	sxth.w	r4, ip
 8044be4:	0066      	lsls	r6, r4, #1
 8044be6:	eb06 0804 	add.w	r8, r6, r4
 8044bea:	f1cc 0500 	rsb	r5, ip, #0
 8044bee:	eb00 0108 	add.w	r1, r0, r8
 8044bf2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8044bf6:	194b      	adds	r3, r1, r5
 8044bf8:	5d49      	ldrb	r1, [r1, r5]
 8044bfa:	f810 a008 	ldrb.w	sl, [r0, r8]
 8044bfe:	f813 b004 	ldrb.w	fp, [r3, r4]
 8044c02:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8044c06:	f890 8000 	ldrb.w	r8, [r0]
 8044c0a:	eb03 0e04 	add.w	lr, r3, r4
 8044c0e:	eb0e 0705 	add.w	r7, lr, r5
 8044c12:	0409      	lsls	r1, r1, #16
 8044c14:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8044c18:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8044c1c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8044c20:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8044c24:	eb0a 0004 	add.w	r0, sl, r4
 8044c28:	041b      	lsls	r3, r3, #16
 8044c2a:	f81a a004 	ldrb.w	sl, [sl, r4]
 8044c2e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8044c32:	5d44      	ldrb	r4, [r0, r5]
 8044c34:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8044c38:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8044c3c:	4428      	add	r0, r5
 8044c3e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8044c42:	4441      	add	r1, r8
 8044c44:	4430      	add	r0, r6
 8044c46:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8044c4a:	441f      	add	r7, r3
 8044c4c:	b2cd      	uxtb	r5, r1
 8044c4e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8044c52:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8044c56:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8044c5a:	9b03      	ldr	r3, [sp, #12]
 8044c5c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8044c60:	0e09      	lsrs	r1, r1, #24
 8044c62:	4433      	add	r3, r6
 8044c64:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8044c68:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8044c6c:	b2fd      	uxtb	r5, r7
 8044c6e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8044c72:	469b      	mov	fp, r3
 8044c74:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8044c78:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8044c7c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8044c80:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8044c84:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8044c88:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8044c8c:	0e3b      	lsrs	r3, r7, #24
 8044c8e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8044c92:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8044c96:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8044c9a:	fa5f fe84 	uxtb.w	lr, r4
 8044c9e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8044ca2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8044ca6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8044caa:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8044cae:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8044cb2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8044cb6:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8044cba:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8044cbe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8044cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8044cc6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8044cca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8044cce:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8044cd2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8044cd6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8044cda:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8044cde:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8044ce2:	0aa3      	lsrs	r3, r4, #10
 8044ce4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8044ce8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8044cec:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8044cf0:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8044cf4:	9303      	str	r3, [sp, #12]
 8044cf6:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8044cfa:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8044cfe:	4b42      	ldr	r3, [pc, #264]	; (8044e08 <D80_GENERIC+0x26c>)
 8044d00:	9901      	ldr	r1, [sp, #4]
 8044d02:	fb2b 1303 	smlad	r3, fp, r3, r1
 8044d06:	4941      	ldr	r1, [pc, #260]	; (8044e0c <D80_GENERIC+0x270>)
 8044d08:	fb28 3301 	smlad	r3, r8, r1, r3
 8044d0c:	4940      	ldr	r1, [pc, #256]	; (8044e10 <D80_GENERIC+0x274>)
 8044d0e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8044d12:	4940      	ldr	r1, [pc, #256]	; (8044e14 <D80_GENERIC+0x278>)
 8044d14:	fb27 3301 	smlad	r3, r7, r1, r3
 8044d18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8044d1c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8044d20:	493d      	ldr	r1, [pc, #244]	; (8044e18 <D80_GENERIC+0x27c>)
 8044d22:	9c02      	ldr	r4, [sp, #8]
 8044d24:	fb2b 4401 	smlad	r4, fp, r1, r4
 8044d28:	493c      	ldr	r1, [pc, #240]	; (8044e1c <D80_GENERIC+0x280>)
 8044d2a:	fb28 4401 	smlad	r4, r8, r1, r4
 8044d2e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8044d32:	fb2c 4101 	smlad	r1, ip, r1, r4
 8044d36:	4c3a      	ldr	r4, [pc, #232]	; (8044e20 <D80_GENERIC+0x284>)
 8044d38:	fb27 1104 	smlad	r1, r7, r4, r1
 8044d3c:	4c39      	ldr	r4, [pc, #228]	; (8044e24 <D80_GENERIC+0x288>)
 8044d3e:	fb2e 1104 	smlad	r1, lr, r4, r1
 8044d42:	9101      	str	r1, [sp, #4]
 8044d44:	2101      	movs	r1, #1
 8044d46:	fb2b fb01 	smuad	fp, fp, r1
 8044d4a:	4937      	ldr	r1, [pc, #220]	; (8044e28 <D80_GENERIC+0x28c>)
 8044d4c:	fb28 b801 	smlad	r8, r8, r1, fp
 8044d50:	4d36      	ldr	r5, [pc, #216]	; (8044e2c <D80_GENERIC+0x290>)
 8044d52:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8044d56:	4d36      	ldr	r5, [pc, #216]	; (8044e30 <D80_GENERIC+0x294>)
 8044d58:	fb27 c705 	smlad	r7, r7, r5, ip
 8044d5c:	4d35      	ldr	r5, [pc, #212]	; (8044e34 <D80_GENERIC+0x298>)
 8044d5e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8044d62:	9102      	str	r1, [sp, #8]
 8044d64:	9908      	ldr	r1, [sp, #32]
 8044d66:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8044d6a:	b181      	cbz	r1, 8044d8e <D80_GENERIC+0x1f2>
 8044d6c:	9c04      	ldr	r4, [sp, #16]
 8044d6e:	9d05      	ldr	r5, [sp, #20]
 8044d70:	9305      	str	r3, [sp, #20]
 8044d72:	441c      	add	r4, r3
 8044d74:	1b64      	subs	r4, r4, r5
 8044d76:	17e7      	asrs	r7, r4, #31
 8044d78:	fba4 4501 	umull	r4, r5, r4, r1
 8044d7c:	fb01 5507 	mla	r5, r1, r7, r5
 8044d80:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8044d84:	f145 0500 	adc.w	r5, r5, #0
 8044d88:	0069      	lsls	r1, r5, #1
 8044d8a:	9104      	str	r1, [sp, #16]
 8044d8c:	460b      	mov	r3, r1
 8044d8e:	9e00      	ldr	r6, [sp, #0]
 8044d90:	9f06      	ldr	r7, [sp, #24]
 8044d92:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8044d94:	025b      	lsls	r3, r3, #9
 8044d96:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8044d9a:	2500      	movs	r5, #0
 8044d9c:	fb02 f101 	mul.w	r1, r2, r1
 8044da0:	fbc7 4503 	smlal	r4, r5, r7, r3
 8044da4:	9c07      	ldr	r4, [sp, #28]
 8044da6:	10ab      	asrs	r3, r5, #2
 8044da8:	f303 030f 	ssat	r3, #16, r3
 8044dac:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8044db0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8044db2:	3201      	adds	r2, #1
 8044db4:	4293      	cmp	r3, r2
 8044db6:	dd13      	ble.n	8044de0 <D80_GENERIC+0x244>
 8044db8:	9b00      	ldr	r3, [sp, #0]
 8044dba:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8044dbe:	f1bc 0f01 	cmp.w	ip, #1
 8044dc2:	f47f af0b 	bne.w	8044bdc <D80_GENERIC+0x40>
 8044dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8044dc8:	6884      	ldr	r4, [r0, #8]
 8044dca:	069b      	lsls	r3, r3, #26
 8044dcc:	e890 0082 	ldmia.w	r0, {r1, r7}
 8044dd0:	f100 000a 	add.w	r0, r0, #10
 8044dd4:	f57f af3a 	bpl.w	8044c4c <D80_GENERIC+0xb0>
 8044dd8:	ba49      	rev16	r1, r1
 8044dda:	ba7f      	rev16	r7, r7
 8044ddc:	ba64      	rev16	r4, r4
 8044dde:	e735      	b.n	8044c4c <D80_GENERIC+0xb0>
 8044de0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8044de4:	4632      	mov	r2, r6
 8044de6:	9b02      	ldr	r3, [sp, #8]
 8044de8:	6093      	str	r3, [r2, #8]
 8044dea:	9b01      	ldr	r3, [sp, #4]
 8044dec:	60d3      	str	r3, [r2, #12]
 8044dee:	9b04      	ldr	r3, [sp, #16]
 8044df0:	6113      	str	r3, [r2, #16]
 8044df2:	9b05      	ldr	r3, [sp, #20]
 8044df4:	6153      	str	r3, [r2, #20]
 8044df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8044df8:	f8c2 b01c 	str.w	fp, [r2, #28]
 8044dfc:	2000      	movs	r0, #0
 8044dfe:	6193      	str	r3, [r2, #24]
 8044e00:	b00b      	add	sp, #44	; 0x2c
 8044e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044e06:	bf00      	nop
 8044e08:	002d0024 	.word	0x002d0024
 8044e0c:	001c0015 	.word	0x001c0015
 8044e10:	000f000a 	.word	0x000f000a
 8044e14:	00060003 	.word	0x00060003
 8044e18:	0037003f 	.word	0x0037003f
 8044e1c:	00450049 	.word	0x00450049
 8044e20:	00490045 	.word	0x00490045
 8044e24:	003f0037 	.word	0x003f0037
 8044e28:	00030006 	.word	0x00030006
 8044e2c:	000a000f 	.word	0x000a000f
 8044e30:	0015001c 	.word	0x0015001c
 8044e34:	0024002d 	.word	0x0024002d
 8044e38:	20000188 	.word	0x20000188

08044e3c <D128_GENERIC>:
 8044e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044e40:	b093      	sub	sp, #76	; 0x4c
 8044e42:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8044e44:	9005      	str	r0, [sp, #20]
 8044e46:	4610      	mov	r0, r2
 8044e48:	9201      	str	r2, [sp, #4]
 8044e4a:	6912      	ldr	r2, [r2, #16]
 8044e4c:	920c      	str	r2, [sp, #48]	; 0x30
 8044e4e:	4602      	mov	r2, r0
 8044e50:	6940      	ldr	r0, [r0, #20]
 8044e52:	900d      	str	r0, [sp, #52]	; 0x34
 8044e54:	4610      	mov	r0, r2
 8044e56:	4614      	mov	r4, r2
 8044e58:	6992      	ldr	r2, [r2, #24]
 8044e5a:	9211      	str	r2, [sp, #68]	; 0x44
 8044e5c:	69c2      	ldr	r2, [r0, #28]
 8044e5e:	9202      	str	r2, [sp, #8]
 8044e60:	68e2      	ldr	r2, [r4, #12]
 8044e62:	6880      	ldr	r0, [r0, #8]
 8044e64:	9203      	str	r2, [sp, #12]
 8044e66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8044e68:	9004      	str	r0, [sp, #16]
 8044e6a:	920e      	str	r2, [sp, #56]	; 0x38
 8044e6c:	910f      	str	r1, [sp, #60]	; 0x3c
 8044e6e:	2b00      	cmp	r3, #0
 8044e70:	f000 819b 	beq.w	80451aa <D128_GENERIC+0x36e>
 8044e74:	6a23      	ldr	r3, [r4, #32]
 8044e76:	9310      	str	r3, [sp, #64]	; 0x40
 8044e78:	2300      	movs	r3, #0
 8044e7a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8045224 <D128_GENERIC+0x3e8>
 8044e7e:	9306      	str	r3, [sp, #24]
 8044e80:	e17a      	b.n	8045178 <D128_GENERIC+0x33c>
 8044e82:	b2d2      	uxtb	r2, r2
 8044e84:	9d05      	ldr	r5, [sp, #20]
 8044e86:	b214      	sxth	r4, r2
 8044e88:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8044e8c:	4250      	negs	r0, r2
 8044e8e:	eb05 010a 	add.w	r1, r5, sl
 8044e92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8044e96:	eb01 0800 	add.w	r8, r1, r0
 8044e9a:	eb0b 0c04 	add.w	ip, fp, r4
 8044e9e:	eb08 070c 	add.w	r7, r8, ip
 8044ea2:	183b      	adds	r3, r7, r0
 8044ea4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8044ea8:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8044eac:	eb0e 0604 	add.w	r6, lr, r4
 8044eb0:	9307      	str	r3, [sp, #28]
 8044eb2:	1833      	adds	r3, r6, r0
 8044eb4:	9305      	str	r3, [sp, #20]
 8044eb6:	462b      	mov	r3, r5
 8044eb8:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8044ebc:	f8cd a020 	str.w	sl, [sp, #32]
 8044ec0:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8044ec4:	f813 c002 	ldrb.w	ip, [r3, r2]
 8044ec8:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8044ecc:	5c3a      	ldrb	r2, [r7, r0]
 8044ece:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8044ed2:	781f      	ldrb	r7, [r3, #0]
 8044ed4:	9b07      	ldr	r3, [sp, #28]
 8044ed6:	9d05      	ldr	r5, [sp, #20]
 8044ed8:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8044edc:	5c09      	ldrb	r1, [r1, r0]
 8044ede:	9709      	str	r7, [sp, #36]	; 0x24
 8044ee0:	9307      	str	r3, [sp, #28]
 8044ee2:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8044ee6:	5c33      	ldrb	r3, [r6, r0]
 8044ee8:	0412      	lsls	r2, r2, #16
 8044eea:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8044eee:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8044ef2:	9d08      	ldr	r5, [sp, #32]
 8044ef4:	eb06 0a04 	add.w	sl, r6, r4
 8044ef8:	0409      	lsls	r1, r1, #16
 8044efa:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8044efe:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8044f02:	5d36      	ldrb	r6, [r6, r4]
 8044f04:	9c05      	ldr	r4, [sp, #20]
 8044f06:	042d      	lsls	r5, r5, #16
 8044f08:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8044f0c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8044f10:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8044f14:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8044f18:	eb0a 0c00 	add.w	ip, sl, r0
 8044f1c:	041b      	lsls	r3, r3, #16
 8044f1e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8044f22:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8044f26:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8044f2a:	9d07      	ldr	r5, [sp, #28]
 8044f2c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8044f30:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8044f34:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8044f36:	4458      	add	r0, fp
 8044f38:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8044f3c:	9005      	str	r0, [sp, #20]
 8044f3e:	4439      	add	r1, r7
 8044f40:	442a      	add	r2, r5
 8044f42:	44b2      	add	sl, r6
 8044f44:	1918      	adds	r0, r3, r4
 8044f46:	b2cb      	uxtb	r3, r1
 8044f48:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8044f4c:	9e02      	ldr	r6, [sp, #8]
 8044f4e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8044f52:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8044f56:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8044f5a:	441e      	add	r6, r3
 8044f5c:	0e09      	lsrs	r1, r1, #24
 8044f5e:	4633      	mov	r3, r6
 8044f60:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8044f64:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8044f68:	b2d4      	uxtb	r4, r2
 8044f6a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8044f6e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8044f72:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8044f76:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8044f7a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8044f7e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8044f82:	0e12      	lsrs	r2, r2, #24
 8044f84:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8044f88:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8044f8c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8044f90:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8044f94:	9702      	str	r7, [sp, #8]
 8044f96:	b2c2      	uxtb	r2, r0
 8044f98:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8044f9c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8044fa0:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8044fa4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8044fa8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8044fac:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8044fb0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8044fb4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8044fb8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8044fbc:	0e00      	lsrs	r0, r0, #24
 8044fbe:	fa5f f68a 	uxtb.w	r6, sl
 8044fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8044fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8044fc8:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8044fcc:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8044fd0:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8044fd4:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8044fd8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8044fdc:	950a      	str	r5, [sp, #40]	; 0x28
 8044fde:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8044fe2:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8044fe6:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8044fea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8044fee:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8044ff2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8044ff6:	920b      	str	r2, [sp, #44]	; 0x2c
 8044ff8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8044ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044ffe:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8045002:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8045006:	9307      	str	r3, [sp, #28]
 8045008:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 804500c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8045010:	9b02      	ldr	r3, [sp, #8]
 8045012:	f8cd c008 	str.w	ip, [sp, #8]
 8045016:	4694      	mov	ip, r2
 8045018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804501a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 804501e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8045022:	9a02      	ldr	r2, [sp, #8]
 8045024:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8045028:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 804502c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8045030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8045032:	f8cd a020 	str.w	sl, [sp, #32]
 8045036:	f3c8 0809 	ubfx	r8, r8, #0, #10
 804503a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 804503e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8045042:	9b07      	ldr	r3, [sp, #28]
 8045044:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8045048:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 804504c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8045050:	9a08      	ldr	r2, [sp, #32]
 8045052:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8045056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 804505a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 804505e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8045062:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8045066:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 804506a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 804506e:	0a96      	lsrs	r6, r2, #10
 8045070:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8045074:	9602      	str	r6, [sp, #8]
 8045076:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 804507a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 804507e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8045082:	4e53      	ldr	r6, [pc, #332]	; (80451d0 <D128_GENERIC+0x394>)
 8045084:	9f03      	ldr	r7, [sp, #12]
 8045086:	fb2c 7606 	smlad	r6, ip, r6, r7
 804508a:	4f52      	ldr	r7, [pc, #328]	; (80451d4 <D128_GENERIC+0x398>)
 804508c:	fb2a 6607 	smlad	r6, sl, r7, r6
 8045090:	4f51      	ldr	r7, [pc, #324]	; (80451d8 <D128_GENERIC+0x39c>)
 8045092:	fb21 6607 	smlad	r6, r1, r7, r6
 8045096:	4f51      	ldr	r7, [pc, #324]	; (80451dc <D128_GENERIC+0x3a0>)
 8045098:	fb24 6607 	smlad	r6, r4, r7, r6
 804509c:	4f50      	ldr	r7, [pc, #320]	; (80451e0 <D128_GENERIC+0x3a4>)
 804509e:	fb28 6607 	smlad	r6, r8, r7, r6
 80450a2:	4f50      	ldr	r7, [pc, #320]	; (80451e4 <D128_GENERIC+0x3a8>)
 80450a4:	fb20 6607 	smlad	r6, r0, r7, r6
 80450a8:	4f4f      	ldr	r7, [pc, #316]	; (80451e8 <D128_GENERIC+0x3ac>)
 80450aa:	fb23 6607 	smlad	r6, r3, r7, r6
 80450ae:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80450b2:	fb25 6607 	smlad	r6, r5, r7, r6
 80450b6:	4f4d      	ldr	r7, [pc, #308]	; (80451ec <D128_GENERIC+0x3b0>)
 80450b8:	9a04      	ldr	r2, [sp, #16]
 80450ba:	fb2c 2e07 	smlad	lr, ip, r7, r2
 80450be:	4a4c      	ldr	r2, [pc, #304]	; (80451f0 <D128_GENERIC+0x3b4>)
 80450c0:	fb2a ee02 	smlad	lr, sl, r2, lr
 80450c4:	4f4b      	ldr	r7, [pc, #300]	; (80451f4 <D128_GENERIC+0x3b8>)
 80450c6:	fb21 ee07 	smlad	lr, r1, r7, lr
 80450ca:	4f4b      	ldr	r7, [pc, #300]	; (80451f8 <D128_GENERIC+0x3bc>)
 80450cc:	fb24 ee07 	smlad	lr, r4, r7, lr
 80450d0:	4f4a      	ldr	r7, [pc, #296]	; (80451fc <D128_GENERIC+0x3c0>)
 80450d2:	fb28 ee07 	smlad	lr, r8, r7, lr
 80450d6:	4f4a      	ldr	r7, [pc, #296]	; (8045200 <D128_GENERIC+0x3c4>)
 80450d8:	fb20 ee07 	smlad	lr, r0, r7, lr
 80450dc:	4f49      	ldr	r7, [pc, #292]	; (8045204 <D128_GENERIC+0x3c8>)
 80450de:	fb23 e707 	smlad	r7, r3, r7, lr
 80450e2:	f8df e144 	ldr.w	lr, [pc, #324]	; 8045228 <D128_GENERIC+0x3ec>
 80450e6:	fb25 720e 	smlad	r2, r5, lr, r7
 80450ea:	f04f 0b01 	mov.w	fp, #1
 80450ee:	9203      	str	r2, [sp, #12]
 80450f0:	fb2c fb0b 	smuad	fp, ip, fp
 80450f4:	4f44      	ldr	r7, [pc, #272]	; (8045208 <D128_GENERIC+0x3cc>)
 80450f6:	fb2a ba07 	smlad	sl, sl, r7, fp
 80450fa:	4f44      	ldr	r7, [pc, #272]	; (804520c <D128_GENERIC+0x3d0>)
 80450fc:	fb21 aa07 	smlad	sl, r1, r7, sl
 8045100:	4f43      	ldr	r7, [pc, #268]	; (8045210 <D128_GENERIC+0x3d4>)
 8045102:	fb24 aa07 	smlad	sl, r4, r7, sl
 8045106:	4f43      	ldr	r7, [pc, #268]	; (8045214 <D128_GENERIC+0x3d8>)
 8045108:	fb28 a707 	smlad	r7, r8, r7, sl
 804510c:	4a42      	ldr	r2, [pc, #264]	; (8045218 <D128_GENERIC+0x3dc>)
 804510e:	fb20 7702 	smlad	r7, r0, r2, r7
 8045112:	4a42      	ldr	r2, [pc, #264]	; (804521c <D128_GENERIC+0x3e0>)
 8045114:	fb23 7702 	smlad	r7, r3, r2, r7
 8045118:	4b41      	ldr	r3, [pc, #260]	; (8045220 <D128_GENERIC+0x3e4>)
 804511a:	fb25 7303 	smlad	r3, r5, r3, r7
 804511e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8045120:	9304      	str	r3, [sp, #16]
 8045122:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8045126:	b185      	cbz	r5, 804514a <D128_GENERIC+0x30e>
 8045128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804512a:	990d      	ldr	r1, [sp, #52]	; 0x34
 804512c:	960d      	str	r6, [sp, #52]	; 0x34
 804512e:	4432      	add	r2, r6
 8045130:	1a52      	subs	r2, r2, r1
 8045132:	17d1      	asrs	r1, r2, #31
 8045134:	fba2 2305 	umull	r2, r3, r2, r5
 8045138:	fb05 3301 	mla	r3, r5, r1, r3
 804513c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8045140:	f143 0300 	adc.w	r3, r3, #0
 8045144:	005b      	lsls	r3, r3, #1
 8045146:	930c      	str	r3, [sp, #48]	; 0x30
 8045148:	461e      	mov	r6, r3
 804514a:	9801      	ldr	r0, [sp, #4]
 804514c:	9c06      	ldr	r4, [sp, #24]
 804514e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8045150:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8045152:	01f6      	lsls	r6, r6, #7
 8045154:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8045158:	2300      	movs	r3, #0
 804515a:	fbc5 2306 	smlal	r2, r3, r5, r6
 804515e:	fb04 f101 	mul.w	r1, r4, r1
 8045162:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8045164:	109b      	asrs	r3, r3, #2
 8045166:	f303 030f 	ssat	r3, #16, r3
 804516a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 804516e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8045170:	1c62      	adds	r2, r4, #1
 8045172:	4293      	cmp	r3, r2
 8045174:	9206      	str	r2, [sp, #24]
 8045176:	dd18      	ble.n	80451aa <D128_GENERIC+0x36e>
 8045178:	9b01      	ldr	r3, [sp, #4]
 804517a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 804517c:	2a01      	cmp	r2, #1
 804517e:	f47f ae80 	bne.w	8044e82 <D128_GENERIC+0x46>
 8045182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8045184:	9d05      	ldr	r5, [sp, #20]
 8045186:	069b      	lsls	r3, r3, #26
 8045188:	6829      	ldr	r1, [r5, #0]
 804518a:	686a      	ldr	r2, [r5, #4]
 804518c:	68a8      	ldr	r0, [r5, #8]
 804518e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8045192:	f105 0410 	add.w	r4, r5, #16
 8045196:	d506      	bpl.n	80451a6 <D128_GENERIC+0x36a>
 8045198:	ba49      	rev16	r1, r1
 804519a:	ba52      	rev16	r2, r2
 804519c:	ba40      	rev16	r0, r0
 804519e:	fa9a fa9a 	rev16.w	sl, sl
 80451a2:	9405      	str	r4, [sp, #20]
 80451a4:	e6cf      	b.n	8044f46 <D128_GENERIC+0x10a>
 80451a6:	9405      	str	r4, [sp, #20]
 80451a8:	e6cd      	b.n	8044f46 <D128_GENERIC+0x10a>
 80451aa:	9a01      	ldr	r2, [sp, #4]
 80451ac:	9904      	ldr	r1, [sp, #16]
 80451ae:	6091      	str	r1, [r2, #8]
 80451b0:	9903      	ldr	r1, [sp, #12]
 80451b2:	60d1      	str	r1, [r2, #12]
 80451b4:	9b02      	ldr	r3, [sp, #8]
 80451b6:	61d3      	str	r3, [r2, #28]
 80451b8:	4611      	mov	r1, r2
 80451ba:	4613      	mov	r3, r2
 80451bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80451be:	610a      	str	r2, [r1, #16]
 80451c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80451c2:	6159      	str	r1, [r3, #20]
 80451c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80451c6:	6199      	str	r1, [r3, #24]
 80451c8:	2000      	movs	r0, #0
 80451ca:	b013      	add	sp, #76	; 0x4c
 80451cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80451d0:	00780069 	.word	0x00780069
 80451d4:	005b004e 	.word	0x005b004e
 80451d8:	00420037 	.word	0x00420037
 80451dc:	002d0024 	.word	0x002d0024
 80451e0:	001c0015 	.word	0x001c0015
 80451e4:	000f000a 	.word	0x000f000a
 80451e8:	00060003 	.word	0x00060003
 80451ec:	00880096 	.word	0x00880096
 80451f0:	00a200ac 	.word	0x00a200ac
 80451f4:	00b400ba 	.word	0x00b400ba
 80451f8:	00be00c0 	.word	0x00be00c0
 80451fc:	00c000be 	.word	0x00c000be
 8045200:	00ba00b4 	.word	0x00ba00b4
 8045204:	00ac00a2 	.word	0x00ac00a2
 8045208:	00030006 	.word	0x00030006
 804520c:	000a000f 	.word	0x000a000f
 8045210:	0015001c 	.word	0x0015001c
 8045214:	0024002d 	.word	0x0024002d
 8045218:	00370042 	.word	0x00370042
 804521c:	004e005b 	.word	0x004e005b
 8045220:	00690078 	.word	0x00690078
 8045224:	20000188 	.word	0x20000188
 8045228:	00960088 	.word	0x00960088

0804522c <D16_1CH_HTONS_VOL_HP>:
 804522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045230:	4691      	mov	r9, r2
 8045232:	b083      	sub	sp, #12
 8045234:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8045236:	f8d9 3018 	ldr.w	r3, [r9, #24]
 804523a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 804523e:	9300      	str	r3, [sp, #0]
 8045240:	4680      	mov	r8, r0
 8045242:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8045246:	f8d9 0010 	ldr.w	r0, [r9, #16]
 804524a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 804524e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8045252:	9401      	str	r4, [sp, #4]
 8045254:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8045258:	f8d9 e020 	ldr.w	lr, [r9, #32]
 804525c:	2a00      	cmp	r2, #0
 804525e:	d04e      	beq.n	80452fe <D16_1CH_HTONS_VOL_HP+0xd2>
 8045260:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 804530c <D16_1CH_HTONS_VOL_HP+0xe0>
 8045264:	1e8c      	subs	r4, r1, #2
 8045266:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 804526a:	f858 2b02 	ldr.w	r2, [r8], #2
 804526e:	ba52      	rev16	r2, r2
 8045270:	b2d6      	uxtb	r6, r2
 8045272:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8045276:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 804527a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 804527e:	4413      	add	r3, r2
 8045280:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8045284:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8045288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 804528c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8045290:	0a93      	lsrs	r3, r2, #10
 8045292:	4a1c      	ldr	r2, [pc, #112]	; (8045304 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8045294:	fb21 5202 	smlad	r2, r1, r2, r5
 8045298:	4d1b      	ldr	r5, [pc, #108]	; (8045308 <D16_1CH_HTONS_VOL_HP+0xdc>)
 804529a:	fb21 f505 	smuad	r5, r1, r5
 804529e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80452a2:	4410      	add	r0, r2
 80452a4:	1bc0      	subs	r0, r0, r7
 80452a6:	17c7      	asrs	r7, r0, #31
 80452a8:	fba0 010e 	umull	r0, r1, r0, lr
 80452ac:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80452b0:	fb0e 1107 	mla	r1, lr, r7, r1
 80452b4:	f141 0100 	adc.w	r1, r1, #0
 80452b8:	0448      	lsls	r0, r1, #17
 80452ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80452be:	2700      	movs	r7, #0
 80452c0:	fbc0 670a 	smlal	r6, r7, r0, sl
 80452c4:	45d8      	cmp	r8, fp
 80452c6:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80452ca:	ea4f 01a7 	mov.w	r1, r7, asr #2
 80452ce:	4617      	mov	r7, r2
 80452d0:	f301 010f 	ssat	r1, #16, r1
 80452d4:	f824 1f02 	strh.w	r1, [r4, #2]!
 80452d8:	d1c7      	bne.n	804526a <D16_1CH_HTONS_VOL_HP+0x3e>
 80452da:	9901      	ldr	r1, [sp, #4]
 80452dc:	f8c9 301c 	str.w	r3, [r9, #28]
 80452e0:	9b00      	ldr	r3, [sp, #0]
 80452e2:	f8c9 0010 	str.w	r0, [r9, #16]
 80452e6:	2000      	movs	r0, #0
 80452e8:	f8c9 5008 	str.w	r5, [r9, #8]
 80452ec:	f8c9 100c 	str.w	r1, [r9, #12]
 80452f0:	f8c9 2014 	str.w	r2, [r9, #20]
 80452f4:	f8c9 3018 	str.w	r3, [r9, #24]
 80452f8:	b003      	add	sp, #12
 80452fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80452fe:	463a      	mov	r2, r7
 8045300:	4621      	mov	r1, r4
 8045302:	e7eb      	b.n	80452dc <D16_1CH_HTONS_VOL_HP+0xb0>
 8045304:	00030001 	.word	0x00030001
 8045308:	00010003 	.word	0x00010003
 804530c:	20000188 	.word	0x20000188

08045310 <D24_1CH_HTONS_VOL_HP>:
 8045310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045314:	b089      	sub	sp, #36	; 0x24
 8045316:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8045318:	6996      	ldr	r6, [r2, #24]
 804531a:	9304      	str	r3, [sp, #16]
 804531c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 804531e:	9207      	str	r2, [sp, #28]
 8045320:	6915      	ldr	r5, [r2, #16]
 8045322:	6954      	ldr	r4, [r2, #20]
 8045324:	9606      	str	r6, [sp, #24]
 8045326:	6893      	ldr	r3, [r2, #8]
 8045328:	69d6      	ldr	r6, [r2, #28]
 804532a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 804532e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8045332:	9a04      	ldr	r2, [sp, #16]
 8045334:	9705      	str	r7, [sp, #20]
 8045336:	2a00      	cmp	r2, #0
 8045338:	d07e      	beq.n	8045438 <D24_1CH_HTONS_VOL_HP+0x128>
 804533a:	f1a1 0b02 	sub.w	fp, r1, #2
 804533e:	2700      	movs	r7, #0
 8045340:	46a8      	mov	r8, r5
 8045342:	f8cd b004 	str.w	fp, [sp, #4]
 8045346:	4655      	mov	r5, sl
 8045348:	46e3      	mov	fp, ip
 804534a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8045444 <D24_1CH_HTONS_VOL_HP+0x134>
 804534e:	46ba      	mov	sl, r7
 8045350:	469c      	mov	ip, r3
 8045352:	e055      	b.n	8045400 <D24_1CH_HTONS_VOL_HP+0xf0>
 8045354:	7802      	ldrb	r2, [r0, #0]
 8045356:	78c3      	ldrb	r3, [r0, #3]
 8045358:	7841      	ldrb	r1, [r0, #1]
 804535a:	0212      	lsls	r2, r2, #8
 804535c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8045360:	440b      	add	r3, r1
 8045362:	3002      	adds	r0, #2
 8045364:	b2d9      	uxtb	r1, r3
 8045366:	f3c3 2207 	ubfx	r2, r3, #8, #8
 804536a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 804536e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8045372:	0c1b      	lsrs	r3, r3, #16
 8045374:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8045378:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 804537c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8045380:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8045384:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8045388:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 804538c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8045390:	4a2a      	ldr	r2, [pc, #168]	; (804543c <D24_1CH_HTONS_VOL_HP+0x12c>)
 8045392:	fb23 b102 	smlad	r1, r3, r2, fp
 8045396:	4a2a      	ldr	r2, [pc, #168]	; (8045440 <D24_1CH_HTONS_VOL_HP+0x130>)
 8045398:	fb23 cb02 	smlad	fp, r3, r2, ip
 804539c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80453a0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80453a4:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80453a8:	2201      	movs	r2, #1
 80453aa:	fb23 f702 	smuad	r7, r3, r2
 80453ae:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80453b2:	eb01 0208 	add.w	r2, r1, r8
 80453b6:	1b12      	subs	r2, r2, r4
 80453b8:	17d4      	asrs	r4, r2, #31
 80453ba:	fba2 2305 	umull	r2, r3, r2, r5
 80453be:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80453c2:	fb05 3304 	mla	r3, r5, r4, r3
 80453c6:	f143 0300 	adc.w	r3, r3, #0
 80453ca:	9c05      	ldr	r4, [sp, #20]
 80453cc:	03da      	lsls	r2, r3, #15
 80453ce:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80453d2:	f04f 0900 	mov.w	r9, #0
 80453d6:	fbc4 8902 	smlal	r8, r9, r4, r2
 80453da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80453de:	9a01      	ldr	r2, [sp, #4]
 80453e0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80453e4:	9b03      	ldr	r3, [sp, #12]
 80453e6:	109b      	asrs	r3, r3, #2
 80453e8:	f303 030f 	ssat	r3, #16, r3
 80453ec:	f822 3f02 	strh.w	r3, [r2, #2]!
 80453f0:	9b04      	ldr	r3, [sp, #16]
 80453f2:	9201      	str	r2, [sp, #4]
 80453f4:	f10a 0a01 	add.w	sl, sl, #1
 80453f8:	459a      	cmp	sl, r3
 80453fa:	44bc      	add	ip, r7
 80453fc:	460c      	mov	r4, r1
 80453fe:	d00b      	beq.n	8045418 <D24_1CH_HTONS_VOL_HP+0x108>
 8045400:	f01a 0f01 	tst.w	sl, #1
 8045404:	d0a6      	beq.n	8045354 <D24_1CH_HTONS_VOL_HP+0x44>
 8045406:	78c2      	ldrb	r2, [r0, #3]
 8045408:	7883      	ldrb	r3, [r0, #2]
 804540a:	f810 1b04 	ldrb.w	r1, [r0], #4
 804540e:	0212      	lsls	r2, r2, #8
 8045410:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8045414:	440b      	add	r3, r1
 8045416:	e7a5      	b.n	8045364 <D24_1CH_HTONS_VOL_HP+0x54>
 8045418:	4663      	mov	r3, ip
 804541a:	4645      	mov	r5, r8
 804541c:	46dc      	mov	ip, fp
 804541e:	9807      	ldr	r0, [sp, #28]
 8045420:	6141      	str	r1, [r0, #20]
 8045422:	9906      	ldr	r1, [sp, #24]
 8045424:	6083      	str	r3, [r0, #8]
 8045426:	f8c0 c00c 	str.w	ip, [r0, #12]
 804542a:	61c6      	str	r6, [r0, #28]
 804542c:	6105      	str	r5, [r0, #16]
 804542e:	6181      	str	r1, [r0, #24]
 8045430:	2000      	movs	r0, #0
 8045432:	b009      	add	sp, #36	; 0x24
 8045434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045438:	4621      	mov	r1, r4
 804543a:	e7f0      	b.n	804541e <D24_1CH_HTONS_VOL_HP+0x10e>
 804543c:	00030001 	.word	0x00030001
 8045440:	00060007 	.word	0x00060007
 8045444:	20000188 	.word	0x20000188

08045448 <D32_1CH_HTONS_VOL_HP>:
 8045448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804544c:	4692      	mov	sl, r2
 804544e:	b087      	sub	sp, #28
 8045450:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8045452:	f8da 3018 	ldr.w	r3, [sl, #24]
 8045456:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 804545a:	9304      	str	r3, [sp, #16]
 804545c:	f8da 4010 	ldr.w	r4, [sl, #16]
 8045460:	f8da 8014 	ldr.w	r8, [sl, #20]
 8045464:	f8da 601c 	ldr.w	r6, [sl, #28]
 8045468:	f8da 3008 	ldr.w	r3, [sl, #8]
 804546c:	f8da e00c 	ldr.w	lr, [sl, #12]
 8045470:	9501      	str	r5, [sp, #4]
 8045472:	f8da c020 	ldr.w	ip, [sl, #32]
 8045476:	2a00      	cmp	r2, #0
 8045478:	d07b      	beq.n	8045572 <D32_1CH_HTONS_VOL_HP+0x12a>
 804547a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 804547e:	4f3e      	ldr	r7, [pc, #248]	; (8045578 <D32_1CH_HTONS_VOL_HP+0x130>)
 8045480:	f8cd c00c 	str.w	ip, [sp, #12]
 8045484:	9202      	str	r2, [sp, #8]
 8045486:	460d      	mov	r5, r1
 8045488:	46a1      	mov	r9, r4
 804548a:	4684      	mov	ip, r0
 804548c:	f8cd a014 	str.w	sl, [sp, #20]
 8045490:	f85c 1b04 	ldr.w	r1, [ip], #4
 8045494:	ba49      	rev16	r1, r1
 8045496:	b2c8      	uxtb	r0, r1
 8045498:	f3c1 2207 	ubfx	r2, r1, #8, #8
 804549c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80454a0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80454a4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80454a8:	0e09      	lsrs	r1, r1, #24
 80454aa:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80454ae:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 80454b2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80454b6:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80454ba:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 80454be:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 80454c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80454c6:	f3c6 0109 	ubfx	r1, r6, #0, #10
 80454ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80454ce:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80454d2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80454d6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80454da:	4a28      	ldr	r2, [pc, #160]	; (804557c <D32_1CH_HTONS_VOL_HP+0x134>)
 80454dc:	fb20 e202 	smlad	r2, r0, r2, lr
 80454e0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80454e4:	fb2a 2101 	smlad	r1, sl, r1, r2
 80454e8:	4a25      	ldr	r2, [pc, #148]	; (8045580 <D32_1CH_HTONS_VOL_HP+0x138>)
 80454ea:	fb20 3302 	smlad	r3, r0, r2, r3
 80454ee:	4a25      	ldr	r2, [pc, #148]	; (8045584 <D32_1CH_HTONS_VOL_HP+0x13c>)
 80454f0:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80454f4:	2301      	movs	r3, #1
 80454f6:	fb20 f003 	smuad	r0, r0, r3
 80454fa:	4b23      	ldr	r3, [pc, #140]	; (8045588 <D32_1CH_HTONS_VOL_HP+0x140>)
 80454fc:	fb2a 0303 	smlad	r3, sl, r3, r0
 8045500:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8045504:	9c03      	ldr	r4, [sp, #12]
 8045506:	eb02 0009 	add.w	r0, r2, r9
 804550a:	eba0 0008 	sub.w	r0, r0, r8
 804550e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8045512:	fba0 0104 	umull	r0, r1, r0, r4
 8045516:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 804551a:	fb04 110b 	mla	r1, r4, fp, r1
 804551e:	f141 0100 	adc.w	r1, r1, #0
 8045522:	9c01      	ldr	r4, [sp, #4]
 8045524:	0388      	lsls	r0, r1, #14
 8045526:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 804552a:	f04f 0900 	mov.w	r9, #0
 804552e:	fbc0 8904 	smlal	r8, r9, r0, r4
 8045532:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8045536:	ea4f 0941 	mov.w	r9, r1, lsl #1
 804553a:	f300 000f 	ssat	r0, #16, r0
 804553e:	9902      	ldr	r1, [sp, #8]
 8045540:	f825 0b02 	strh.w	r0, [r5], #2
 8045544:	428d      	cmp	r5, r1
 8045546:	4690      	mov	r8, r2
 8045548:	d1a2      	bne.n	8045490 <D32_1CH_HTONS_VOL_HP+0x48>
 804554a:	f8dd a014 	ldr.w	sl, [sp, #20]
 804554e:	464c      	mov	r4, r9
 8045550:	f8ca 3008 	str.w	r3, [sl, #8]
 8045554:	9b04      	ldr	r3, [sp, #16]
 8045556:	f8ca e00c 	str.w	lr, [sl, #12]
 804555a:	2000      	movs	r0, #0
 804555c:	f8ca 601c 	str.w	r6, [sl, #28]
 8045560:	f8ca 4010 	str.w	r4, [sl, #16]
 8045564:	f8ca 2014 	str.w	r2, [sl, #20]
 8045568:	f8ca 3018 	str.w	r3, [sl, #24]
 804556c:	b007      	add	sp, #28
 804556e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045572:	4642      	mov	r2, r8
 8045574:	e7ec      	b.n	8045550 <D32_1CH_HTONS_VOL_HP+0x108>
 8045576:	bf00      	nop
 8045578:	20000188 	.word	0x20000188
 804557c:	00060003 	.word	0x00060003
 8045580:	000a000c 	.word	0x000a000c
 8045584:	000c000a 	.word	0x000c000a
 8045588:	00030006 	.word	0x00030006

0804558c <D48_1CH_HTONS_VOL_HP>:
 804558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045590:	4613      	mov	r3, r2
 8045592:	461c      	mov	r4, r3
 8045594:	b087      	sub	sp, #28
 8045596:	4625      	mov	r5, r4
 8045598:	4626      	mov	r6, r4
 804559a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 804559c:	9205      	str	r2, [sp, #20]
 804559e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80455a0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80455a4:	9501      	str	r5, [sp, #4]
 80455a6:	4680      	mov	r8, r0
 80455a8:	6a35      	ldr	r5, [r6, #32]
 80455aa:	6918      	ldr	r0, [r3, #16]
 80455ac:	699b      	ldr	r3, [r3, #24]
 80455ae:	9304      	str	r3, [sp, #16]
 80455b0:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80455b4:	68a3      	ldr	r3, [r4, #8]
 80455b6:	9502      	str	r5, [sp, #8]
 80455b8:	68e4      	ldr	r4, [r4, #12]
 80455ba:	2a00      	cmp	r2, #0
 80455bc:	f000 808c 	beq.w	80456d8 <D48_1CH_HTONS_VOL_HP+0x14c>
 80455c0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80455c4:	4d45      	ldr	r5, [pc, #276]	; (80456dc <D48_1CH_HTONS_VOL_HP+0x150>)
 80455c6:	9203      	str	r2, [sp, #12]
 80455c8:	468c      	mov	ip, r1
 80455ca:	e898 0044 	ldmia.w	r8, {r2, r6}
 80455ce:	f108 0806 	add.w	r8, r8, #6
 80455d2:	ba52      	rev16	r2, r2
 80455d4:	ba76      	rev16	r6, r6
 80455d6:	b2d7      	uxtb	r7, r2
 80455d8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80455dc:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80455e0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80455e4:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80455e8:	0e12      	lsrs	r2, r2, #24
 80455ea:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80455ee:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80455f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80455f6:	fa5f fb86 	uxtb.w	fp, r6
 80455fa:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80455fe:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8045602:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8045606:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 804560a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 804560e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8045612:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8045616:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 804561a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 804561e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8045622:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8045626:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 804562a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 804562e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8045632:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8045636:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 804563a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 804563e:	4a28      	ldr	r2, [pc, #160]	; (80456e0 <D48_1CH_HTONS_VOL_HP+0x154>)
 8045640:	fb2a 4202 	smlad	r2, sl, r2, r4
 8045644:	4927      	ldr	r1, [pc, #156]	; (80456e4 <D48_1CH_HTONS_VOL_HP+0x158>)
 8045646:	fb27 2201 	smlad	r2, r7, r1, r2
 804564a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 804564e:	fb26 2201 	smlad	r2, r6, r1, r2
 8045652:	4925      	ldr	r1, [pc, #148]	; (80456e8 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8045654:	fb2a 3401 	smlad	r4, sl, r1, r3
 8045658:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 804565c:	fb27 4403 	smlad	r4, r7, r3, r4
 8045660:	4b22      	ldr	r3, [pc, #136]	; (80456ec <D48_1CH_HTONS_VOL_HP+0x160>)
 8045662:	fb26 4403 	smlad	r4, r6, r3, r4
 8045666:	2101      	movs	r1, #1
 8045668:	fb2a fa01 	smuad	sl, sl, r1
 804566c:	4b20      	ldr	r3, [pc, #128]	; (80456f0 <D48_1CH_HTONS_VOL_HP+0x164>)
 804566e:	fb27 a703 	smlad	r7, r7, r3, sl
 8045672:	4b20      	ldr	r3, [pc, #128]	; (80456f4 <D48_1CH_HTONS_VOL_HP+0x168>)
 8045674:	fb26 7303 	smlad	r3, r6, r3, r7
 8045678:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 804567c:	9e02      	ldr	r6, [sp, #8]
 804567e:	9f01      	ldr	r7, [sp, #4]
 8045680:	4410      	add	r0, r2
 8045682:	eba0 0009 	sub.w	r0, r0, r9
 8045686:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 804568a:	fba0 0106 	umull	r0, r1, r0, r6
 804568e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8045692:	fb06 110a 	mla	r1, r6, sl, r1
 8045696:	f141 0100 	adc.w	r1, r1, #0
 804569a:	0308      	lsls	r0, r1, #12
 804569c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80456a0:	f04f 0a00 	mov.w	sl, #0
 80456a4:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80456a8:	4657      	mov	r7, sl
 80456aa:	10b8      	asrs	r0, r7, #2
 80456ac:	f300 000f 	ssat	r0, #16, r0
 80456b0:	f82c 0b02 	strh.w	r0, [ip], #2
 80456b4:	0048      	lsls	r0, r1, #1
 80456b6:	9903      	ldr	r1, [sp, #12]
 80456b8:	458c      	cmp	ip, r1
 80456ba:	4691      	mov	r9, r2
 80456bc:	d185      	bne.n	80455ca <D48_1CH_HTONS_VOL_HP+0x3e>
 80456be:	9d05      	ldr	r5, [sp, #20]
 80456c0:	616a      	str	r2, [r5, #20]
 80456c2:	9a04      	ldr	r2, [sp, #16]
 80456c4:	6128      	str	r0, [r5, #16]
 80456c6:	2000      	movs	r0, #0
 80456c8:	60ab      	str	r3, [r5, #8]
 80456ca:	60ec      	str	r4, [r5, #12]
 80456cc:	f8c5 e01c 	str.w	lr, [r5, #28]
 80456d0:	61aa      	str	r2, [r5, #24]
 80456d2:	b007      	add	sp, #28
 80456d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80456d8:	464a      	mov	r2, r9
 80456da:	e7f0      	b.n	80456be <D48_1CH_HTONS_VOL_HP+0x132>
 80456dc:	20000188 	.word	0x20000188
 80456e0:	000f000a 	.word	0x000f000a
 80456e4:	00060003 	.word	0x00060003
 80456e8:	00150019 	.word	0x00150019
 80456ec:	00190015 	.word	0x00190015
 80456f0:	00030006 	.word	0x00030006
 80456f4:	000a000f 	.word	0x000a000f

080456f8 <D64_1CH_HTONS_VOL_HP>:
 80456f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80456fc:	b089      	sub	sp, #36	; 0x24
 80456fe:	4614      	mov	r4, r2
 8045700:	9207      	str	r2, [sp, #28]
 8045702:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8045704:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8045708:	f8d2 8014 	ldr.w	r8, [r2, #20]
 804570c:	6992      	ldr	r2, [r2, #24]
 804570e:	9206      	str	r2, [sp, #24]
 8045710:	68e2      	ldr	r2, [r4, #12]
 8045712:	9201      	str	r2, [sp, #4]
 8045714:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8045716:	9203      	str	r2, [sp, #12]
 8045718:	6a22      	ldr	r2, [r4, #32]
 804571a:	69e5      	ldr	r5, [r4, #28]
 804571c:	68a6      	ldr	r6, [r4, #8]
 804571e:	9204      	str	r2, [sp, #16]
 8045720:	2b00      	cmp	r3, #0
 8045722:	f000 80b0 	beq.w	8045886 <D64_1CH_HTONS_VOL_HP+0x18e>
 8045726:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 804572a:	4f58      	ldr	r7, [pc, #352]	; (804588c <D64_1CH_HTONS_VOL_HP+0x194>)
 804572c:	9305      	str	r3, [sp, #20]
 804572e:	9102      	str	r1, [sp, #8]
 8045730:	f850 2b08 	ldr.w	r2, [r0], #8
 8045734:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8045738:	ba52      	rev16	r2, r2
 804573a:	fa93 f993 	rev16.w	r9, r3
 804573e:	b2d4      	uxtb	r4, r2
 8045740:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8045744:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8045748:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 804574c:	9901      	ldr	r1, [sp, #4]
 804574e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8045752:	0e12      	lsrs	r2, r2, #24
 8045754:	44ab      	add	fp, r5
 8045756:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 804575a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 804575e:	fa5f f289 	uxtb.w	r2, r9
 8045762:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8045766:	f3c9 2307 	ubfx	r3, r9, #8, #8
 804576a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 804576e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8045772:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8045776:	f3c9 4507 	ubfx	r5, r9, #16, #8
 804577a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 804577e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8045782:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8045786:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 804578a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 804578e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8045792:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8045796:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 804579a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 804579e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80457a2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80457a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80457aa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80457ae:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80457b2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80457b6:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80457ba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80457be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80457c2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80457c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80457ca:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80457ce:	4b30      	ldr	r3, [pc, #192]	; (8045890 <D64_1CH_HTONS_VOL_HP+0x198>)
 80457d0:	fb2b 1303 	smlad	r3, fp, r3, r1
 80457d4:	492f      	ldr	r1, [pc, #188]	; (8045894 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80457d6:	fb24 3301 	smlad	r3, r4, r1, r3
 80457da:	492f      	ldr	r1, [pc, #188]	; (8045898 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80457dc:	fb22 3301 	smlad	r3, r2, r1, r3
 80457e0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80457e4:	fb2e 390a 	smlad	r9, lr, sl, r3
 80457e8:	4b2c      	ldr	r3, [pc, #176]	; (804589c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80457ea:	fb2b 6603 	smlad	r6, fp, r3, r6
 80457ee:	fb2e 6613 	smladx	r6, lr, r3, r6
 80457f2:	4b2b      	ldr	r3, [pc, #172]	; (80458a0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80457f4:	fb24 6603 	smlad	r6, r4, r3, r6
 80457f8:	fb22 6313 	smladx	r3, r2, r3, r6
 80457fc:	f04f 0a01 	mov.w	sl, #1
 8045800:	9301      	str	r3, [sp, #4]
 8045802:	fb2b fb0a 	smuad	fp, fp, sl
 8045806:	4b27      	ldr	r3, [pc, #156]	; (80458a4 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8045808:	fb24 ba03 	smlad	sl, r4, r3, fp
 804580c:	4b26      	ldr	r3, [pc, #152]	; (80458a8 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 804580e:	fb22 a203 	smlad	r2, r2, r3, sl
 8045812:	4b26      	ldr	r3, [pc, #152]	; (80458ac <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8045814:	fb2e 2603 	smlad	r6, lr, r3, r2
 8045818:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 804581c:	eb0a 020c 	add.w	r2, sl, ip
 8045820:	9c04      	ldr	r4, [sp, #16]
 8045822:	9903      	ldr	r1, [sp, #12]
 8045824:	eba2 0208 	sub.w	r2, r2, r8
 8045828:	ea4f 79e2 	mov.w	r9, r2, asr #31
 804582c:	fba2 2304 	umull	r2, r3, r2, r4
 8045830:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8045834:	fb04 3309 	mla	r3, r4, r9, r3
 8045838:	f143 0300 	adc.w	r3, r3, #0
 804583c:	02da      	lsls	r2, r3, #11
 804583e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8045842:	f04f 0900 	mov.w	r9, #0
 8045846:	fbc1 8902 	smlal	r8, r9, r1, r2
 804584a:	9902      	ldr	r1, [sp, #8]
 804584c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8045850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8045854:	f302 020f 	ssat	r2, #16, r2
 8045858:	9b05      	ldr	r3, [sp, #20]
 804585a:	f821 2b02 	strh.w	r2, [r1], #2
 804585e:	4299      	cmp	r1, r3
 8045860:	9102      	str	r1, [sp, #8]
 8045862:	46d0      	mov	r8, sl
 8045864:	f47f af64 	bne.w	8045730 <D64_1CH_HTONS_VOL_HP+0x38>
 8045868:	9a07      	ldr	r2, [sp, #28]
 804586a:	9901      	ldr	r1, [sp, #4]
 804586c:	60d1      	str	r1, [r2, #12]
 804586e:	9906      	ldr	r1, [sp, #24]
 8045870:	6096      	str	r6, [r2, #8]
 8045872:	2000      	movs	r0, #0
 8045874:	61d5      	str	r5, [r2, #28]
 8045876:	f8c2 c010 	str.w	ip, [r2, #16]
 804587a:	f8c2 a014 	str.w	sl, [r2, #20]
 804587e:	6191      	str	r1, [r2, #24]
 8045880:	b009      	add	sp, #36	; 0x24
 8045882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045886:	46c2      	mov	sl, r8
 8045888:	4622      	mov	r2, r4
 804588a:	e7ee      	b.n	804586a <D64_1CH_HTONS_VOL_HP+0x172>
 804588c:	20000188 	.word	0x20000188
 8045890:	001c0015 	.word	0x001c0015
 8045894:	000f000a 	.word	0x000f000a
 8045898:	00060003 	.word	0x00060003
 804589c:	0024002a 	.word	0x0024002a
 80458a0:	002e0030 	.word	0x002e0030
 80458a4:	00030006 	.word	0x00030006
 80458a8:	000a000f 	.word	0x000a000f
 80458ac:	0015001c 	.word	0x0015001c

080458b0 <D80_1CH_HTONS_VOL_HP>:
 80458b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80458b4:	4613      	mov	r3, r2
 80458b6:	b089      	sub	sp, #36	; 0x24
 80458b8:	4686      	mov	lr, r0
 80458ba:	6918      	ldr	r0, [r3, #16]
 80458bc:	9000      	str	r0, [sp, #0]
 80458be:	4618      	mov	r0, r3
 80458c0:	461c      	mov	r4, r3
 80458c2:	695b      	ldr	r3, [r3, #20]
 80458c4:	9302      	str	r3, [sp, #8]
 80458c6:	6983      	ldr	r3, [r0, #24]
 80458c8:	9306      	str	r3, [sp, #24]
 80458ca:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80458ce:	69c3      	ldr	r3, [r0, #28]
 80458d0:	68c0      	ldr	r0, [r0, #12]
 80458d2:	9207      	str	r2, [sp, #28]
 80458d4:	9001      	str	r0, [sp, #4]
 80458d6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80458d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80458da:	9003      	str	r0, [sp, #12]
 80458dc:	6a20      	ldr	r0, [r4, #32]
 80458de:	9004      	str	r0, [sp, #16]
 80458e0:	2a00      	cmp	r2, #0
 80458e2:	f000 80d2 	beq.w	8045a8a <D80_1CH_HTONS_VOL_HP+0x1da>
 80458e6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80458ea:	4869      	ldr	r0, [pc, #420]	; (8045a90 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80458ec:	9205      	str	r2, [sp, #20]
 80458ee:	461c      	mov	r4, r3
 80458f0:	f8de 5000 	ldr.w	r5, [lr]
 80458f4:	f8de 2004 	ldr.w	r2, [lr, #4]
 80458f8:	f8de 3008 	ldr.w	r3, [lr, #8]
 80458fc:	f10e 0e0a 	add.w	lr, lr, #10
 8045900:	ba6d      	rev16	r5, r5
 8045902:	ba52      	rev16	r2, r2
 8045904:	fa93 fb93 	rev16.w	fp, r3
 8045908:	b2ee      	uxtb	r6, r5
 804590a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 804590e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8045912:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8045916:	f3c5 4607 	ubfx	r6, r5, #16, #8
 804591a:	eb04 0a07 	add.w	sl, r4, r7
 804591e:	0e2d      	lsrs	r5, r5, #24
 8045920:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8045924:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8045928:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 804592c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8045930:	b2d5      	uxtb	r5, r2
 8045932:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8045936:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 804593a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 804593e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8045942:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8045946:	0e12      	lsrs	r2, r2, #24
 8045948:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 804594c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8045950:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8045954:	fa5f f48b 	uxtb.w	r4, fp
 8045958:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 804595c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8045960:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8045964:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8045968:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 804596c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8045970:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8045974:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8045978:	f3c6 0609 	ubfx	r6, r6, #0, #10
 804597c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8045980:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8045984:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8045988:	f3c7 0709 	ubfx	r7, r7, #0, #10
 804598c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8045990:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8045994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8045998:	f3cb 0609 	ubfx	r6, fp, #0, #10
 804599c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80459a0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80459a4:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80459a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80459ac:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80459b0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80459b4:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80459b8:	4d36      	ldr	r5, [pc, #216]	; (8045a94 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80459ba:	9f01      	ldr	r7, [sp, #4]
 80459bc:	fb23 7505 	smlad	r5, r3, r5, r7
 80459c0:	4f35      	ldr	r7, [pc, #212]	; (8045a98 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80459c2:	fb29 5507 	smlad	r5, r9, r7, r5
 80459c6:	4f35      	ldr	r7, [pc, #212]	; (8045a9c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80459c8:	fb28 5507 	smlad	r5, r8, r7, r5
 80459cc:	4f34      	ldr	r7, [pc, #208]	; (8045aa0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80459ce:	fb22 5507 	smlad	r5, r2, r7, r5
 80459d2:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80459d6:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80459da:	4d32      	ldr	r5, [pc, #200]	; (8045aa4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80459dc:	fb23 cc05 	smlad	ip, r3, r5, ip
 80459e0:	4d31      	ldr	r5, [pc, #196]	; (8045aa8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80459e2:	fb29 cc05 	smlad	ip, r9, r5, ip
 80459e6:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 80459ea:	fb28 c505 	smlad	r5, r8, r5, ip
 80459ee:	4f2f      	ldr	r7, [pc, #188]	; (8045aac <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80459f0:	fb22 5507 	smlad	r5, r2, r7, r5
 80459f4:	4f2e      	ldr	r7, [pc, #184]	; (8045ab0 <D80_1CH_HTONS_VOL_HP+0x200>)
 80459f6:	fb26 5507 	smlad	r5, r6, r7, r5
 80459fa:	f04f 0a01 	mov.w	sl, #1
 80459fe:	9501      	str	r5, [sp, #4]
 8045a00:	fb23 fa0a 	smuad	sl, r3, sl
 8045a04:	4b2b      	ldr	r3, [pc, #172]	; (8045ab4 <D80_1CH_HTONS_VOL_HP+0x204>)
 8045a06:	fb29 a903 	smlad	r9, r9, r3, sl
 8045a0a:	4d2b      	ldr	r5, [pc, #172]	; (8045ab8 <D80_1CH_HTONS_VOL_HP+0x208>)
 8045a0c:	fb28 9805 	smlad	r8, r8, r5, r9
 8045a10:	4d2a      	ldr	r5, [pc, #168]	; (8045abc <D80_1CH_HTONS_VOL_HP+0x20c>)
 8045a12:	fb22 8205 	smlad	r2, r2, r5, r8
 8045a16:	4b2a      	ldr	r3, [pc, #168]	; (8045ac0 <D80_1CH_HTONS_VOL_HP+0x210>)
 8045a18:	fb26 2c03 	smlad	ip, r6, r3, r2
 8045a1c:	9b00      	ldr	r3, [sp, #0]
 8045a1e:	9d04      	ldr	r5, [sp, #16]
 8045a20:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8045a24:	4453      	add	r3, sl
 8045a26:	461a      	mov	r2, r3
 8045a28:	9b02      	ldr	r3, [sp, #8]
 8045a2a:	f8cd a008 	str.w	sl, [sp, #8]
 8045a2e:	1ad2      	subs	r2, r2, r3
 8045a30:	17d7      	asrs	r7, r2, #31
 8045a32:	fba2 2305 	umull	r2, r3, r2, r5
 8045a36:	fb05 3307 	mla	r3, r5, r7, r3
 8045a3a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8045a3e:	f143 0300 	adc.w	r3, r3, #0
 8045a42:	9d03      	ldr	r5, [sp, #12]
 8045a44:	029a      	lsls	r2, r3, #10
 8045a46:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8045a4a:	2700      	movs	r7, #0
 8045a4c:	005b      	lsls	r3, r3, #1
 8045a4e:	fbc5 6702 	smlal	r6, r7, r5, r2
 8045a52:	10ba      	asrs	r2, r7, #2
 8045a54:	9300      	str	r3, [sp, #0]
 8045a56:	f302 020f 	ssat	r2, #16, r2
 8045a5a:	9b05      	ldr	r3, [sp, #20]
 8045a5c:	f821 2b02 	strh.w	r2, [r1], #2
 8045a60:	4299      	cmp	r1, r3
 8045a62:	f47f af45 	bne.w	80458f0 <D80_1CH_HTONS_VOL_HP+0x40>
 8045a66:	4623      	mov	r3, r4
 8045a68:	9907      	ldr	r1, [sp, #28]
 8045a6a:	9801      	ldr	r0, [sp, #4]
 8045a6c:	60c8      	str	r0, [r1, #12]
 8045a6e:	9a00      	ldr	r2, [sp, #0]
 8045a70:	f8c1 c008 	str.w	ip, [r1, #8]
 8045a74:	4608      	mov	r0, r1
 8045a76:	61cb      	str	r3, [r1, #28]
 8045a78:	610a      	str	r2, [r1, #16]
 8045a7a:	f8c1 a014 	str.w	sl, [r1, #20]
 8045a7e:	9906      	ldr	r1, [sp, #24]
 8045a80:	6181      	str	r1, [r0, #24]
 8045a82:	2000      	movs	r0, #0
 8045a84:	b009      	add	sp, #36	; 0x24
 8045a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045a8a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8045a8e:	e7eb      	b.n	8045a68 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8045a90:	20000188 	.word	0x20000188
 8045a94:	002d0024 	.word	0x002d0024
 8045a98:	001c0015 	.word	0x001c0015
 8045a9c:	000f000a 	.word	0x000f000a
 8045aa0:	00060003 	.word	0x00060003
 8045aa4:	0037003f 	.word	0x0037003f
 8045aa8:	00450049 	.word	0x00450049
 8045aac:	00490045 	.word	0x00490045
 8045ab0:	003f0037 	.word	0x003f0037
 8045ab4:	00030006 	.word	0x00030006
 8045ab8:	000a000f 	.word	0x000a000f
 8045abc:	0015001c 	.word	0x0015001c
 8045ac0:	0024002d 	.word	0x0024002d

08045ac4 <D128_1CH_HTONS_VOL_HP>:
 8045ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045ac8:	b093      	sub	sp, #76	; 0x4c
 8045aca:	4614      	mov	r4, r2
 8045acc:	9211      	str	r2, [sp, #68]	; 0x44
 8045ace:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8045ad0:	6912      	ldr	r2, [r2, #16]
 8045ad2:	9203      	str	r2, [sp, #12]
 8045ad4:	4622      	mov	r2, r4
 8045ad6:	4615      	mov	r5, r2
 8045ad8:	6964      	ldr	r4, [r4, #20]
 8045ada:	9406      	str	r4, [sp, #24]
 8045adc:	4614      	mov	r4, r2
 8045ade:	6992      	ldr	r2, [r2, #24]
 8045ae0:	9210      	str	r2, [sp, #64]	; 0x40
 8045ae2:	68ea      	ldr	r2, [r5, #12]
 8045ae4:	9204      	str	r2, [sp, #16]
 8045ae6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8045ae8:	69e6      	ldr	r6, [r4, #28]
 8045aea:	920d      	str	r2, [sp, #52]	; 0x34
 8045aec:	68a4      	ldr	r4, [r4, #8]
 8045aee:	6a2a      	ldr	r2, [r5, #32]
 8045af0:	9405      	str	r4, [sp, #20]
 8045af2:	920e      	str	r2, [sp, #56]	; 0x38
 8045af4:	2b00      	cmp	r3, #0
 8045af6:	f000 8145 	beq.w	8045d84 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8045afa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8045afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8045b00:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8045de0 <D128_1CH_HTONS_VOL_HP+0x31c>
 8045b04:	9107      	str	r1, [sp, #28]
 8045b06:	f100 0310 	add.w	r3, r0, #16
 8045b0a:	4699      	mov	r9, r3
 8045b0c:	f1a9 0110 	sub.w	r1, r9, #16
 8045b10:	c90e      	ldmia	r1, {r1, r2, r3}
 8045b12:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8045b16:	ba49      	rev16	r1, r1
 8045b18:	ba52      	rev16	r2, r2
 8045b1a:	ba5b      	rev16	r3, r3
 8045b1c:	fa90 fa90 	rev16.w	sl, r0
 8045b20:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8045b24:	b2cc      	uxtb	r4, r1
 8045b26:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8045b2a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8045b2e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8045b32:	0e09      	lsrs	r1, r1, #24
 8045b34:	4426      	add	r6, r4
 8045b36:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8045b3a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8045b3e:	b2d0      	uxtb	r0, r2
 8045b40:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8045b44:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8045b48:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8045b4c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8045b50:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8045b54:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8045b58:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8045b5c:	0e12      	lsrs	r2, r2, #24
 8045b5e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8045b62:	9701      	str	r7, [sp, #4]
 8045b64:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8045b68:	4627      	mov	r7, r4
 8045b6a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8045b6e:	9702      	str	r7, [sp, #8]
 8045b70:	b2da      	uxtb	r2, r3
 8045b72:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8045b76:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8045b7a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8045b7e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8045b82:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8045b86:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8045b8a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8045b8e:	0e1b      	lsrs	r3, r3, #24
 8045b90:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8045b94:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8045b98:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8045b9c:	fa5f f38a 	uxtb.w	r3, sl
 8045ba0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8045ba4:	960a      	str	r6, [sp, #40]	; 0x28
 8045ba6:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8045baa:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8045bae:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8045bb2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8045bb6:	950b      	str	r5, [sp, #44]	; 0x2c
 8045bb8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8045bbc:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8045bc0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8045bc4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8045bc8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8045bcc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8045bd0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8045bd4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8045bd8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8045bdc:	9308      	str	r3, [sp, #32]
 8045bde:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8045be2:	9b01      	ldr	r3, [sp, #4]
 8045be4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8045be8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8045bec:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8045bf0:	9b02      	ldr	r3, [sp, #8]
 8045bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8045bf6:	9302      	str	r3, [sp, #8]
 8045bf8:	9b08      	ldr	r3, [sp, #32]
 8045bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8045bfe:	9308      	str	r3, [sp, #32]
 8045c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8045c02:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8045c06:	950c      	str	r5, [sp, #48]	; 0x30
 8045c08:	461d      	mov	r5, r3
 8045c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8045c0c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8045c10:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8045c14:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8045c18:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8045c1c:	9301      	str	r3, [sp, #4]
 8045c1e:	9b02      	ldr	r3, [sp, #8]
 8045c20:	9202      	str	r2, [sp, #8]
 8045c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8045c24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8045c26:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8045c2a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8045c2e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8045c32:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8045c36:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8045c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8045c3e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8045c42:	9b08      	ldr	r3, [sp, #32]
 8045c44:	9f01      	ldr	r7, [sp, #4]
 8045c46:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8045c4a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8045c4e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8045c52:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8045c56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8045c5a:	46be      	mov	lr, r7
 8045c5c:	0a96      	lsrs	r6, r2, #10
 8045c5e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8045c62:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8045c66:	4f49      	ldr	r7, [pc, #292]	; (8045d8c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8045c68:	9a04      	ldr	r2, [sp, #16]
 8045c6a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8045c6e:	4a48      	ldr	r2, [pc, #288]	; (8045d90 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8045c70:	fb2a ee02 	smlad	lr, sl, r2, lr
 8045c74:	4a47      	ldr	r2, [pc, #284]	; (8045d94 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8045c76:	fb21 ee02 	smlad	lr, r1, r2, lr
 8045c7a:	4a47      	ldr	r2, [pc, #284]	; (8045d98 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8045c7c:	fb24 ee02 	smlad	lr, r4, r2, lr
 8045c80:	4a46      	ldr	r2, [pc, #280]	; (8045d9c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8045c82:	9f02      	ldr	r7, [sp, #8]
 8045c84:	fb27 ee02 	smlad	lr, r7, r2, lr
 8045c88:	4a45      	ldr	r2, [pc, #276]	; (8045da0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8045c8a:	fb20 ee02 	smlad	lr, r0, r2, lr
 8045c8e:	4a45      	ldr	r2, [pc, #276]	; (8045da4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8045c90:	fb23 e702 	smlad	r7, r3, r2, lr
 8045c94:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8045c98:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8045c9c:	9f01      	ldr	r7, [sp, #4]
 8045c9e:	4a42      	ldr	r2, [pc, #264]	; (8045da8 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8045ca0:	46bc      	mov	ip, r7
 8045ca2:	9f05      	ldr	r7, [sp, #20]
 8045ca4:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8045ca8:	4a40      	ldr	r2, [pc, #256]	; (8045dac <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8045caa:	fb2a cc02 	smlad	ip, sl, r2, ip
 8045cae:	4f40      	ldr	r7, [pc, #256]	; (8045db0 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8045cb0:	fb21 cc07 	smlad	ip, r1, r7, ip
 8045cb4:	4f3f      	ldr	r7, [pc, #252]	; (8045db4 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8045cb6:	fb24 cc07 	smlad	ip, r4, r7, ip
 8045cba:	4f3f      	ldr	r7, [pc, #252]	; (8045db8 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8045cbc:	9a02      	ldr	r2, [sp, #8]
 8045cbe:	fb22 cc07 	smlad	ip, r2, r7, ip
 8045cc2:	4f3e      	ldr	r7, [pc, #248]	; (8045dbc <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8045cc4:	fb20 cc07 	smlad	ip, r0, r7, ip
 8045cc8:	4f3d      	ldr	r7, [pc, #244]	; (8045dc0 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8045cca:	fb23 c707 	smlad	r7, r3, r7, ip
 8045cce:	f8df c114 	ldr.w	ip, [pc, #276]	; 8045de4 <D128_1CH_HTONS_VOL_HP+0x320>
 8045cd2:	fb25 720c 	smlad	r2, r5, ip, r7
 8045cd6:	f04f 0b01 	mov.w	fp, #1
 8045cda:	9204      	str	r2, [sp, #16]
 8045cdc:	9f01      	ldr	r7, [sp, #4]
 8045cde:	fb27 fb0b 	smuad	fp, r7, fp
 8045ce2:	4f38      	ldr	r7, [pc, #224]	; (8045dc4 <D128_1CH_HTONS_VOL_HP+0x300>)
 8045ce4:	fb2a ba07 	smlad	sl, sl, r7, fp
 8045ce8:	4f37      	ldr	r7, [pc, #220]	; (8045dc8 <D128_1CH_HTONS_VOL_HP+0x304>)
 8045cea:	fb21 aa07 	smlad	sl, r1, r7, sl
 8045cee:	4f37      	ldr	r7, [pc, #220]	; (8045dcc <D128_1CH_HTONS_VOL_HP+0x308>)
 8045cf0:	fb24 aa07 	smlad	sl, r4, r7, sl
 8045cf4:	4f36      	ldr	r7, [pc, #216]	; (8045dd0 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8045cf6:	9a02      	ldr	r2, [sp, #8]
 8045cf8:	fb22 a707 	smlad	r7, r2, r7, sl
 8045cfc:	4a35      	ldr	r2, [pc, #212]	; (8045dd4 <D128_1CH_HTONS_VOL_HP+0x310>)
 8045cfe:	fb20 7702 	smlad	r7, r0, r2, r7
 8045d02:	4a35      	ldr	r2, [pc, #212]	; (8045dd8 <D128_1CH_HTONS_VOL_HP+0x314>)
 8045d04:	fb23 7702 	smlad	r7, r3, r2, r7
 8045d08:	4b34      	ldr	r3, [pc, #208]	; (8045ddc <D128_1CH_HTONS_VOL_HP+0x318>)
 8045d0a:	fb25 7303 	smlad	r3, r5, r3, r7
 8045d0e:	9305      	str	r3, [sp, #20]
 8045d10:	9b03      	ldr	r3, [sp, #12]
 8045d12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8045d14:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8045d18:	4473      	add	r3, lr
 8045d1a:	461a      	mov	r2, r3
 8045d1c:	9b06      	ldr	r3, [sp, #24]
 8045d1e:	f8cd e018 	str.w	lr, [sp, #24]
 8045d22:	1ad2      	subs	r2, r2, r3
 8045d24:	17d1      	asrs	r1, r2, #31
 8045d26:	fba2 2304 	umull	r2, r3, r2, r4
 8045d2a:	fb04 3301 	mla	r3, r4, r1, r3
 8045d2e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8045d32:	f143 0300 	adc.w	r3, r3, #0
 8045d36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8045d38:	021a      	lsls	r2, r3, #8
 8045d3a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8045d3e:	2100      	movs	r1, #0
 8045d40:	fbc4 0102 	smlal	r0, r1, r4, r2
 8045d44:	108a      	asrs	r2, r1, #2
 8045d46:	9907      	ldr	r1, [sp, #28]
 8045d48:	f302 020f 	ssat	r2, #16, r2
 8045d4c:	005b      	lsls	r3, r3, #1
 8045d4e:	f821 2b02 	strh.w	r2, [r1], #2
 8045d52:	9303      	str	r3, [sp, #12]
 8045d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8045d56:	9107      	str	r1, [sp, #28]
 8045d58:	4299      	cmp	r1, r3
 8045d5a:	f109 0910 	add.w	r9, r9, #16
 8045d5e:	f47f aed5 	bne.w	8045b0c <D128_1CH_HTONS_VOL_HP+0x48>
 8045d62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8045d64:	9905      	ldr	r1, [sp, #20]
 8045d66:	6091      	str	r1, [r2, #8]
 8045d68:	9904      	ldr	r1, [sp, #16]
 8045d6a:	60d1      	str	r1, [r2, #12]
 8045d6c:	4613      	mov	r3, r2
 8045d6e:	61d6      	str	r6, [r2, #28]
 8045d70:	9910      	ldr	r1, [sp, #64]	; 0x40
 8045d72:	9a03      	ldr	r2, [sp, #12]
 8045d74:	611a      	str	r2, [r3, #16]
 8045d76:	2000      	movs	r0, #0
 8045d78:	f8c3 e014 	str.w	lr, [r3, #20]
 8045d7c:	6199      	str	r1, [r3, #24]
 8045d7e:	b013      	add	sp, #76	; 0x4c
 8045d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045d84:	f8dd e018 	ldr.w	lr, [sp, #24]
 8045d88:	e7eb      	b.n	8045d62 <D128_1CH_HTONS_VOL_HP+0x29e>
 8045d8a:	bf00      	nop
 8045d8c:	00780069 	.word	0x00780069
 8045d90:	005b004e 	.word	0x005b004e
 8045d94:	00420037 	.word	0x00420037
 8045d98:	002d0024 	.word	0x002d0024
 8045d9c:	001c0015 	.word	0x001c0015
 8045da0:	000f000a 	.word	0x000f000a
 8045da4:	00060003 	.word	0x00060003
 8045da8:	00880096 	.word	0x00880096
 8045dac:	00a200ac 	.word	0x00a200ac
 8045db0:	00b400ba 	.word	0x00b400ba
 8045db4:	00be00c0 	.word	0x00be00c0
 8045db8:	00c000be 	.word	0x00c000be
 8045dbc:	00ba00b4 	.word	0x00ba00b4
 8045dc0:	00ac00a2 	.word	0x00ac00a2
 8045dc4:	00030006 	.word	0x00030006
 8045dc8:	000a000f 	.word	0x000a000f
 8045dcc:	0015001c 	.word	0x0015001c
 8045dd0:	0024002d 	.word	0x0024002d
 8045dd4:	00370042 	.word	0x00370042
 8045dd8:	004e005b 	.word	0x004e005b
 8045ddc:	00690078 	.word	0x00690078
 8045de0:	20000188 	.word	0x20000188
 8045de4:	00960088 	.word	0x00960088

08045de8 <PDM_Filter_Init>:
 8045de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045dea:	2240      	movs	r2, #64	; 0x40
 8045dec:	4604      	mov	r4, r0
 8045dee:	2100      	movs	r1, #0
 8045df0:	300c      	adds	r0, #12
 8045df2:	f000 f9f9 	bl	80461e8 <memset>
 8045df6:	493b      	ldr	r1, [pc, #236]	; (8045ee4 <PDM_Filter_Init+0xfc>)
 8045df8:	483b      	ldr	r0, [pc, #236]	; (8045ee8 <PDM_Filter_Init+0x100>)
 8045dfa:	f000 f98d 	bl	8046118 <CRC_Lock>
 8045dfe:	8822      	ldrh	r2, [r4, #0]
 8045e00:	8963      	ldrh	r3, [r4, #10]
 8045e02:	4938      	ldr	r1, [pc, #224]	; (8045ee4 <PDM_Filter_Init+0xfc>)
 8045e04:	8925      	ldrh	r5, [r4, #8]
 8045e06:	86a3      	strh	r3, [r4, #52]	; 0x34
 8045e08:	2801      	cmp	r0, #1
 8045e0a:	f04f 0300 	mov.w	r3, #0
 8045e0e:	bf18      	it	ne
 8045e10:	2100      	movne	r1, #0
 8045e12:	2a01      	cmp	r2, #1
 8045e14:	6461      	str	r1, [r4, #68]	; 0x44
 8045e16:	86e5      	strh	r5, [r4, #54]	; 0x36
 8045e18:	61a3      	str	r3, [r4, #24]
 8045e1a:	6123      	str	r3, [r4, #16]
 8045e1c:	6163      	str	r3, [r4, #20]
 8045e1e:	60e3      	str	r3, [r4, #12]
 8045e20:	6263      	str	r3, [r4, #36]	; 0x24
 8045e22:	61e3      	str	r3, [r4, #28]
 8045e24:	6223      	str	r3, [r4, #32]
 8045e26:	6423      	str	r3, [r4, #64]	; 0x40
 8045e28:	d918      	bls.n	8045e5c <PDM_Filter_Init+0x74>
 8045e2a:	2003      	movs	r0, #3
 8045e2c:	2302      	movs	r3, #2
 8045e2e:	8862      	ldrh	r2, [r4, #2]
 8045e30:	2a01      	cmp	r2, #1
 8045e32:	d91d      	bls.n	8045e70 <PDM_Filter_Init+0x88>
 8045e34:	2140      	movs	r1, #64	; 0x40
 8045e36:	2300      	movs	r3, #0
 8045e38:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8045e3a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8045e3e:	6862      	ldr	r2, [r4, #4]
 8045e40:	bf04      	itt	eq
 8045e42:	6421      	streq	r1, [r4, #64]	; 0x40
 8045e44:	460b      	moveq	r3, r1
 8045e46:	b11a      	cbz	r2, 8045e50 <PDM_Filter_Init+0x68>
 8045e48:	f043 0310 	orr.w	r3, r3, #16
 8045e4c:	6423      	str	r3, [r4, #64]	; 0x40
 8045e4e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8045e50:	2200      	movs	r2, #0
 8045e52:	8722      	strh	r2, [r4, #56]	; 0x38
 8045e54:	b908      	cbnz	r0, 8045e5a <PDM_Filter_Init+0x72>
 8045e56:	3380      	adds	r3, #128	; 0x80
 8045e58:	6423      	str	r3, [r4, #64]	; 0x40
 8045e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8045e5c:	4d23      	ldr	r5, [pc, #140]	; (8045eec <PDM_Filter_Init+0x104>)
 8045e5e:	d010      	beq.n	8045e82 <PDM_Filter_Init+0x9a>
 8045e60:	782a      	ldrb	r2, [r5, #0]
 8045e62:	2a01      	cmp	r2, #1
 8045e64:	d027      	beq.n	8045eb6 <PDM_Filter_Init+0xce>
 8045e66:	8862      	ldrh	r2, [r4, #2]
 8045e68:	2a01      	cmp	r2, #1
 8045e6a:	f04f 0001 	mov.w	r0, #1
 8045e6e:	d8e1      	bhi.n	8045e34 <PDM_Filter_Init+0x4c>
 8045e70:	d001      	beq.n	8045e76 <PDM_Filter_Init+0x8e>
 8045e72:	4618      	mov	r0, r3
 8045e74:	e7de      	b.n	8045e34 <PDM_Filter_Init+0x4c>
 8045e76:	2220      	movs	r2, #32
 8045e78:	4618      	mov	r0, r3
 8045e7a:	6422      	str	r2, [r4, #64]	; 0x40
 8045e7c:	4613      	mov	r3, r2
 8045e7e:	2160      	movs	r1, #96	; 0x60
 8045e80:	e7da      	b.n	8045e38 <PDM_Filter_Init+0x50>
 8045e82:	7829      	ldrb	r1, [r5, #0]
 8045e84:	2900      	cmp	r1, #0
 8045e86:	d1ee      	bne.n	8045e66 <PDM_Filter_Init+0x7e>
 8045e88:	4919      	ldr	r1, [pc, #100]	; (8045ef0 <PDM_Filter_Init+0x108>)
 8045e8a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8045ef8 <PDM_Filter_Init+0x110>
 8045e8e:	4f19      	ldr	r7, [pc, #100]	; (8045ef4 <PDM_Filter_Init+0x10c>)
 8045e90:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8045e94:	684a      	ldr	r2, [r1, #4]
 8045e96:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8045e9a:	ea02 0007 	and.w	r0, r2, r7
 8045e9e:	4303      	orrs	r3, r0
 8045ea0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8045ea4:	4413      	add	r3, r2
 8045ea6:	f841 3f04 	str.w	r3, [r1, #4]!
 8045eaa:	428e      	cmp	r6, r1
 8045eac:	d1f2      	bne.n	8045e94 <PDM_Filter_Init+0xac>
 8045eae:	2001      	movs	r0, #1
 8045eb0:	7028      	strb	r0, [r5, #0]
 8045eb2:	2300      	movs	r3, #0
 8045eb4:	e7bb      	b.n	8045e2e <PDM_Filter_Init+0x46>
 8045eb6:	490e      	ldr	r1, [pc, #56]	; (8045ef0 <PDM_Filter_Init+0x108>)
 8045eb8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8045ef8 <PDM_Filter_Init+0x110>
 8045ebc:	4f0d      	ldr	r7, [pc, #52]	; (8045ef4 <PDM_Filter_Init+0x10c>)
 8045ebe:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8045ec2:	684a      	ldr	r2, [r1, #4]
 8045ec4:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8045ec8:	ea02 0007 	and.w	r0, r2, r7
 8045ecc:	4303      	orrs	r3, r0
 8045ece:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8045ed2:	4413      	add	r3, r2
 8045ed4:	f841 3f04 	str.w	r3, [r1, #4]!
 8045ed8:	428e      	cmp	r6, r1
 8045eda:	d1f2      	bne.n	8045ec2 <PDM_Filter_Init+0xda>
 8045edc:	2300      	movs	r3, #0
 8045ede:	702b      	strb	r3, [r5, #0]
 8045ee0:	e7c1      	b.n	8045e66 <PDM_Filter_Init+0x7e>
 8045ee2:	bf00      	nop
 8045ee4:	b5e8b5cd 	.word	0xb5e8b5cd
 8045ee8:	f407a5c2 	.word	0xf407a5c2
 8045eec:	2000ea4d 	.word	0x2000ea4d
 8045ef0:	20000184 	.word	0x20000184
 8045ef4:	000ffc00 	.word	0x000ffc00
 8045ef8:	3ff00000 	.word	0x3ff00000

08045efc <PDM_Filter_setConfig>:
 8045efc:	4b66      	ldr	r3, [pc, #408]	; (8046098 <PDM_Filter_setConfig+0x19c>)
 8045efe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8045f00:	429a      	cmp	r2, r3
 8045f02:	d001      	beq.n	8045f08 <PDM_Filter_setConfig+0xc>
 8045f04:	2004      	movs	r0, #4
 8045f06:	4770      	bx	lr
 8045f08:	b530      	push	{r4, r5, lr}
 8045f0a:	880a      	ldrh	r2, [r1, #0]
 8045f0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8045f0e:	ed2d 8b04 	vpush	{d8-d9}
 8045f12:	4604      	mov	r4, r0
 8045f14:	460d      	mov	r5, r1
 8045f16:	1e51      	subs	r1, r2, #1
 8045f18:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8045f1c:	2906      	cmp	r1, #6
 8045f1e:	b083      	sub	sp, #12
 8045f20:	6420      	str	r0, [r4, #64]	; 0x40
 8045f22:	d91a      	bls.n	8045f5a <PDM_Filter_setConfig+0x5e>
 8045f24:	2008      	movs	r0, #8
 8045f26:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8045f2a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8045f2e:	4299      	cmp	r1, r3
 8045f30:	d07e      	beq.n	8046030 <PDM_Filter_setConfig+0x134>
 8045f32:	f113 0f0c 	cmn.w	r3, #12
 8045f36:	da2a      	bge.n	8045f8e <PDM_Filter_setConfig+0x92>
 8045f38:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8045f3c:	3040      	adds	r0, #64	; 0x40
 8045f3e:	80ab      	strh	r3, [r5, #4]
 8045f40:	8622      	strh	r2, [r4, #48]	; 0x30
 8045f42:	886b      	ldrh	r3, [r5, #2]
 8045f44:	8663      	strh	r3, [r4, #50]	; 0x32
 8045f46:	b920      	cbnz	r0, 8045f52 <PDM_Filter_setConfig+0x56>
 8045f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8045f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8045f4e:	6423      	str	r3, [r4, #64]	; 0x40
 8045f50:	2000      	movs	r0, #0
 8045f52:	b003      	add	sp, #12
 8045f54:	ecbd 8b04 	vpop	{d8-d9}
 8045f58:	bd30      	pop	{r4, r5, pc}
 8045f5a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8045f5c:	4291      	cmp	r1, r2
 8045f5e:	d06c      	beq.n	804603a <PDM_Filter_setConfig+0x13e>
 8045f60:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8045f64:	f023 0301 	bic.w	r3, r3, #1
 8045f68:	4313      	orrs	r3, r2
 8045f6a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8045f6e:	6423      	str	r3, [r4, #64]	; 0x40
 8045f70:	2970      	cmp	r1, #112	; 0x70
 8045f72:	f003 030f 	and.w	r3, r3, #15
 8045f76:	f103 33ff 	add.w	r3, r3, #4294967295
 8045f7a:	d066      	beq.n	804604a <PDM_Filter_setConfig+0x14e>
 8045f7c:	2b06      	cmp	r3, #6
 8045f7e:	f200 8089 	bhi.w	8046094 <PDM_Filter_setConfig+0x198>
 8045f82:	e8df f003 	tbb	[pc, r3]
 8045f86:	4f52      	.short	0x4f52
 8045f88:	3d43494c 	.word	0x3d43494c
 8045f8c:	46          	.byte	0x46
 8045f8d:	00          	.byte	0x00
 8045f8e:	2b33      	cmp	r3, #51	; 0x33
 8045f90:	dc32      	bgt.n	8045ff8 <PDM_Filter_setConfig+0xfc>
 8045f92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8045f94:	f002 020f 	and.w	r2, r2, #15
 8045f98:	3a01      	subs	r2, #1
 8045f9a:	2a06      	cmp	r2, #6
 8045f9c:	d872      	bhi.n	8046084 <PDM_Filter_setConfig+0x188>
 8045f9e:	493f      	ldr	r1, [pc, #252]	; (804609c <PDM_Filter_setConfig+0x1a0>)
 8045fa0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8045fa4:	ed92 9a00 	vldr	s18, [r2]
 8045fa8:	ed92 8a07 	vldr	s16, [r2, #28]
 8045fac:	9001      	str	r0, [sp, #4]
 8045fae:	ee07 3a90 	vmov	s15, r3
 8045fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8045fb6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8045fba:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8045fbe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8045fc2:	f000 f93d 	bl	8046240 <powf>
 8045fc6:	eddf 0a36 	vldr	s1, [pc, #216]	; 80460a0 <PDM_Filter_setConfig+0x1a4>
 8045fca:	eef0 8a40 	vmov.f32	s17, s0
 8045fce:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8045fd2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8045fd6:	f000 f933 	bl	8046240 <powf>
 8045fda:	ee28 8a28 	vmul.f32	s16, s16, s17
 8045fde:	ee28 0a00 	vmul.f32	s0, s16, s0
 8045fe2:	f000 f909 	bl	80461f8 <roundf>
 8045fe6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8045fea:	88ab      	ldrh	r3, [r5, #4]
 8045fec:	882a      	ldrh	r2, [r5, #0]
 8045fee:	9801      	ldr	r0, [sp, #4]
 8045ff0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8045ff4:	8723      	strh	r3, [r4, #56]	; 0x38
 8045ff6:	e7a3      	b.n	8045f40 <PDM_Filter_setConfig+0x44>
 8045ff8:	2333      	movs	r3, #51	; 0x33
 8045ffa:	3040      	adds	r0, #64	; 0x40
 8045ffc:	80ab      	strh	r3, [r5, #4]
 8045ffe:	e79f      	b.n	8045f40 <PDM_Filter_setConfig+0x44>
 8046000:	4b28      	ldr	r3, [pc, #160]	; (80460a4 <PDM_Filter_setConfig+0x1a8>)
 8046002:	64a3      	str	r3, [r4, #72]	; 0x48
 8046004:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8046008:	2000      	movs	r0, #0
 804600a:	e792      	b.n	8045f32 <PDM_Filter_setConfig+0x36>
 804600c:	4b26      	ldr	r3, [pc, #152]	; (80460a8 <PDM_Filter_setConfig+0x1ac>)
 804600e:	64a3      	str	r3, [r4, #72]	; 0x48
 8046010:	e7f8      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046012:	4b26      	ldr	r3, [pc, #152]	; (80460ac <PDM_Filter_setConfig+0x1b0>)
 8046014:	64a3      	str	r3, [r4, #72]	; 0x48
 8046016:	e7f5      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046018:	4b25      	ldr	r3, [pc, #148]	; (80460b0 <PDM_Filter_setConfig+0x1b4>)
 804601a:	64a3      	str	r3, [r4, #72]	; 0x48
 804601c:	e7f2      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 804601e:	4b25      	ldr	r3, [pc, #148]	; (80460b4 <PDM_Filter_setConfig+0x1b8>)
 8046020:	64a3      	str	r3, [r4, #72]	; 0x48
 8046022:	e7ef      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046024:	4b24      	ldr	r3, [pc, #144]	; (80460b8 <PDM_Filter_setConfig+0x1bc>)
 8046026:	64a3      	str	r3, [r4, #72]	; 0x48
 8046028:	e7ec      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 804602a:	4b24      	ldr	r3, [pc, #144]	; (80460bc <PDM_Filter_setConfig+0x1c0>)
 804602c:	64a3      	str	r3, [r4, #72]	; 0x48
 804602e:	e7e9      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046030:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8046032:	4291      	cmp	r1, r2
 8046034:	f47f af7d 	bne.w	8045f32 <PDM_Filter_setConfig+0x36>
 8046038:	e783      	b.n	8045f42 <PDM_Filter_setConfig+0x46>
 804603a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 804603e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8046042:	4299      	cmp	r1, r3
 8046044:	d023      	beq.n	804608e <PDM_Filter_setConfig+0x192>
 8046046:	2000      	movs	r0, #0
 8046048:	e773      	b.n	8045f32 <PDM_Filter_setConfig+0x36>
 804604a:	2b06      	cmp	r3, #6
 804604c:	d822      	bhi.n	8046094 <PDM_Filter_setConfig+0x198>
 804604e:	e8df f003 	tbb	[pc, r3]
 8046052:	1316      	.short	0x1316
 8046054:	070a0d10 	.word	0x070a0d10
 8046058:	04          	.byte	0x04
 8046059:	00          	.byte	0x00
 804605a:	4b19      	ldr	r3, [pc, #100]	; (80460c0 <PDM_Filter_setConfig+0x1c4>)
 804605c:	64a3      	str	r3, [r4, #72]	; 0x48
 804605e:	e7d1      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046060:	4b18      	ldr	r3, [pc, #96]	; (80460c4 <PDM_Filter_setConfig+0x1c8>)
 8046062:	64a3      	str	r3, [r4, #72]	; 0x48
 8046064:	e7ce      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046066:	4b18      	ldr	r3, [pc, #96]	; (80460c8 <PDM_Filter_setConfig+0x1cc>)
 8046068:	64a3      	str	r3, [r4, #72]	; 0x48
 804606a:	e7cb      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 804606c:	4b17      	ldr	r3, [pc, #92]	; (80460cc <PDM_Filter_setConfig+0x1d0>)
 804606e:	64a3      	str	r3, [r4, #72]	; 0x48
 8046070:	e7c8      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046072:	4b17      	ldr	r3, [pc, #92]	; (80460d0 <PDM_Filter_setConfig+0x1d4>)
 8046074:	64a3      	str	r3, [r4, #72]	; 0x48
 8046076:	e7c5      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046078:	4b16      	ldr	r3, [pc, #88]	; (80460d4 <PDM_Filter_setConfig+0x1d8>)
 804607a:	64a3      	str	r3, [r4, #72]	; 0x48
 804607c:	e7c2      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 804607e:	4b16      	ldr	r3, [pc, #88]	; (80460d8 <PDM_Filter_setConfig+0x1dc>)
 8046080:	64a3      	str	r3, [r4, #72]	; 0x48
 8046082:	e7bf      	b.n	8046004 <PDM_Filter_setConfig+0x108>
 8046084:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80460dc <PDM_Filter_setConfig+0x1e0>
 8046088:	eeb0 9a48 	vmov.f32	s18, s16
 804608c:	e78e      	b.n	8045fac <PDM_Filter_setConfig+0xb0>
 804608e:	886b      	ldrh	r3, [r5, #2]
 8046090:	8663      	strh	r3, [r4, #50]	; 0x32
 8046092:	e759      	b.n	8045f48 <PDM_Filter_setConfig+0x4c>
 8046094:	2000      	movs	r0, #0
 8046096:	e746      	b.n	8045f26 <PDM_Filter_setConfig+0x2a>
 8046098:	b5e8b5cd 	.word	0xb5e8b5cd
 804609c:	08046aec 	.word	0x08046aec
 80460a0:	42000000 	.word	0x42000000
 80460a4:	08044469 	.word	0x08044469
 80460a8:	08044349 	.word	0x08044349
 80460ac:	080445f9 	.word	0x080445f9
 80460b0:	08044e3d 	.word	0x08044e3d
 80460b4:	08044b9d 	.word	0x08044b9d
 80460b8:	0804497d 	.word	0x0804497d
 80460bc:	08044791 	.word	0x08044791
 80460c0:	08045449 	.word	0x08045449
 80460c4:	08045311 	.word	0x08045311
 80460c8:	0804522d 	.word	0x0804522d
 80460cc:	08045ac5 	.word	0x08045ac5
 80460d0:	080458b1 	.word	0x080458b1
 80460d4:	080456f9 	.word	0x080456f9
 80460d8:	0804558d 	.word	0x0804558d
 80460dc:	00000000 	.word	0x00000000

080460e0 <PDM_Filter>:
 80460e0:	b410      	push	{r4}
 80460e2:	4b0c      	ldr	r3, [pc, #48]	; (8046114 <PDM_Filter+0x34>)
 80460e4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80460e6:	429c      	cmp	r4, r3
 80460e8:	d003      	beq.n	80460f2 <PDM_Filter+0x12>
 80460ea:	2004      	movs	r0, #4
 80460ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80460f0:	4770      	bx	lr
 80460f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80460f4:	05dc      	lsls	r4, r3, #23
 80460f6:	d407      	bmi.n	8046108 <PDM_Filter+0x28>
 80460f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80460fc:	bf14      	ite	ne
 80460fe:	2020      	movne	r0, #32
 8046100:	2030      	moveq	r0, #48	; 0x30
 8046102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8046106:	4770      	bx	lr
 8046108:	6c93      	ldr	r3, [r2, #72]	; 0x48
 804610a:	f85d 4b04 	ldr.w	r4, [sp], #4
 804610e:	320c      	adds	r2, #12
 8046110:	4718      	bx	r3
 8046112:	bf00      	nop
 8046114:	b5e8b5cd 	.word	0xb5e8b5cd

08046118 <CRC_Lock>:
 8046118:	4a17      	ldr	r2, [pc, #92]	; (8046178 <CRC_Lock+0x60>)
 804611a:	6813      	ldr	r3, [r2, #0]
 804611c:	b410      	push	{r4}
 804611e:	f023 0301 	bic.w	r3, r3, #1
 8046122:	4c16      	ldr	r4, [pc, #88]	; (804617c <CRC_Lock+0x64>)
 8046124:	6013      	str	r3, [r2, #0]
 8046126:	6823      	ldr	r3, [r4, #0]
 8046128:	b933      	cbnz	r3, 8046138 <CRC_Lock+0x20>
 804612a:	4b15      	ldr	r3, [pc, #84]	; (8046180 <CRC_Lock+0x68>)
 804612c:	681b      	ldr	r3, [r3, #0]
 804612e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046132:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8046136:	d00f      	beq.n	8046158 <CRC_Lock+0x40>
 8046138:	4a12      	ldr	r2, [pc, #72]	; (8046184 <CRC_Lock+0x6c>)
 804613a:	2301      	movs	r3, #1
 804613c:	6013      	str	r3, [r2, #0]
 804613e:	6813      	ldr	r3, [r2, #0]
 8046140:	2b00      	cmp	r3, #0
 8046142:	d1fc      	bne.n	804613e <CRC_Lock+0x26>
 8046144:	4b10      	ldr	r3, [pc, #64]	; (8046188 <CRC_Lock+0x70>)
 8046146:	f85d 4b04 	ldr.w	r4, [sp], #4
 804614a:	6018      	str	r0, [r3, #0]
 804614c:	6818      	ldr	r0, [r3, #0]
 804614e:	1a08      	subs	r0, r1, r0
 8046150:	fab0 f080 	clz	r0, r0
 8046154:	0940      	lsrs	r0, r0, #5
 8046156:	4770      	bx	lr
 8046158:	4a0c      	ldr	r2, [pc, #48]	; (804618c <CRC_Lock+0x74>)
 804615a:	2301      	movs	r3, #1
 804615c:	6013      	str	r3, [r2, #0]
 804615e:	6813      	ldr	r3, [r2, #0]
 8046160:	2b00      	cmp	r3, #0
 8046162:	d1fc      	bne.n	804615e <CRC_Lock+0x46>
 8046164:	4b0a      	ldr	r3, [pc, #40]	; (8046190 <CRC_Lock+0x78>)
 8046166:	f85d 4b04 	ldr.w	r4, [sp], #4
 804616a:	6018      	str	r0, [r3, #0]
 804616c:	6818      	ldr	r0, [r3, #0]
 804616e:	1a40      	subs	r0, r0, r1
 8046170:	fab0 f080 	clz	r0, r0
 8046174:	0940      	lsrs	r0, r0, #5
 8046176:	4770      	bx	lr
 8046178:	e0002000 	.word	0xe0002000
 804617c:	e0042000 	.word	0xe0042000
 8046180:	5c001000 	.word	0x5c001000
 8046184:	40023008 	.word	0x40023008
 8046188:	40023000 	.word	0x40023000
 804618c:	58024c08 	.word	0x58024c08
 8046190:	58024c00 	.word	0x58024c00

08046194 <__errno>:
 8046194:	4b01      	ldr	r3, [pc, #4]	; (804619c <__errno+0x8>)
 8046196:	6818      	ldr	r0, [r3, #0]
 8046198:	4770      	bx	lr
 804619a:	bf00      	nop
 804619c:	20000588 	.word	0x20000588

080461a0 <__libc_init_array>:
 80461a0:	b570      	push	{r4, r5, r6, lr}
 80461a2:	4d0d      	ldr	r5, [pc, #52]	; (80461d8 <__libc_init_array+0x38>)
 80461a4:	4c0d      	ldr	r4, [pc, #52]	; (80461dc <__libc_init_array+0x3c>)
 80461a6:	1b64      	subs	r4, r4, r5
 80461a8:	10a4      	asrs	r4, r4, #2
 80461aa:	2600      	movs	r6, #0
 80461ac:	42a6      	cmp	r6, r4
 80461ae:	d109      	bne.n	80461c4 <__libc_init_array+0x24>
 80461b0:	4d0b      	ldr	r5, [pc, #44]	; (80461e0 <__libc_init_array+0x40>)
 80461b2:	4c0c      	ldr	r4, [pc, #48]	; (80461e4 <__libc_init_array+0x44>)
 80461b4:	f000 fc16 	bl	80469e4 <_init>
 80461b8:	1b64      	subs	r4, r4, r5
 80461ba:	10a4      	asrs	r4, r4, #2
 80461bc:	2600      	movs	r6, #0
 80461be:	42a6      	cmp	r6, r4
 80461c0:	d105      	bne.n	80461ce <__libc_init_array+0x2e>
 80461c2:	bd70      	pop	{r4, r5, r6, pc}
 80461c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80461c8:	4798      	blx	r3
 80461ca:	3601      	adds	r6, #1
 80461cc:	e7ee      	b.n	80461ac <__libc_init_array+0xc>
 80461ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80461d2:	4798      	blx	r3
 80461d4:	3601      	adds	r6, #1
 80461d6:	e7f2      	b.n	80461be <__libc_init_array+0x1e>
 80461d8:	08046b44 	.word	0x08046b44
 80461dc:	08046b44 	.word	0x08046b44
 80461e0:	08046b44 	.word	0x08046b44
 80461e4:	08046b48 	.word	0x08046b48

080461e8 <memset>:
 80461e8:	4402      	add	r2, r0
 80461ea:	4603      	mov	r3, r0
 80461ec:	4293      	cmp	r3, r2
 80461ee:	d100      	bne.n	80461f2 <memset+0xa>
 80461f0:	4770      	bx	lr
 80461f2:	f803 1b01 	strb.w	r1, [r3], #1
 80461f6:	e7f9      	b.n	80461ec <memset+0x4>

080461f8 <roundf>:
 80461f8:	ee10 0a10 	vmov	r0, s0
 80461fc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8046200:	3a7f      	subs	r2, #127	; 0x7f
 8046202:	2a16      	cmp	r2, #22
 8046204:	dc15      	bgt.n	8046232 <roundf+0x3a>
 8046206:	2a00      	cmp	r2, #0
 8046208:	da08      	bge.n	804621c <roundf+0x24>
 804620a:	3201      	adds	r2, #1
 804620c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8046210:	d101      	bne.n	8046216 <roundf+0x1e>
 8046212:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8046216:	ee00 3a10 	vmov	s0, r3
 804621a:	4770      	bx	lr
 804621c:	4907      	ldr	r1, [pc, #28]	; (804623c <roundf+0x44>)
 804621e:	4111      	asrs	r1, r2
 8046220:	4208      	tst	r0, r1
 8046222:	d0fa      	beq.n	804621a <roundf+0x22>
 8046224:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8046228:	4113      	asrs	r3, r2
 804622a:	4403      	add	r3, r0
 804622c:	ea23 0301 	bic.w	r3, r3, r1
 8046230:	e7f1      	b.n	8046216 <roundf+0x1e>
 8046232:	2a80      	cmp	r2, #128	; 0x80
 8046234:	d1f1      	bne.n	804621a <roundf+0x22>
 8046236:	ee30 0a00 	vadd.f32	s0, s0, s0
 804623a:	4770      	bx	lr
 804623c:	007fffff 	.word	0x007fffff

08046240 <powf>:
 8046240:	b508      	push	{r3, lr}
 8046242:	ed2d 8b04 	vpush	{d8-d9}
 8046246:	eeb0 8a60 	vmov.f32	s16, s1
 804624a:	eeb0 9a40 	vmov.f32	s18, s0
 804624e:	f000 f84f 	bl	80462f0 <__ieee754_powf>
 8046252:	eeb4 8a48 	vcmp.f32	s16, s16
 8046256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804625a:	eef0 8a40 	vmov.f32	s17, s0
 804625e:	d63e      	bvs.n	80462de <powf+0x9e>
 8046260:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8046264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8046268:	d112      	bne.n	8046290 <powf+0x50>
 804626a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 804626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8046272:	d039      	beq.n	80462e8 <powf+0xa8>
 8046274:	eeb0 0a48 	vmov.f32	s0, s16
 8046278:	f000 fb35 	bl	80468e6 <finitef>
 804627c:	b378      	cbz	r0, 80462de <powf+0x9e>
 804627e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8046282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8046286:	d52a      	bpl.n	80462de <powf+0x9e>
 8046288:	f7ff ff84 	bl	8046194 <__errno>
 804628c:	2322      	movs	r3, #34	; 0x22
 804628e:	e014      	b.n	80462ba <powf+0x7a>
 8046290:	f000 fb29 	bl	80468e6 <finitef>
 8046294:	b998      	cbnz	r0, 80462be <powf+0x7e>
 8046296:	eeb0 0a49 	vmov.f32	s0, s18
 804629a:	f000 fb24 	bl	80468e6 <finitef>
 804629e:	b170      	cbz	r0, 80462be <powf+0x7e>
 80462a0:	eeb0 0a48 	vmov.f32	s0, s16
 80462a4:	f000 fb1f 	bl	80468e6 <finitef>
 80462a8:	b148      	cbz	r0, 80462be <powf+0x7e>
 80462aa:	eef4 8a68 	vcmp.f32	s17, s17
 80462ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80462b2:	d7e9      	bvc.n	8046288 <powf+0x48>
 80462b4:	f7ff ff6e 	bl	8046194 <__errno>
 80462b8:	2321      	movs	r3, #33	; 0x21
 80462ba:	6003      	str	r3, [r0, #0]
 80462bc:	e00f      	b.n	80462de <powf+0x9e>
 80462be:	eef5 8a40 	vcmp.f32	s17, #0.0
 80462c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80462c6:	d10a      	bne.n	80462de <powf+0x9e>
 80462c8:	eeb0 0a49 	vmov.f32	s0, s18
 80462cc:	f000 fb0b 	bl	80468e6 <finitef>
 80462d0:	b128      	cbz	r0, 80462de <powf+0x9e>
 80462d2:	eeb0 0a48 	vmov.f32	s0, s16
 80462d6:	f000 fb06 	bl	80468e6 <finitef>
 80462da:	2800      	cmp	r0, #0
 80462dc:	d1d4      	bne.n	8046288 <powf+0x48>
 80462de:	eeb0 0a68 	vmov.f32	s0, s17
 80462e2:	ecbd 8b04 	vpop	{d8-d9}
 80462e6:	bd08      	pop	{r3, pc}
 80462e8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80462ec:	e7f7      	b.n	80462de <powf+0x9e>
	...

080462f0 <__ieee754_powf>:
 80462f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80462f4:	ee10 4a90 	vmov	r4, s1
 80462f8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80462fc:	ed2d 8b02 	vpush	{d8}
 8046300:	ee10 6a10 	vmov	r6, s0
 8046304:	eeb0 8a40 	vmov.f32	s16, s0
 8046308:	eef0 8a60 	vmov.f32	s17, s1
 804630c:	d10c      	bne.n	8046328 <__ieee754_powf+0x38>
 804630e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8046312:	0076      	lsls	r6, r6, #1
 8046314:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8046318:	f240 8296 	bls.w	8046848 <__ieee754_powf+0x558>
 804631c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8046320:	ecbd 8b02 	vpop	{d8}
 8046324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8046328:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 804632c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8046330:	dcf4      	bgt.n	804631c <__ieee754_powf+0x2c>
 8046332:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8046336:	dd08      	ble.n	804634a <__ieee754_powf+0x5a>
 8046338:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 804633c:	d1ee      	bne.n	804631c <__ieee754_powf+0x2c>
 804633e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8046342:	0064      	lsls	r4, r4, #1
 8046344:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8046348:	e7e6      	b.n	8046318 <__ieee754_powf+0x28>
 804634a:	2e00      	cmp	r6, #0
 804634c:	da20      	bge.n	8046390 <__ieee754_powf+0xa0>
 804634e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8046352:	da2d      	bge.n	80463b0 <__ieee754_powf+0xc0>
 8046354:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8046358:	f2c0 827f 	blt.w	804685a <__ieee754_powf+0x56a>
 804635c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8046360:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8046364:	fa48 f703 	asr.w	r7, r8, r3
 8046368:	fa07 f303 	lsl.w	r3, r7, r3
 804636c:	4543      	cmp	r3, r8
 804636e:	f040 8274 	bne.w	804685a <__ieee754_powf+0x56a>
 8046372:	f007 0701 	and.w	r7, r7, #1
 8046376:	f1c7 0702 	rsb	r7, r7, #2
 804637a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 804637e:	d11f      	bne.n	80463c0 <__ieee754_powf+0xd0>
 8046380:	2c00      	cmp	r4, #0
 8046382:	f280 8267 	bge.w	8046854 <__ieee754_powf+0x564>
 8046386:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 804638a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 804638e:	e7c7      	b.n	8046320 <__ieee754_powf+0x30>
 8046390:	2700      	movs	r7, #0
 8046392:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8046396:	d1f0      	bne.n	804637a <__ieee754_powf+0x8a>
 8046398:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 804639c:	f000 8254 	beq.w	8046848 <__ieee754_powf+0x558>
 80463a0:	dd08      	ble.n	80463b4 <__ieee754_powf+0xc4>
 80463a2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80466ac <__ieee754_powf+0x3bc>
 80463a6:	2c00      	cmp	r4, #0
 80463a8:	bfa8      	it	ge
 80463aa:	eeb0 0a68 	vmovge.f32	s0, s17
 80463ae:	e7b7      	b.n	8046320 <__ieee754_powf+0x30>
 80463b0:	2702      	movs	r7, #2
 80463b2:	e7ee      	b.n	8046392 <__ieee754_powf+0xa2>
 80463b4:	2c00      	cmp	r4, #0
 80463b6:	f280 824a 	bge.w	804684e <__ieee754_powf+0x55e>
 80463ba:	eeb1 0a68 	vneg.f32	s0, s17
 80463be:	e7af      	b.n	8046320 <__ieee754_powf+0x30>
 80463c0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80463c4:	d102      	bne.n	80463cc <__ieee754_powf+0xdc>
 80463c6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80463ca:	e7a9      	b.n	8046320 <__ieee754_powf+0x30>
 80463cc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80463d0:	eeb0 0a48 	vmov.f32	s0, s16
 80463d4:	d107      	bne.n	80463e6 <__ieee754_powf+0xf6>
 80463d6:	2e00      	cmp	r6, #0
 80463d8:	db05      	blt.n	80463e6 <__ieee754_powf+0xf6>
 80463da:	ecbd 8b02 	vpop	{d8}
 80463de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80463e2:	f000 ba53 	b.w	804688c <__ieee754_sqrtf>
 80463e6:	f000 fa77 	bl	80468d8 <fabsf>
 80463ea:	b125      	cbz	r5, 80463f6 <__ieee754_powf+0x106>
 80463ec:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80463f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80463f4:	d116      	bne.n	8046424 <__ieee754_powf+0x134>
 80463f6:	2c00      	cmp	r4, #0
 80463f8:	bfbc      	itt	lt
 80463fa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80463fe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8046402:	2e00      	cmp	r6, #0
 8046404:	da8c      	bge.n	8046320 <__ieee754_powf+0x30>
 8046406:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 804640a:	ea55 0307 	orrs.w	r3, r5, r7
 804640e:	d104      	bne.n	804641a <__ieee754_powf+0x12a>
 8046410:	ee70 7a40 	vsub.f32	s15, s0, s0
 8046414:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8046418:	e782      	b.n	8046320 <__ieee754_powf+0x30>
 804641a:	2f01      	cmp	r7, #1
 804641c:	d180      	bne.n	8046320 <__ieee754_powf+0x30>
 804641e:	eeb1 0a40 	vneg.f32	s0, s0
 8046422:	e77d      	b.n	8046320 <__ieee754_powf+0x30>
 8046424:	0ff0      	lsrs	r0, r6, #31
 8046426:	3801      	subs	r0, #1
 8046428:	ea57 0300 	orrs.w	r3, r7, r0
 804642c:	d104      	bne.n	8046438 <__ieee754_powf+0x148>
 804642e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8046432:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8046436:	e773      	b.n	8046320 <__ieee754_powf+0x30>
 8046438:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 804643c:	dd74      	ble.n	8046528 <__ieee754_powf+0x238>
 804643e:	4b9c      	ldr	r3, [pc, #624]	; (80466b0 <__ieee754_powf+0x3c0>)
 8046440:	429d      	cmp	r5, r3
 8046442:	dc08      	bgt.n	8046456 <__ieee754_powf+0x166>
 8046444:	2c00      	cmp	r4, #0
 8046446:	da0b      	bge.n	8046460 <__ieee754_powf+0x170>
 8046448:	2000      	movs	r0, #0
 804644a:	ecbd 8b02 	vpop	{d8}
 804644e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8046452:	f000 ba3b 	b.w	80468cc <__math_oflowf>
 8046456:	4b97      	ldr	r3, [pc, #604]	; (80466b4 <__ieee754_powf+0x3c4>)
 8046458:	429d      	cmp	r5, r3
 804645a:	dd08      	ble.n	804646e <__ieee754_powf+0x17e>
 804645c:	2c00      	cmp	r4, #0
 804645e:	dcf3      	bgt.n	8046448 <__ieee754_powf+0x158>
 8046460:	2000      	movs	r0, #0
 8046462:	ecbd 8b02 	vpop	{d8}
 8046466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804646a:	f000 ba29 	b.w	80468c0 <__math_uflowf>
 804646e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8046472:	ee30 0a67 	vsub.f32	s0, s0, s15
 8046476:	eddf 6a90 	vldr	s13, [pc, #576]	; 80466b8 <__ieee754_powf+0x3c8>
 804647a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 804647e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8046482:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8046486:	eee6 7ac0 	vfms.f32	s15, s13, s0
 804648a:	ee20 7a00 	vmul.f32	s14, s0, s0
 804648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8046492:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80466bc <__ieee754_powf+0x3cc>
 8046496:	ee67 7a67 	vnmul.f32	s15, s14, s15
 804649a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80466c0 <__ieee754_powf+0x3d0>
 804649e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80464a2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80466c4 <__ieee754_powf+0x3d4>
 80464a6:	eef0 6a67 	vmov.f32	s13, s15
 80464aa:	eee0 6a07 	vfma.f32	s13, s0, s14
 80464ae:	ee16 3a90 	vmov	r3, s13
 80464b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80464b6:	f023 030f 	bic.w	r3, r3, #15
 80464ba:	ee00 3a90 	vmov	s1, r3
 80464be:	eee0 0a47 	vfms.f32	s1, s0, s14
 80464c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80464c6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80464ca:	f024 040f 	bic.w	r4, r4, #15
 80464ce:	ee07 4a10 	vmov	s14, r4
 80464d2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80464d6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80464da:	ee07 3a90 	vmov	s15, r3
 80464de:	eee7 0a27 	vfma.f32	s1, s14, s15
 80464e2:	3f01      	subs	r7, #1
 80464e4:	ea57 0200 	orrs.w	r2, r7, r0
 80464e8:	ee07 4a10 	vmov	s14, r4
 80464ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80464f0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80464f4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80464f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80464fc:	ee17 4a10 	vmov	r4, s14
 8046500:	bf08      	it	eq
 8046502:	eeb0 8a40 	vmoveq.f32	s16, s0
 8046506:	2c00      	cmp	r4, #0
 8046508:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 804650c:	f340 817e 	ble.w	804680c <__ieee754_powf+0x51c>
 8046510:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8046514:	f340 80f8 	ble.w	8046708 <__ieee754_powf+0x418>
 8046518:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 804651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8046520:	bf4c      	ite	mi
 8046522:	2001      	movmi	r0, #1
 8046524:	2000      	movpl	r0, #0
 8046526:	e790      	b.n	804644a <__ieee754_powf+0x15a>
 8046528:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 804652c:	bf01      	itttt	eq
 804652e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80466c8 <__ieee754_powf+0x3d8>
 8046532:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8046536:	f06f 0217 	mvneq.w	r2, #23
 804653a:	ee17 5a90 	vmoveq	r5, s15
 804653e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8046542:	bf18      	it	ne
 8046544:	2200      	movne	r2, #0
 8046546:	3b7f      	subs	r3, #127	; 0x7f
 8046548:	4413      	add	r3, r2
 804654a:	4a60      	ldr	r2, [pc, #384]	; (80466cc <__ieee754_powf+0x3dc>)
 804654c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8046550:	4295      	cmp	r5, r2
 8046552:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8046556:	dd06      	ble.n	8046566 <__ieee754_powf+0x276>
 8046558:	4a5d      	ldr	r2, [pc, #372]	; (80466d0 <__ieee754_powf+0x3e0>)
 804655a:	4295      	cmp	r5, r2
 804655c:	f340 80a4 	ble.w	80466a8 <__ieee754_powf+0x3b8>
 8046560:	3301      	adds	r3, #1
 8046562:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8046566:	2500      	movs	r5, #0
 8046568:	4a5a      	ldr	r2, [pc, #360]	; (80466d4 <__ieee754_powf+0x3e4>)
 804656a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 804656e:	ee07 1a90 	vmov	s15, r1
 8046572:	ed92 7a00 	vldr	s14, [r2]
 8046576:	4a58      	ldr	r2, [pc, #352]	; (80466d8 <__ieee754_powf+0x3e8>)
 8046578:	ee37 6a27 	vadd.f32	s12, s14, s15
 804657c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8046580:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8046584:	1049      	asrs	r1, r1, #1
 8046586:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 804658a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 804658e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8046592:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8046596:	ee06 1a10 	vmov	s12, r1
 804659a:	ee65 4a26 	vmul.f32	s9, s10, s13
 804659e:	ee36 7a47 	vsub.f32	s14, s12, s14
 80465a2:	ee14 6a90 	vmov	r6, s9
 80465a6:	4016      	ands	r6, r2
 80465a8:	ee05 6a90 	vmov	s11, r6
 80465ac:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80465b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80465b4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80466dc <__ieee754_powf+0x3ec>
 80465b8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80465bc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80465c0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80465c4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80466e0 <__ieee754_powf+0x3f0>
 80465c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80465cc:	eddf 6a45 	vldr	s13, [pc, #276]	; 80466e4 <__ieee754_powf+0x3f4>
 80465d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80465d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80466b8 <__ieee754_powf+0x3c8>
 80465d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80465dc:	eddf 6a42 	vldr	s13, [pc, #264]	; 80466e8 <__ieee754_powf+0x3f8>
 80465e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80465e4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80466ec <__ieee754_powf+0x3fc>
 80465e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80465ec:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80465f0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80465f4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80465f8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80465fc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8046600:	eef0 7a45 	vmov.f32	s15, s10
 8046604:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8046608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804660c:	ee17 1a90 	vmov	r1, s15
 8046610:	4011      	ands	r1, r2
 8046612:	ee07 1a90 	vmov	s15, r1
 8046616:	ee37 7ac5 	vsub.f32	s14, s15, s10
 804661a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 804661e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8046622:	ee27 7a24 	vmul.f32	s14, s14, s9
 8046626:	eea6 7a27 	vfma.f32	s14, s12, s15
 804662a:	eeb0 6a47 	vmov.f32	s12, s14
 804662e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8046632:	ee16 1a10 	vmov	r1, s12
 8046636:	4011      	ands	r1, r2
 8046638:	ee06 1a90 	vmov	s13, r1
 804663c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8046640:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80466f0 <__ieee754_powf+0x400>
 8046644:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80466f4 <__ieee754_powf+0x404>
 8046648:	ee37 7a66 	vsub.f32	s14, s14, s13
 804664c:	ee06 1a10 	vmov	s12, r1
 8046650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8046654:	eddf 7a28 	vldr	s15, [pc, #160]	; 80466f8 <__ieee754_powf+0x408>
 8046658:	4928      	ldr	r1, [pc, #160]	; (80466fc <__ieee754_powf+0x40c>)
 804665a:	eea6 7a27 	vfma.f32	s14, s12, s15
 804665e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8046662:	edd1 7a00 	vldr	s15, [r1]
 8046666:	ee37 7a27 	vadd.f32	s14, s14, s15
 804666a:	ee07 3a90 	vmov	s15, r3
 804666e:	4b24      	ldr	r3, [pc, #144]	; (8046700 <__ieee754_powf+0x410>)
 8046670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8046674:	eef0 7a47 	vmov.f32	s15, s14
 8046678:	eee6 7a25 	vfma.f32	s15, s12, s11
 804667c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8046680:	edd5 0a00 	vldr	s1, [r5]
 8046684:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8046688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804668c:	ee17 3a90 	vmov	r3, s15
 8046690:	4013      	ands	r3, r2
 8046692:	ee07 3a90 	vmov	s15, r3
 8046696:	ee77 6ae6 	vsub.f32	s13, s15, s13
 804669a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 804669e:	eee6 6a65 	vfms.f32	s13, s12, s11
 80466a2:	ee77 7a66 	vsub.f32	s15, s14, s13
 80466a6:	e70e      	b.n	80464c6 <__ieee754_powf+0x1d6>
 80466a8:	2501      	movs	r5, #1
 80466aa:	e75d      	b.n	8046568 <__ieee754_powf+0x278>
 80466ac:	00000000 	.word	0x00000000
 80466b0:	3f7ffff3 	.word	0x3f7ffff3
 80466b4:	3f800007 	.word	0x3f800007
 80466b8:	3eaaaaab 	.word	0x3eaaaaab
 80466bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80466c0:	36eca570 	.word	0x36eca570
 80466c4:	3fb8aa00 	.word	0x3fb8aa00
 80466c8:	4b800000 	.word	0x4b800000
 80466cc:	001cc471 	.word	0x001cc471
 80466d0:	005db3d6 	.word	0x005db3d6
 80466d4:	08046b24 	.word	0x08046b24
 80466d8:	fffff000 	.word	0xfffff000
 80466dc:	3e6c3255 	.word	0x3e6c3255
 80466e0:	3e53f142 	.word	0x3e53f142
 80466e4:	3e8ba305 	.word	0x3e8ba305
 80466e8:	3edb6db7 	.word	0x3edb6db7
 80466ec:	3f19999a 	.word	0x3f19999a
 80466f0:	3f76384f 	.word	0x3f76384f
 80466f4:	3f763800 	.word	0x3f763800
 80466f8:	369dc3a0 	.word	0x369dc3a0
 80466fc:	08046b34 	.word	0x08046b34
 8046700:	08046b2c 	.word	0x08046b2c
 8046704:	3338aa3c 	.word	0x3338aa3c
 8046708:	f040 8095 	bne.w	8046836 <__ieee754_powf+0x546>
 804670c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8046704 <__ieee754_powf+0x414>
 8046710:	ee37 7a67 	vsub.f32	s14, s14, s15
 8046714:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8046718:	eef4 6ac7 	vcmpe.f32	s13, s14
 804671c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8046720:	f73f aefa 	bgt.w	8046518 <__ieee754_powf+0x228>
 8046724:	15db      	asrs	r3, r3, #23
 8046726:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 804672a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 804672e:	4103      	asrs	r3, r0
 8046730:	4423      	add	r3, r4
 8046732:	494b      	ldr	r1, [pc, #300]	; (8046860 <__ieee754_powf+0x570>)
 8046734:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8046738:	3a7f      	subs	r2, #127	; 0x7f
 804673a:	4111      	asrs	r1, r2
 804673c:	ea23 0101 	bic.w	r1, r3, r1
 8046740:	ee07 1a10 	vmov	s14, r1
 8046744:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8046748:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 804674c:	f1c2 0217 	rsb	r2, r2, #23
 8046750:	4110      	asrs	r0, r2
 8046752:	2c00      	cmp	r4, #0
 8046754:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8046758:	bfb8      	it	lt
 804675a:	4240      	neglt	r0, r0
 804675c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8046760:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8046864 <__ieee754_powf+0x574>
 8046764:	eddf 6a40 	vldr	s13, [pc, #256]	; 8046868 <__ieee754_powf+0x578>
 8046768:	ee17 3a10 	vmov	r3, s14
 804676c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8046770:	f023 030f 	bic.w	r3, r3, #15
 8046774:	ee07 3a10 	vmov	s14, r3
 8046778:	ee77 7a67 	vsub.f32	s15, s14, s15
 804677c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8046780:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8046784:	eddf 7a39 	vldr	s15, [pc, #228]	; 804686c <__ieee754_powf+0x57c>
 8046788:	eea0 0aa7 	vfma.f32	s0, s1, s15
 804678c:	eef0 7a40 	vmov.f32	s15, s0
 8046790:	eee7 7a26 	vfma.f32	s15, s14, s13
 8046794:	eeb0 6a67 	vmov.f32	s12, s15
 8046798:	eea7 6a66 	vfms.f32	s12, s14, s13
 804679c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80467a0:	ee30 0a46 	vsub.f32	s0, s0, s12
 80467a4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8046870 <__ieee754_powf+0x580>
 80467a8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8046874 <__ieee754_powf+0x584>
 80467ac:	eee7 6a06 	vfma.f32	s13, s14, s12
 80467b0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8046878 <__ieee754_powf+0x588>
 80467b4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80467b8:	eddf 6a30 	vldr	s13, [pc, #192]	; 804687c <__ieee754_powf+0x58c>
 80467bc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80467c0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8046880 <__ieee754_powf+0x590>
 80467c4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80467c8:	eef0 6a67 	vmov.f32	s13, s15
 80467cc:	eee6 6a47 	vfms.f32	s13, s12, s14
 80467d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80467d4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80467d8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80467dc:	eea7 0a80 	vfma.f32	s0, s15, s0
 80467e0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80467e4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80467e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80467ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80467f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80467f4:	ee10 3a10 	vmov	r3, s0
 80467f8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80467fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8046800:	da1f      	bge.n	8046842 <__ieee754_powf+0x552>
 8046802:	f000 f87d 	bl	8046900 <scalbnf>
 8046806:	ee20 0a08 	vmul.f32	s0, s0, s16
 804680a:	e589      	b.n	8046320 <__ieee754_powf+0x30>
 804680c:	4a1d      	ldr	r2, [pc, #116]	; (8046884 <__ieee754_powf+0x594>)
 804680e:	4293      	cmp	r3, r2
 8046810:	dd07      	ble.n	8046822 <__ieee754_powf+0x532>
 8046812:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8046816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804681a:	bf4c      	ite	mi
 804681c:	2001      	movmi	r0, #1
 804681e:	2000      	movpl	r0, #0
 8046820:	e61f      	b.n	8046462 <__ieee754_powf+0x172>
 8046822:	d108      	bne.n	8046836 <__ieee754_powf+0x546>
 8046824:	ee37 7a67 	vsub.f32	s14, s14, s15
 8046828:	eeb4 7ae0 	vcmpe.f32	s14, s1
 804682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8046830:	f6ff af78 	blt.w	8046724 <__ieee754_powf+0x434>
 8046834:	e7ed      	b.n	8046812 <__ieee754_powf+0x522>
 8046836:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 804683a:	f73f af73 	bgt.w	8046724 <__ieee754_powf+0x434>
 804683e:	2000      	movs	r0, #0
 8046840:	e78c      	b.n	804675c <__ieee754_powf+0x46c>
 8046842:	ee00 3a10 	vmov	s0, r3
 8046846:	e7de      	b.n	8046806 <__ieee754_powf+0x516>
 8046848:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 804684c:	e568      	b.n	8046320 <__ieee754_powf+0x30>
 804684e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8046888 <__ieee754_powf+0x598>
 8046852:	e565      	b.n	8046320 <__ieee754_powf+0x30>
 8046854:	eeb0 0a48 	vmov.f32	s0, s16
 8046858:	e562      	b.n	8046320 <__ieee754_powf+0x30>
 804685a:	2700      	movs	r7, #0
 804685c:	e58d      	b.n	804637a <__ieee754_powf+0x8a>
 804685e:	bf00      	nop
 8046860:	007fffff 	.word	0x007fffff
 8046864:	35bfbe8c 	.word	0x35bfbe8c
 8046868:	3f317200 	.word	0x3f317200
 804686c:	3f317218 	.word	0x3f317218
 8046870:	b5ddea0e 	.word	0xb5ddea0e
 8046874:	3331bb4c 	.word	0x3331bb4c
 8046878:	388ab355 	.word	0x388ab355
 804687c:	bb360b61 	.word	0xbb360b61
 8046880:	3e2aaaab 	.word	0x3e2aaaab
 8046884:	43160000 	.word	0x43160000
 8046888:	00000000 	.word	0x00000000

0804688c <__ieee754_sqrtf>:
 804688c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8046890:	4770      	bx	lr

08046892 <with_errnof>:
 8046892:	b513      	push	{r0, r1, r4, lr}
 8046894:	4604      	mov	r4, r0
 8046896:	ed8d 0a01 	vstr	s0, [sp, #4]
 804689a:	f7ff fc7b 	bl	8046194 <__errno>
 804689e:	ed9d 0a01 	vldr	s0, [sp, #4]
 80468a2:	6004      	str	r4, [r0, #0]
 80468a4:	b002      	add	sp, #8
 80468a6:	bd10      	pop	{r4, pc}

080468a8 <xflowf>:
 80468a8:	b130      	cbz	r0, 80468b8 <xflowf+0x10>
 80468aa:	eef1 7a40 	vneg.f32	s15, s0
 80468ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 80468b2:	2022      	movs	r0, #34	; 0x22
 80468b4:	f7ff bfed 	b.w	8046892 <with_errnof>
 80468b8:	eef0 7a40 	vmov.f32	s15, s0
 80468bc:	e7f7      	b.n	80468ae <xflowf+0x6>
	...

080468c0 <__math_uflowf>:
 80468c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80468c8 <__math_uflowf+0x8>
 80468c4:	f7ff bff0 	b.w	80468a8 <xflowf>
 80468c8:	10000000 	.word	0x10000000

080468cc <__math_oflowf>:
 80468cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80468d4 <__math_oflowf+0x8>
 80468d0:	f7ff bfea 	b.w	80468a8 <xflowf>
 80468d4:	70000000 	.word	0x70000000

080468d8 <fabsf>:
 80468d8:	ee10 3a10 	vmov	r3, s0
 80468dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80468e0:	ee00 3a10 	vmov	s0, r3
 80468e4:	4770      	bx	lr

080468e6 <finitef>:
 80468e6:	b082      	sub	sp, #8
 80468e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80468ec:	9801      	ldr	r0, [sp, #4]
 80468ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80468f2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80468f6:	bfac      	ite	ge
 80468f8:	2000      	movge	r0, #0
 80468fa:	2001      	movlt	r0, #1
 80468fc:	b002      	add	sp, #8
 80468fe:	4770      	bx	lr

08046900 <scalbnf>:
 8046900:	ee10 3a10 	vmov	r3, s0
 8046904:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8046908:	d025      	beq.n	8046956 <scalbnf+0x56>
 804690a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 804690e:	d302      	bcc.n	8046916 <scalbnf+0x16>
 8046910:	ee30 0a00 	vadd.f32	s0, s0, s0
 8046914:	4770      	bx	lr
 8046916:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 804691a:	d122      	bne.n	8046962 <scalbnf+0x62>
 804691c:	4b2a      	ldr	r3, [pc, #168]	; (80469c8 <scalbnf+0xc8>)
 804691e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80469cc <scalbnf+0xcc>
 8046922:	4298      	cmp	r0, r3
 8046924:	ee20 0a27 	vmul.f32	s0, s0, s15
 8046928:	db16      	blt.n	8046958 <scalbnf+0x58>
 804692a:	ee10 3a10 	vmov	r3, s0
 804692e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8046932:	3a19      	subs	r2, #25
 8046934:	4402      	add	r2, r0
 8046936:	2afe      	cmp	r2, #254	; 0xfe
 8046938:	dd15      	ble.n	8046966 <scalbnf+0x66>
 804693a:	ee10 3a10 	vmov	r3, s0
 804693e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80469d0 <scalbnf+0xd0>
 8046942:	eddf 6a24 	vldr	s13, [pc, #144]	; 80469d4 <scalbnf+0xd4>
 8046946:	2b00      	cmp	r3, #0
 8046948:	eeb0 7a67 	vmov.f32	s14, s15
 804694c:	bfb8      	it	lt
 804694e:	eef0 7a66 	vmovlt.f32	s15, s13
 8046952:	ee27 0a27 	vmul.f32	s0, s14, s15
 8046956:	4770      	bx	lr
 8046958:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80469d8 <scalbnf+0xd8>
 804695c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8046960:	4770      	bx	lr
 8046962:	0dd2      	lsrs	r2, r2, #23
 8046964:	e7e6      	b.n	8046934 <scalbnf+0x34>
 8046966:	2a00      	cmp	r2, #0
 8046968:	dd06      	ble.n	8046978 <scalbnf+0x78>
 804696a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804696e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8046972:	ee00 3a10 	vmov	s0, r3
 8046976:	4770      	bx	lr
 8046978:	f112 0f16 	cmn.w	r2, #22
 804697c:	da1a      	bge.n	80469b4 <scalbnf+0xb4>
 804697e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8046982:	4298      	cmp	r0, r3
 8046984:	ee10 3a10 	vmov	r3, s0
 8046988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804698c:	dd0a      	ble.n	80469a4 <scalbnf+0xa4>
 804698e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80469d0 <scalbnf+0xd0>
 8046992:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80469d4 <scalbnf+0xd4>
 8046996:	eef0 7a40 	vmov.f32	s15, s0
 804699a:	2b00      	cmp	r3, #0
 804699c:	bf18      	it	ne
 804699e:	eeb0 0a47 	vmovne.f32	s0, s14
 80469a2:	e7db      	b.n	804695c <scalbnf+0x5c>
 80469a4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80469d8 <scalbnf+0xd8>
 80469a8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80469dc <scalbnf+0xdc>
 80469ac:	eef0 7a40 	vmov.f32	s15, s0
 80469b0:	2b00      	cmp	r3, #0
 80469b2:	e7f3      	b.n	804699c <scalbnf+0x9c>
 80469b4:	3219      	adds	r2, #25
 80469b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80469ba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80469be:	eddf 7a08 	vldr	s15, [pc, #32]	; 80469e0 <scalbnf+0xe0>
 80469c2:	ee07 3a10 	vmov	s14, r3
 80469c6:	e7c4      	b.n	8046952 <scalbnf+0x52>
 80469c8:	ffff3cb0 	.word	0xffff3cb0
 80469cc:	4c000000 	.word	0x4c000000
 80469d0:	7149f2ca 	.word	0x7149f2ca
 80469d4:	f149f2ca 	.word	0xf149f2ca
 80469d8:	0da24260 	.word	0x0da24260
 80469dc:	8da24260 	.word	0x8da24260
 80469e0:	33000000 	.word	0x33000000

080469e4 <_init>:
 80469e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80469e6:	bf00      	nop
 80469e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80469ea:	bc08      	pop	{r3}
 80469ec:	469e      	mov	lr, r3
 80469ee:	4770      	bx	lr

080469f0 <_fini>:
 80469f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80469f2:	bf00      	nop
 80469f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80469f6:	bc08      	pop	{r3}
 80469f8:	469e      	mov	lr, r3
 80469fa:	4770      	bx	lr
